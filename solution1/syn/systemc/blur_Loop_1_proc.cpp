// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "blur_Loop_1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic blur_Loop_1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic blur_Loop_1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> blur_Loop_1_proc::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> blur_Loop_1_proc::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> blur_Loop_1_proc::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> blur_Loop_1_proc::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> blur_Loop_1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> blur_Loop_1_proc::ap_const_lv1_1 = "1";
const sc_lv<32> blur_Loop_1_proc::ap_const_lv32_1 = "1";
const sc_lv<1> blur_Loop_1_proc::ap_const_lv1_0 = "0";
const sc_lv<32> blur_Loop_1_proc::ap_const_lv32_2 = "10";
const sc_lv<2> blur_Loop_1_proc::ap_const_lv2_0 = "00";
const sc_lv<32> blur_Loop_1_proc::ap_const_lv32_3 = "11";
const sc_lv<2> blur_Loop_1_proc::ap_const_lv2_1 = "1";
const sc_lv<2> blur_Loop_1_proc::ap_const_lv2_3 = "11";

blur_Loop_1_proc::blur_Loop_1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coefficients_U = new blur_Loop_1_proc_coefficients("coefficients_U");
    coefficients_U->clk(ap_clk);
    coefficients_U->reset(ap_rst);
    coefficients_U->address0(coefficients_address0);
    coefficients_U->ce0(coefficients_ce0);
    coefficients_U->q0(coefficients_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_0_0_s_fu_28 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_0_1_s_fu_40 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_0_2_s_fu_52 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_1_0_s_fu_48 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_1_1_s_fu_44 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_1_2_s_fu_36 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_2_0_s_fu_32 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_2_1_s_fu_24 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( kernel_val_2_2_s_fu_20 );

    SC_METHOD(thread_ap_sig_bdd_23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_82);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_sig_bdd_94);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_23 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_54 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_bdd_69 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_bdd_94 );

    SC_METHOD(thread_coefficients_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_4_cast_fu_228_p1 );

    SC_METHOD(thread_coefficients_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_exitcond1_fu_92_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_68 );

    SC_METHOD(thread_exitcond_fu_207_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_80 );

    SC_METHOD(thread_i_1_fu_98_p2);
    sensitive << ( i_reg_68 );

    SC_METHOD(thread_j_1_fu_213_p2);
    sensitive << ( j_reg_80 );

    SC_METHOD(thread_kernel_val_2_0_cast_fu_233_p1);
    sensitive << ( coefficients_q0 );

    SC_METHOD(thread_p_shl_cast_fu_116_p1);
    sensitive << ( tmp_2_fu_108_p3 );

    SC_METHOD(thread_tmp_2_fu_108_p3);
    sensitive << ( i_reg_68 );

    SC_METHOD(thread_tmp_3_fu_120_p2);
    sensitive << ( p_shl_cast_fu_116_p1 );
    sensitive << ( tmp_cast_fu_104_p1 );

    SC_METHOD(thread_tmp_4_cast_fu_228_p1);
    sensitive << ( tmp_4_fu_223_p2 );

    SC_METHOD(thread_tmp_4_fu_223_p2);
    sensitive << ( tmp_3_reg_344 );
    sensitive << ( tmp_cast_42_fu_219_p1 );

    SC_METHOD(thread_tmp_cast_42_fu_219_p1);
    sensitive << ( j_reg_80 );

    SC_METHOD(thread_tmp_cast_fu_104_p1);
    sensitive << ( i_reg_68 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_92_p2 );
    sensitive << ( exitcond_fu_207_p2 );
    sensitive << ( ap_sig_bdd_82 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "blur_Loop_1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_23, "ap_sig_bdd_23");
    sc_trace(mVcdFile, coefficients_address0, "coefficients_address0");
    sc_trace(mVcdFile, coefficients_ce0, "coefficients_ce0");
    sc_trace(mVcdFile, coefficients_q0, "coefficients_q0");
    sc_trace(mVcdFile, i_1_fu_98_p2, "i_1_fu_98_p2");
    sc_trace(mVcdFile, i_1_reg_339, "i_1_reg_339");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_54, "ap_sig_bdd_54");
    sc_trace(mVcdFile, tmp_3_fu_120_p2, "tmp_3_fu_120_p2");
    sc_trace(mVcdFile, tmp_3_reg_344, "tmp_3_reg_344");
    sc_trace(mVcdFile, exitcond1_fu_92_p2, "exitcond1_fu_92_p2");
    sc_trace(mVcdFile, j_1_fu_213_p2, "j_1_fu_213_p2");
    sc_trace(mVcdFile, j_1_reg_352, "j_1_reg_352");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_bdd_69, "ap_sig_bdd_69");
    sc_trace(mVcdFile, exitcond_fu_207_p2, "exitcond_fu_207_p2");
    sc_trace(mVcdFile, i_reg_68, "i_reg_68");
    sc_trace(mVcdFile, ap_sig_bdd_82, "ap_sig_bdd_82");
    sc_trace(mVcdFile, j_reg_80, "j_reg_80");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_bdd_94, "ap_sig_bdd_94");
    sc_trace(mVcdFile, tmp_4_cast_fu_228_p1, "tmp_4_cast_fu_228_p1");
    sc_trace(mVcdFile, kernel_val_2_2_s_fu_20, "kernel_val_2_2_s_fu_20");
    sc_trace(mVcdFile, kernel_val_2_0_cast_fu_233_p1, "kernel_val_2_0_cast_fu_233_p1");
    sc_trace(mVcdFile, kernel_val_2_1_s_fu_24, "kernel_val_2_1_s_fu_24");
    sc_trace(mVcdFile, kernel_val_0_0_s_fu_28, "kernel_val_0_0_s_fu_28");
    sc_trace(mVcdFile, kernel_val_2_0_s_fu_32, "kernel_val_2_0_s_fu_32");
    sc_trace(mVcdFile, kernel_val_1_2_s_fu_36, "kernel_val_1_2_s_fu_36");
    sc_trace(mVcdFile, kernel_val_0_1_s_fu_40, "kernel_val_0_1_s_fu_40");
    sc_trace(mVcdFile, kernel_val_1_1_s_fu_44, "kernel_val_1_1_s_fu_44");
    sc_trace(mVcdFile, kernel_val_1_0_s_fu_48, "kernel_val_1_0_s_fu_48");
    sc_trace(mVcdFile, kernel_val_0_2_s_fu_52, "kernel_val_0_2_s_fu_52");
    sc_trace(mVcdFile, tmp_2_fu_108_p3, "tmp_2_fu_108_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_116_p1, "p_shl_cast_fu_116_p1");
    sc_trace(mVcdFile, tmp_cast_fu_104_p1, "tmp_cast_fu_104_p1");
    sc_trace(mVcdFile, tmp_cast_42_fu_219_p1, "tmp_cast_42_fu_219_p1");
    sc_trace(mVcdFile, tmp_4_fu_223_p2, "tmp_4_fu_223_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

blur_Loop_1_proc::~blur_Loop_1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete coefficients_U;
}

void blur_Loop_1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                    !esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_207_p2.read()))) {
        i_reg_68 = i_1_reg_339.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !ap_sig_bdd_82.read())) {
        i_reg_68 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        j_reg_80 = j_1_reg_352.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0))) {
        j_reg_80 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_339 = i_1_fu_98_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_352 = j_1_fu_213_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_0_0_s_fu_28 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1))) {
        kernel_val_0_1_s_fu_40 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && !esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_0_2_s_fu_52 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_1_0_s_fu_48 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1))) {
        kernel_val_1_1_s_fu_44 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_1_2_s_fu_36 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_2_0_s_fu_32 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1))) {
        kernel_val_2_1_s_fu_24 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,2,2>(i_reg_68.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, i_reg_68.read()) && !esl_seteq<1,2,2>(j_reg_80.read(), ap_const_lv2_1) && !esl_seteq<1,2,2>(ap_const_lv2_0, j_reg_80.read()))) {
        kernel_val_2_2_s_fu_20 = kernel_val_2_0_cast_fu_233_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_344 = tmp_3_fu_120_p2.read();
    }
}

void blur_Loop_1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_done_reg.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_return_0() {
    ap_return_0 = kernel_val_0_0_s_fu_28.read();
}

void blur_Loop_1_proc::thread_ap_return_1() {
    ap_return_1 = kernel_val_0_1_s_fu_40.read();
}

void blur_Loop_1_proc::thread_ap_return_2() {
    ap_return_2 = kernel_val_0_2_s_fu_52.read();
}

void blur_Loop_1_proc::thread_ap_return_3() {
    ap_return_3 = kernel_val_1_0_s_fu_48.read();
}

void blur_Loop_1_proc::thread_ap_return_4() {
    ap_return_4 = kernel_val_1_1_s_fu_44.read();
}

void blur_Loop_1_proc::thread_ap_return_5() {
    ap_return_5 = kernel_val_1_2_s_fu_36.read();
}

void blur_Loop_1_proc::thread_ap_return_6() {
    ap_return_6 = kernel_val_2_0_s_fu_32.read();
}

void blur_Loop_1_proc::thread_ap_return_7() {
    ap_return_7 = kernel_val_2_1_s_fu_24.read();
}

void blur_Loop_1_proc::thread_ap_return_8() {
    ap_return_8 = kernel_val_2_2_s_fu_20.read();
}

void blur_Loop_1_proc::thread_ap_sig_bdd_23() {
    ap_sig_bdd_23 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void blur_Loop_1_proc::thread_ap_sig_bdd_54() {
    ap_sig_bdd_54 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void blur_Loop_1_proc::thread_ap_sig_bdd_69() {
    ap_sig_bdd_69 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void blur_Loop_1_proc::thread_ap_sig_bdd_82() {
    ap_sig_bdd_82 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void blur_Loop_1_proc::thread_ap_sig_bdd_94() {
    ap_sig_bdd_94 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void blur_Loop_1_proc::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_23.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_54.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_bdd_69.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_bdd_94.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_coefficients_address0() {
    coefficients_address0 =  (sc_lv<4>) (tmp_4_cast_fu_228_p1.read());
}

void blur_Loop_1_proc::thread_coefficients_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        coefficients_ce0 = ap_const_logic_1;
    } else {
        coefficients_ce0 = ap_const_logic_0;
    }
}

void blur_Loop_1_proc::thread_exitcond1_fu_92_p2() {
    exitcond1_fu_92_p2 = (!i_reg_68.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_68.read() == ap_const_lv2_3);
}

void blur_Loop_1_proc::thread_exitcond_fu_207_p2() {
    exitcond_fu_207_p2 = (!j_reg_80.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_80.read() == ap_const_lv2_3);
}

void blur_Loop_1_proc::thread_i_1_fu_98_p2() {
    i_1_fu_98_p2 = (!i_reg_68.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_68.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void blur_Loop_1_proc::thread_j_1_fu_213_p2() {
    j_1_fu_213_p2 = (!j_reg_80.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_reg_80.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void blur_Loop_1_proc::thread_kernel_val_2_0_cast_fu_233_p1() {
    kernel_val_2_0_cast_fu_233_p1 = esl_sext<8,3>(coefficients_q0.read());
}

void blur_Loop_1_proc::thread_p_shl_cast_fu_116_p1() {
    p_shl_cast_fu_116_p1 = esl_zext<5,4>(tmp_2_fu_108_p3.read());
}

void blur_Loop_1_proc::thread_tmp_2_fu_108_p3() {
    tmp_2_fu_108_p3 = esl_concat<2,2>(i_reg_68.read(), ap_const_lv2_0);
}

void blur_Loop_1_proc::thread_tmp_3_fu_120_p2() {
    tmp_3_fu_120_p2 = (!p_shl_cast_fu_116_p1.read().is_01() || !tmp_cast_fu_104_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_116_p1.read()) - sc_biguint<5>(tmp_cast_fu_104_p1.read()));
}

void blur_Loop_1_proc::thread_tmp_4_cast_fu_228_p1() {
    tmp_4_cast_fu_228_p1 = esl_sext<64,5>(tmp_4_fu_223_p2.read());
}

void blur_Loop_1_proc::thread_tmp_4_fu_223_p2() {
    tmp_4_fu_223_p2 = (!tmp_3_reg_344.read().is_01() || !tmp_cast_42_fu_219_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_3_reg_344.read()) + sc_biguint<5>(tmp_cast_42_fu_219_p1.read()));
}

void blur_Loop_1_proc::thread_tmp_cast_42_fu_219_p1() {
    tmp_cast_42_fu_219_p1 = esl_zext<5,2>(j_reg_80.read());
}

void blur_Loop_1_proc::thread_tmp_cast_fu_104_p1() {
    tmp_cast_fu_104_p1 = esl_zext<5,2>(i_reg_68.read());
}

void blur_Loop_1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_bdd_82.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_92_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_207_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

