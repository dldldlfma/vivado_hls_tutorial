// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "blur.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int blur::C_S_AXI_DATA_WIDTH = "100000";
const int blur::C_S_AXI_WSTRB_WIDTH = "100";
const int blur::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic blur::ap_const_logic_1 = sc_dt::Log_1;
const int blur::C_M_AXI_ID_WIDTH = "1";
const int blur::C_M_AXI_ADDR_WIDTH = "100000";
const int blur::C_M_AXI_DATA_WIDTH = "100000";
const int blur::C_M_AXI_WSTRB_WIDTH = "100";
const int blur::C_M_AXI_AWUSER_WIDTH = "1";
const int blur::C_M_AXI_ARUSER_WIDTH = "1";
const int blur::C_M_AXI_WUSER_WIDTH = "1";
const int blur::C_M_AXI_RUSER_WIDTH = "1";
const int blur::C_M_AXI_BUSER_WIDTH = "1";
const int blur::C_M_AXI_CRTL_BUS_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int blur::C_M_AXI_CRTL_BUS_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int blur::C_M_AXI_CRTL_BUS_CACHE_VALUE = "11";
const sc_logic blur::ap_const_logic_0 = sc_dt::Log_0;
const bool blur::ap_true = true;
const sc_lv<2> blur::ap_const_lv2_0 = "00";
const sc_lv<2> blur::ap_const_lv2_1 = "1";
const sc_lv<1> blur::ap_const_lv1_0 = "0";
const sc_lv<1> blur::ap_const_lv1_1 = "1";
const sc_lv<8> blur::ap_const_lv8_0 = "00000000";
const sc_lv<8> blur::ap_const_lv8_1 = "1";

blur::blur(sc_module_name name) : sc_module(name), mVcdFile(0) {
    blur_AXILiteS_s_axi_U = new blur_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("blur_AXILiteS_s_axi_U");
    blur_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    blur_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    blur_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    blur_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    blur_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    blur_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    blur_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    blur_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    blur_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    blur_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    blur_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    blur_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    blur_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    blur_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    blur_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    blur_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    blur_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    blur_AXILiteS_s_axi_U->ACLK(ap_clk);
    blur_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    blur_AXILiteS_s_axi_U->ACLK_EN(blur_AXILiteS_s_axi_U_ap_dummy_ce);
    blur_AXILiteS_s_axi_U->image_in(image_in);
    blur_AXILiteS_s_axi_U->image_out(image_out);
    blur_CRTL_BUS_m_axi_U = new blur_CRTL_BUS_m_axi<8,32,5,C_M_AXI_CRTL_BUS_ID_WIDTH,C_M_AXI_CRTL_BUS_ADDR_WIDTH,C_M_AXI_CRTL_BUS_DATA_WIDTH,C_M_AXI_CRTL_BUS_AWUSER_WIDTH,C_M_AXI_CRTL_BUS_ARUSER_WIDTH,C_M_AXI_CRTL_BUS_WUSER_WIDTH,C_M_AXI_CRTL_BUS_RUSER_WIDTH,C_M_AXI_CRTL_BUS_BUSER_WIDTH,C_M_AXI_CRTL_BUS_USER_VALUE,C_M_AXI_CRTL_BUS_PROT_VALUE,C_M_AXI_CRTL_BUS_CACHE_VALUE>("blur_CRTL_BUS_m_axi_U");
    blur_CRTL_BUS_m_axi_U->AWVALID(m_axi_CRTL_BUS_AWVALID);
    blur_CRTL_BUS_m_axi_U->AWREADY(m_axi_CRTL_BUS_AWREADY);
    blur_CRTL_BUS_m_axi_U->AWADDR(m_axi_CRTL_BUS_AWADDR);
    blur_CRTL_BUS_m_axi_U->AWID(m_axi_CRTL_BUS_AWID);
    blur_CRTL_BUS_m_axi_U->AWLEN(m_axi_CRTL_BUS_AWLEN);
    blur_CRTL_BUS_m_axi_U->AWSIZE(m_axi_CRTL_BUS_AWSIZE);
    blur_CRTL_BUS_m_axi_U->AWBURST(m_axi_CRTL_BUS_AWBURST);
    blur_CRTL_BUS_m_axi_U->AWLOCK(m_axi_CRTL_BUS_AWLOCK);
    blur_CRTL_BUS_m_axi_U->AWCACHE(m_axi_CRTL_BUS_AWCACHE);
    blur_CRTL_BUS_m_axi_U->AWPROT(m_axi_CRTL_BUS_AWPROT);
    blur_CRTL_BUS_m_axi_U->AWQOS(m_axi_CRTL_BUS_AWQOS);
    blur_CRTL_BUS_m_axi_U->AWREGION(m_axi_CRTL_BUS_AWREGION);
    blur_CRTL_BUS_m_axi_U->AWUSER(m_axi_CRTL_BUS_AWUSER);
    blur_CRTL_BUS_m_axi_U->WVALID(m_axi_CRTL_BUS_WVALID);
    blur_CRTL_BUS_m_axi_U->WREADY(m_axi_CRTL_BUS_WREADY);
    blur_CRTL_BUS_m_axi_U->WDATA(m_axi_CRTL_BUS_WDATA);
    blur_CRTL_BUS_m_axi_U->WSTRB(m_axi_CRTL_BUS_WSTRB);
    blur_CRTL_BUS_m_axi_U->WLAST(m_axi_CRTL_BUS_WLAST);
    blur_CRTL_BUS_m_axi_U->WID(m_axi_CRTL_BUS_WID);
    blur_CRTL_BUS_m_axi_U->WUSER(m_axi_CRTL_BUS_WUSER);
    blur_CRTL_BUS_m_axi_U->ARVALID(m_axi_CRTL_BUS_ARVALID);
    blur_CRTL_BUS_m_axi_U->ARREADY(m_axi_CRTL_BUS_ARREADY);
    blur_CRTL_BUS_m_axi_U->ARADDR(m_axi_CRTL_BUS_ARADDR);
    blur_CRTL_BUS_m_axi_U->ARID(m_axi_CRTL_BUS_ARID);
    blur_CRTL_BUS_m_axi_U->ARLEN(m_axi_CRTL_BUS_ARLEN);
    blur_CRTL_BUS_m_axi_U->ARSIZE(m_axi_CRTL_BUS_ARSIZE);
    blur_CRTL_BUS_m_axi_U->ARBURST(m_axi_CRTL_BUS_ARBURST);
    blur_CRTL_BUS_m_axi_U->ARLOCK(m_axi_CRTL_BUS_ARLOCK);
    blur_CRTL_BUS_m_axi_U->ARCACHE(m_axi_CRTL_BUS_ARCACHE);
    blur_CRTL_BUS_m_axi_U->ARPROT(m_axi_CRTL_BUS_ARPROT);
    blur_CRTL_BUS_m_axi_U->ARQOS(m_axi_CRTL_BUS_ARQOS);
    blur_CRTL_BUS_m_axi_U->ARREGION(m_axi_CRTL_BUS_ARREGION);
    blur_CRTL_BUS_m_axi_U->ARUSER(m_axi_CRTL_BUS_ARUSER);
    blur_CRTL_BUS_m_axi_U->RVALID(m_axi_CRTL_BUS_RVALID);
    blur_CRTL_BUS_m_axi_U->RREADY(m_axi_CRTL_BUS_RREADY);
    blur_CRTL_BUS_m_axi_U->RDATA(m_axi_CRTL_BUS_RDATA);
    blur_CRTL_BUS_m_axi_U->RLAST(m_axi_CRTL_BUS_RLAST);
    blur_CRTL_BUS_m_axi_U->RID(m_axi_CRTL_BUS_RID);
    blur_CRTL_BUS_m_axi_U->RUSER(m_axi_CRTL_BUS_RUSER);
    blur_CRTL_BUS_m_axi_U->RRESP(m_axi_CRTL_BUS_RRESP);
    blur_CRTL_BUS_m_axi_U->BVALID(m_axi_CRTL_BUS_BVALID);
    blur_CRTL_BUS_m_axi_U->BREADY(m_axi_CRTL_BUS_BREADY);
    blur_CRTL_BUS_m_axi_U->BRESP(m_axi_CRTL_BUS_BRESP);
    blur_CRTL_BUS_m_axi_U->BID(m_axi_CRTL_BUS_BID);
    blur_CRTL_BUS_m_axi_U->BUSER(m_axi_CRTL_BUS_BUSER);
    blur_CRTL_BUS_m_axi_U->ACLK(ap_clk);
    blur_CRTL_BUS_m_axi_U->ARESET(ap_rst_n_inv);
    blur_CRTL_BUS_m_axi_U->ACLK_EN(blur_CRTL_BUS_m_axi_U_ap_dummy_ce);
    blur_CRTL_BUS_m_axi_U->I_ARVALID(CRTL_BUS_ARVALID);
    blur_CRTL_BUS_m_axi_U->I_ARREADY(CRTL_BUS_ARREADY);
    blur_CRTL_BUS_m_axi_U->I_ARADDR(CRTL_BUS_ARADDR);
    blur_CRTL_BUS_m_axi_U->I_ARID(CRTL_BUS_ARID);
    blur_CRTL_BUS_m_axi_U->I_ARLEN(CRTL_BUS_ARLEN);
    blur_CRTL_BUS_m_axi_U->I_ARSIZE(CRTL_BUS_ARSIZE);
    blur_CRTL_BUS_m_axi_U->I_ARLOCK(CRTL_BUS_ARLOCK);
    blur_CRTL_BUS_m_axi_U->I_ARCACHE(CRTL_BUS_ARCACHE);
    blur_CRTL_BUS_m_axi_U->I_ARQOS(CRTL_BUS_ARQOS);
    blur_CRTL_BUS_m_axi_U->I_ARPROT(CRTL_BUS_ARPROT);
    blur_CRTL_BUS_m_axi_U->I_ARUSER(CRTL_BUS_ARUSER);
    blur_CRTL_BUS_m_axi_U->I_ARBURST(CRTL_BUS_ARBURST);
    blur_CRTL_BUS_m_axi_U->I_ARREGION(CRTL_BUS_ARREGION);
    blur_CRTL_BUS_m_axi_U->I_RVALID(CRTL_BUS_RVALID);
    blur_CRTL_BUS_m_axi_U->I_RREADY(CRTL_BUS_RREADY);
    blur_CRTL_BUS_m_axi_U->I_RDATA(CRTL_BUS_RDATA);
    blur_CRTL_BUS_m_axi_U->I_RID(CRTL_BUS_RID);
    blur_CRTL_BUS_m_axi_U->I_RUSER(CRTL_BUS_RUSER);
    blur_CRTL_BUS_m_axi_U->I_RRESP(CRTL_BUS_RRESP);
    blur_CRTL_BUS_m_axi_U->I_RLAST(CRTL_BUS_RLAST);
    blur_CRTL_BUS_m_axi_U->I_AWVALID(CRTL_BUS_AWVALID);
    blur_CRTL_BUS_m_axi_U->I_AWREADY(CRTL_BUS_AWREADY);
    blur_CRTL_BUS_m_axi_U->I_AWADDR(CRTL_BUS_AWADDR);
    blur_CRTL_BUS_m_axi_U->I_AWID(CRTL_BUS_AWID);
    blur_CRTL_BUS_m_axi_U->I_AWLEN(CRTL_BUS_AWLEN);
    blur_CRTL_BUS_m_axi_U->I_AWSIZE(CRTL_BUS_AWSIZE);
    blur_CRTL_BUS_m_axi_U->I_AWLOCK(CRTL_BUS_AWLOCK);
    blur_CRTL_BUS_m_axi_U->I_AWCACHE(CRTL_BUS_AWCACHE);
    blur_CRTL_BUS_m_axi_U->I_AWQOS(CRTL_BUS_AWQOS);
    blur_CRTL_BUS_m_axi_U->I_AWPROT(CRTL_BUS_AWPROT);
    blur_CRTL_BUS_m_axi_U->I_AWUSER(CRTL_BUS_AWUSER);
    blur_CRTL_BUS_m_axi_U->I_AWBURST(CRTL_BUS_AWBURST);
    blur_CRTL_BUS_m_axi_U->I_AWREGION(CRTL_BUS_AWREGION);
    blur_CRTL_BUS_m_axi_U->I_WVALID(CRTL_BUS_WVALID);
    blur_CRTL_BUS_m_axi_U->I_WREADY(CRTL_BUS_WREADY);
    blur_CRTL_BUS_m_axi_U->I_WDATA(CRTL_BUS_WDATA);
    blur_CRTL_BUS_m_axi_U->I_WID(CRTL_BUS_WID);
    blur_CRTL_BUS_m_axi_U->I_WUSER(CRTL_BUS_WUSER);
    blur_CRTL_BUS_m_axi_U->I_WLAST(CRTL_BUS_WLAST);
    blur_CRTL_BUS_m_axi_U->I_WSTRB(CRTL_BUS_WSTRB);
    blur_CRTL_BUS_m_axi_U->I_BVALID(CRTL_BUS_BVALID);
    blur_CRTL_BUS_m_axi_U->I_BREADY(CRTL_BUS_BREADY);
    blur_CRTL_BUS_m_axi_U->I_BRESP(CRTL_BUS_BRESP);
    blur_CRTL_BUS_m_axi_U->I_BID(CRTL_BUS_BID);
    blur_CRTL_BUS_m_axi_U->I_BUSER(CRTL_BUS_BUSER);
    blur_Block_proc9_U0 = new blur_Block_proc9("blur_Block_proc9_U0");
    blur_Block_proc9_U0->ap_clk(ap_clk);
    blur_Block_proc9_U0->ap_rst(ap_rst_n_inv);
    blur_Block_proc9_U0->ap_start(blur_Block_proc9_U0_ap_start);
    blur_Block_proc9_U0->ap_done(blur_Block_proc9_U0_ap_done);
    blur_Block_proc9_U0->ap_continue(blur_Block_proc9_U0_ap_continue);
    blur_Block_proc9_U0->ap_idle(blur_Block_proc9_U0_ap_idle);
    blur_Block_proc9_U0->ap_ready(blur_Block_proc9_U0_ap_ready);
    blur_Block_proc9_U0->src_rows_V_out_din(blur_Block_proc9_U0_src_rows_V_out_din);
    blur_Block_proc9_U0->src_rows_V_out_full_n(blur_Block_proc9_U0_src_rows_V_out_full_n);
    blur_Block_proc9_U0->src_rows_V_out_write(blur_Block_proc9_U0_src_rows_V_out_write);
    blur_Block_proc9_U0->src_cols_V_out_din(blur_Block_proc9_U0_src_cols_V_out_din);
    blur_Block_proc9_U0->src_cols_V_out_full_n(blur_Block_proc9_U0_src_cols_V_out_full_n);
    blur_Block_proc9_U0->src_cols_V_out_write(blur_Block_proc9_U0_src_cols_V_out_write);
    blur_Block_proc9_U0->image_in(blur_Block_proc9_U0_image_in);
    blur_Block_proc9_U0->image_out(blur_Block_proc9_U0_image_out);
    blur_Block_proc9_U0->image_in_out_din(blur_Block_proc9_U0_image_in_out_din);
    blur_Block_proc9_U0->image_in_out_full_n(blur_Block_proc9_U0_image_in_out_full_n);
    blur_Block_proc9_U0->image_in_out_write(blur_Block_proc9_U0_image_in_out_write);
    blur_Block_proc9_U0->image_out_out_din(blur_Block_proc9_U0_image_out_out_din);
    blur_Block_proc9_U0->image_out_out_full_n(blur_Block_proc9_U0_image_out_out_full_n);
    blur_Block_proc9_U0->image_out_out_write(blur_Block_proc9_U0_image_out_out_write);
    blur_AXIM2Mat_U0 = new blur_AXIM2Mat("blur_AXIM2Mat_U0");
    blur_AXIM2Mat_U0->ap_clk(ap_clk);
    blur_AXIM2Mat_U0->ap_rst(ap_rst_n_inv);
    blur_AXIM2Mat_U0->ap_start(blur_AXIM2Mat_U0_ap_start);
    blur_AXIM2Mat_U0->ap_done(blur_AXIM2Mat_U0_ap_done);
    blur_AXIM2Mat_U0->ap_continue(blur_AXIM2Mat_U0_ap_continue);
    blur_AXIM2Mat_U0->ap_idle(blur_AXIM2Mat_U0_ap_idle);
    blur_AXIM2Mat_U0->ap_ready(blur_AXIM2Mat_U0_ap_ready);
    blur_AXIM2Mat_U0->m_axi_fb_AWVALID(blur_AXIM2Mat_U0_m_axi_fb_AWVALID);
    blur_AXIM2Mat_U0->m_axi_fb_AWREADY(blur_AXIM2Mat_U0_m_axi_fb_AWREADY);
    blur_AXIM2Mat_U0->m_axi_fb_AWADDR(blur_AXIM2Mat_U0_m_axi_fb_AWADDR);
    blur_AXIM2Mat_U0->m_axi_fb_AWID(blur_AXIM2Mat_U0_m_axi_fb_AWID);
    blur_AXIM2Mat_U0->m_axi_fb_AWLEN(blur_AXIM2Mat_U0_m_axi_fb_AWLEN);
    blur_AXIM2Mat_U0->m_axi_fb_AWSIZE(blur_AXIM2Mat_U0_m_axi_fb_AWSIZE);
    blur_AXIM2Mat_U0->m_axi_fb_AWBURST(blur_AXIM2Mat_U0_m_axi_fb_AWBURST);
    blur_AXIM2Mat_U0->m_axi_fb_AWLOCK(blur_AXIM2Mat_U0_m_axi_fb_AWLOCK);
    blur_AXIM2Mat_U0->m_axi_fb_AWCACHE(blur_AXIM2Mat_U0_m_axi_fb_AWCACHE);
    blur_AXIM2Mat_U0->m_axi_fb_AWPROT(blur_AXIM2Mat_U0_m_axi_fb_AWPROT);
    blur_AXIM2Mat_U0->m_axi_fb_AWQOS(blur_AXIM2Mat_U0_m_axi_fb_AWQOS);
    blur_AXIM2Mat_U0->m_axi_fb_AWREGION(blur_AXIM2Mat_U0_m_axi_fb_AWREGION);
    blur_AXIM2Mat_U0->m_axi_fb_AWUSER(blur_AXIM2Mat_U0_m_axi_fb_AWUSER);
    blur_AXIM2Mat_U0->m_axi_fb_WVALID(blur_AXIM2Mat_U0_m_axi_fb_WVALID);
    blur_AXIM2Mat_U0->m_axi_fb_WREADY(blur_AXIM2Mat_U0_m_axi_fb_WREADY);
    blur_AXIM2Mat_U0->m_axi_fb_WDATA(blur_AXIM2Mat_U0_m_axi_fb_WDATA);
    blur_AXIM2Mat_U0->m_axi_fb_WSTRB(blur_AXIM2Mat_U0_m_axi_fb_WSTRB);
    blur_AXIM2Mat_U0->m_axi_fb_WLAST(blur_AXIM2Mat_U0_m_axi_fb_WLAST);
    blur_AXIM2Mat_U0->m_axi_fb_WID(blur_AXIM2Mat_U0_m_axi_fb_WID);
    blur_AXIM2Mat_U0->m_axi_fb_WUSER(blur_AXIM2Mat_U0_m_axi_fb_WUSER);
    blur_AXIM2Mat_U0->m_axi_fb_ARVALID(blur_AXIM2Mat_U0_m_axi_fb_ARVALID);
    blur_AXIM2Mat_U0->m_axi_fb_ARREADY(blur_AXIM2Mat_U0_m_axi_fb_ARREADY);
    blur_AXIM2Mat_U0->m_axi_fb_ARADDR(blur_AXIM2Mat_U0_m_axi_fb_ARADDR);
    blur_AXIM2Mat_U0->m_axi_fb_ARID(blur_AXIM2Mat_U0_m_axi_fb_ARID);
    blur_AXIM2Mat_U0->m_axi_fb_ARLEN(blur_AXIM2Mat_U0_m_axi_fb_ARLEN);
    blur_AXIM2Mat_U0->m_axi_fb_ARSIZE(blur_AXIM2Mat_U0_m_axi_fb_ARSIZE);
    blur_AXIM2Mat_U0->m_axi_fb_ARBURST(blur_AXIM2Mat_U0_m_axi_fb_ARBURST);
    blur_AXIM2Mat_U0->m_axi_fb_ARLOCK(blur_AXIM2Mat_U0_m_axi_fb_ARLOCK);
    blur_AXIM2Mat_U0->m_axi_fb_ARCACHE(blur_AXIM2Mat_U0_m_axi_fb_ARCACHE);
    blur_AXIM2Mat_U0->m_axi_fb_ARPROT(blur_AXIM2Mat_U0_m_axi_fb_ARPROT);
    blur_AXIM2Mat_U0->m_axi_fb_ARQOS(blur_AXIM2Mat_U0_m_axi_fb_ARQOS);
    blur_AXIM2Mat_U0->m_axi_fb_ARREGION(blur_AXIM2Mat_U0_m_axi_fb_ARREGION);
    blur_AXIM2Mat_U0->m_axi_fb_ARUSER(blur_AXIM2Mat_U0_m_axi_fb_ARUSER);
    blur_AXIM2Mat_U0->m_axi_fb_RVALID(blur_AXIM2Mat_U0_m_axi_fb_RVALID);
    blur_AXIM2Mat_U0->m_axi_fb_RREADY(blur_AXIM2Mat_U0_m_axi_fb_RREADY);
    blur_AXIM2Mat_U0->m_axi_fb_RDATA(blur_AXIM2Mat_U0_m_axi_fb_RDATA);
    blur_AXIM2Mat_U0->m_axi_fb_RLAST(blur_AXIM2Mat_U0_m_axi_fb_RLAST);
    blur_AXIM2Mat_U0->m_axi_fb_RID(blur_AXIM2Mat_U0_m_axi_fb_RID);
    blur_AXIM2Mat_U0->m_axi_fb_RUSER(blur_AXIM2Mat_U0_m_axi_fb_RUSER);
    blur_AXIM2Mat_U0->m_axi_fb_RRESP(blur_AXIM2Mat_U0_m_axi_fb_RRESP);
    blur_AXIM2Mat_U0->m_axi_fb_BVALID(blur_AXIM2Mat_U0_m_axi_fb_BVALID);
    blur_AXIM2Mat_U0->m_axi_fb_BREADY(blur_AXIM2Mat_U0_m_axi_fb_BREADY);
    blur_AXIM2Mat_U0->m_axi_fb_BRESP(blur_AXIM2Mat_U0_m_axi_fb_BRESP);
    blur_AXIM2Mat_U0->m_axi_fb_BID(blur_AXIM2Mat_U0_m_axi_fb_BID);
    blur_AXIM2Mat_U0->m_axi_fb_BUSER(blur_AXIM2Mat_U0_m_axi_fb_BUSER);
    blur_AXIM2Mat_U0->image_in_dout(blur_AXIM2Mat_U0_image_in_dout);
    blur_AXIM2Mat_U0->image_in_empty_n(blur_AXIM2Mat_U0_image_in_empty_n);
    blur_AXIM2Mat_U0->image_in_read(blur_AXIM2Mat_U0_image_in_read);
    blur_AXIM2Mat_U0->img_rows_V_dout(blur_AXIM2Mat_U0_img_rows_V_dout);
    blur_AXIM2Mat_U0->img_rows_V_empty_n(blur_AXIM2Mat_U0_img_rows_V_empty_n);
    blur_AXIM2Mat_U0->img_rows_V_read(blur_AXIM2Mat_U0_img_rows_V_read);
    blur_AXIM2Mat_U0->img_cols_V_dout(blur_AXIM2Mat_U0_img_cols_V_dout);
    blur_AXIM2Mat_U0->img_cols_V_empty_n(blur_AXIM2Mat_U0_img_cols_V_empty_n);
    blur_AXIM2Mat_U0->img_cols_V_read(blur_AXIM2Mat_U0_img_cols_V_read);
    blur_AXIM2Mat_U0->img_data_stream_V_din(blur_AXIM2Mat_U0_img_data_stream_V_din);
    blur_AXIM2Mat_U0->img_data_stream_V_full_n(blur_AXIM2Mat_U0_img_data_stream_V_full_n);
    blur_AXIM2Mat_U0->img_data_stream_V_write(blur_AXIM2Mat_U0_img_data_stream_V_write);
    blur_AXIM2Mat_U0->img_rows_V_out_din(blur_AXIM2Mat_U0_img_rows_V_out_din);
    blur_AXIM2Mat_U0->img_rows_V_out_full_n(blur_AXIM2Mat_U0_img_rows_V_out_full_n);
    blur_AXIM2Mat_U0->img_rows_V_out_write(blur_AXIM2Mat_U0_img_rows_V_out_write);
    blur_AXIM2Mat_U0->img_cols_V_out_din(blur_AXIM2Mat_U0_img_cols_V_out_din);
    blur_AXIM2Mat_U0->img_cols_V_out_full_n(blur_AXIM2Mat_U0_img_cols_V_out_full_n);
    blur_AXIM2Mat_U0->img_cols_V_out_write(blur_AXIM2Mat_U0_img_cols_V_out_write);
    blur_Loop_1_proc_U0 = new blur_Loop_1_proc("blur_Loop_1_proc_U0");
    blur_Loop_1_proc_U0->ap_clk(ap_clk);
    blur_Loop_1_proc_U0->ap_rst(ap_rst_n_inv);
    blur_Loop_1_proc_U0->ap_start(blur_Loop_1_proc_U0_ap_start);
    blur_Loop_1_proc_U0->ap_done(blur_Loop_1_proc_U0_ap_done);
    blur_Loop_1_proc_U0->ap_continue(blur_Loop_1_proc_U0_ap_continue);
    blur_Loop_1_proc_U0->ap_idle(blur_Loop_1_proc_U0_ap_idle);
    blur_Loop_1_proc_U0->ap_ready(blur_Loop_1_proc_U0_ap_ready);
    blur_Loop_1_proc_U0->ap_return_0(blur_Loop_1_proc_U0_ap_return_0);
    blur_Loop_1_proc_U0->ap_return_1(blur_Loop_1_proc_U0_ap_return_1);
    blur_Loop_1_proc_U0->ap_return_2(blur_Loop_1_proc_U0_ap_return_2);
    blur_Loop_1_proc_U0->ap_return_3(blur_Loop_1_proc_U0_ap_return_3);
    blur_Loop_1_proc_U0->ap_return_4(blur_Loop_1_proc_U0_ap_return_4);
    blur_Loop_1_proc_U0->ap_return_5(blur_Loop_1_proc_U0_ap_return_5);
    blur_Loop_1_proc_U0->ap_return_6(blur_Loop_1_proc_U0_ap_return_6);
    blur_Loop_1_proc_U0->ap_return_7(blur_Loop_1_proc_U0_ap_return_7);
    blur_Loop_1_proc_U0->ap_return_8(blur_Loop_1_proc_U0_ap_return_8);
    blur_Filter2D_U0 = new blur_Filter2D("blur_Filter2D_U0");
    blur_Filter2D_U0->ap_clk(ap_clk);
    blur_Filter2D_U0->ap_rst(ap_rst_n_inv);
    blur_Filter2D_U0->ap_start(blur_Filter2D_U0_ap_start);
    blur_Filter2D_U0->ap_done(blur_Filter2D_U0_ap_done);
    blur_Filter2D_U0->ap_continue(blur_Filter2D_U0_ap_continue);
    blur_Filter2D_U0->ap_idle(blur_Filter2D_U0_ap_idle);
    blur_Filter2D_U0->ap_ready(blur_Filter2D_U0_ap_ready);
    blur_Filter2D_U0->p_src_rows_V_dout(blur_Filter2D_U0_p_src_rows_V_dout);
    blur_Filter2D_U0->p_src_rows_V_empty_n(blur_Filter2D_U0_p_src_rows_V_empty_n);
    blur_Filter2D_U0->p_src_rows_V_read(blur_Filter2D_U0_p_src_rows_V_read);
    blur_Filter2D_U0->p_src_cols_V_dout(blur_Filter2D_U0_p_src_cols_V_dout);
    blur_Filter2D_U0->p_src_cols_V_empty_n(blur_Filter2D_U0_p_src_cols_V_empty_n);
    blur_Filter2D_U0->p_src_cols_V_read(blur_Filter2D_U0_p_src_cols_V_read);
    blur_Filter2D_U0->p_src_data_stream_V_dout(blur_Filter2D_U0_p_src_data_stream_V_dout);
    blur_Filter2D_U0->p_src_data_stream_V_empty_n(blur_Filter2D_U0_p_src_data_stream_V_empty_n);
    blur_Filter2D_U0->p_src_data_stream_V_read(blur_Filter2D_U0_p_src_data_stream_V_read);
    blur_Filter2D_U0->p_dst_data_stream_V_din(blur_Filter2D_U0_p_dst_data_stream_V_din);
    blur_Filter2D_U0->p_dst_data_stream_V_full_n(blur_Filter2D_U0_p_dst_data_stream_V_full_n);
    blur_Filter2D_U0->p_dst_data_stream_V_write(blur_Filter2D_U0_p_dst_data_stream_V_write);
    blur_Filter2D_U0->p_kernel_val_0_0_read(blur_Filter2D_U0_p_kernel_val_0_0_read);
    blur_Filter2D_U0->p_kernel_val_0_1_read(blur_Filter2D_U0_p_kernel_val_0_1_read);
    blur_Filter2D_U0->p_kernel_val_0_2_read(blur_Filter2D_U0_p_kernel_val_0_2_read);
    blur_Filter2D_U0->p_kernel_val_1_0_read(blur_Filter2D_U0_p_kernel_val_1_0_read);
    blur_Filter2D_U0->p_kernel_val_1_1_read(blur_Filter2D_U0_p_kernel_val_1_1_read);
    blur_Filter2D_U0->p_kernel_val_1_2_read(blur_Filter2D_U0_p_kernel_val_1_2_read);
    blur_Filter2D_U0->p_kernel_val_2_0_read(blur_Filter2D_U0_p_kernel_val_2_0_read);
    blur_Filter2D_U0->p_kernel_val_2_1_read(blur_Filter2D_U0_p_kernel_val_2_1_read);
    blur_Filter2D_U0->p_kernel_val_2_2_read(blur_Filter2D_U0_p_kernel_val_2_2_read);
    blur_Mat2AXIM_U0 = new blur_Mat2AXIM("blur_Mat2AXIM_U0");
    blur_Mat2AXIM_U0->ap_clk(ap_clk);
    blur_Mat2AXIM_U0->ap_rst(ap_rst_n_inv);
    blur_Mat2AXIM_U0->ap_start(blur_Mat2AXIM_U0_ap_start);
    blur_Mat2AXIM_U0->ap_done(blur_Mat2AXIM_U0_ap_done);
    blur_Mat2AXIM_U0->ap_continue(blur_Mat2AXIM_U0_ap_continue);
    blur_Mat2AXIM_U0->ap_idle(blur_Mat2AXIM_U0_ap_idle);
    blur_Mat2AXIM_U0->ap_ready(blur_Mat2AXIM_U0_ap_ready);
    blur_Mat2AXIM_U0->img_data_stream_V_dout(blur_Mat2AXIM_U0_img_data_stream_V_dout);
    blur_Mat2AXIM_U0->img_data_stream_V_empty_n(blur_Mat2AXIM_U0_img_data_stream_V_empty_n);
    blur_Mat2AXIM_U0->img_data_stream_V_read(blur_Mat2AXIM_U0_img_data_stream_V_read);
    blur_Mat2AXIM_U0->m_axi_fb_AWVALID(blur_Mat2AXIM_U0_m_axi_fb_AWVALID);
    blur_Mat2AXIM_U0->m_axi_fb_AWREADY(blur_Mat2AXIM_U0_m_axi_fb_AWREADY);
    blur_Mat2AXIM_U0->m_axi_fb_AWADDR(blur_Mat2AXIM_U0_m_axi_fb_AWADDR);
    blur_Mat2AXIM_U0->m_axi_fb_AWID(blur_Mat2AXIM_U0_m_axi_fb_AWID);
    blur_Mat2AXIM_U0->m_axi_fb_AWLEN(blur_Mat2AXIM_U0_m_axi_fb_AWLEN);
    blur_Mat2AXIM_U0->m_axi_fb_AWSIZE(blur_Mat2AXIM_U0_m_axi_fb_AWSIZE);
    blur_Mat2AXIM_U0->m_axi_fb_AWBURST(blur_Mat2AXIM_U0_m_axi_fb_AWBURST);
    blur_Mat2AXIM_U0->m_axi_fb_AWLOCK(blur_Mat2AXIM_U0_m_axi_fb_AWLOCK);
    blur_Mat2AXIM_U0->m_axi_fb_AWCACHE(blur_Mat2AXIM_U0_m_axi_fb_AWCACHE);
    blur_Mat2AXIM_U0->m_axi_fb_AWPROT(blur_Mat2AXIM_U0_m_axi_fb_AWPROT);
    blur_Mat2AXIM_U0->m_axi_fb_AWQOS(blur_Mat2AXIM_U0_m_axi_fb_AWQOS);
    blur_Mat2AXIM_U0->m_axi_fb_AWREGION(blur_Mat2AXIM_U0_m_axi_fb_AWREGION);
    blur_Mat2AXIM_U0->m_axi_fb_AWUSER(blur_Mat2AXIM_U0_m_axi_fb_AWUSER);
    blur_Mat2AXIM_U0->m_axi_fb_WVALID(blur_Mat2AXIM_U0_m_axi_fb_WVALID);
    blur_Mat2AXIM_U0->m_axi_fb_WREADY(blur_Mat2AXIM_U0_m_axi_fb_WREADY);
    blur_Mat2AXIM_U0->m_axi_fb_WDATA(blur_Mat2AXIM_U0_m_axi_fb_WDATA);
    blur_Mat2AXIM_U0->m_axi_fb_WSTRB(blur_Mat2AXIM_U0_m_axi_fb_WSTRB);
    blur_Mat2AXIM_U0->m_axi_fb_WLAST(blur_Mat2AXIM_U0_m_axi_fb_WLAST);
    blur_Mat2AXIM_U0->m_axi_fb_WID(blur_Mat2AXIM_U0_m_axi_fb_WID);
    blur_Mat2AXIM_U0->m_axi_fb_WUSER(blur_Mat2AXIM_U0_m_axi_fb_WUSER);
    blur_Mat2AXIM_U0->m_axi_fb_ARVALID(blur_Mat2AXIM_U0_m_axi_fb_ARVALID);
    blur_Mat2AXIM_U0->m_axi_fb_ARREADY(blur_Mat2AXIM_U0_m_axi_fb_ARREADY);
    blur_Mat2AXIM_U0->m_axi_fb_ARADDR(blur_Mat2AXIM_U0_m_axi_fb_ARADDR);
    blur_Mat2AXIM_U0->m_axi_fb_ARID(blur_Mat2AXIM_U0_m_axi_fb_ARID);
    blur_Mat2AXIM_U0->m_axi_fb_ARLEN(blur_Mat2AXIM_U0_m_axi_fb_ARLEN);
    blur_Mat2AXIM_U0->m_axi_fb_ARSIZE(blur_Mat2AXIM_U0_m_axi_fb_ARSIZE);
    blur_Mat2AXIM_U0->m_axi_fb_ARBURST(blur_Mat2AXIM_U0_m_axi_fb_ARBURST);
    blur_Mat2AXIM_U0->m_axi_fb_ARLOCK(blur_Mat2AXIM_U0_m_axi_fb_ARLOCK);
    blur_Mat2AXIM_U0->m_axi_fb_ARCACHE(blur_Mat2AXIM_U0_m_axi_fb_ARCACHE);
    blur_Mat2AXIM_U0->m_axi_fb_ARPROT(blur_Mat2AXIM_U0_m_axi_fb_ARPROT);
    blur_Mat2AXIM_U0->m_axi_fb_ARQOS(blur_Mat2AXIM_U0_m_axi_fb_ARQOS);
    blur_Mat2AXIM_U0->m_axi_fb_ARREGION(blur_Mat2AXIM_U0_m_axi_fb_ARREGION);
    blur_Mat2AXIM_U0->m_axi_fb_ARUSER(blur_Mat2AXIM_U0_m_axi_fb_ARUSER);
    blur_Mat2AXIM_U0->m_axi_fb_RVALID(blur_Mat2AXIM_U0_m_axi_fb_RVALID);
    blur_Mat2AXIM_U0->m_axi_fb_RREADY(blur_Mat2AXIM_U0_m_axi_fb_RREADY);
    blur_Mat2AXIM_U0->m_axi_fb_RDATA(blur_Mat2AXIM_U0_m_axi_fb_RDATA);
    blur_Mat2AXIM_U0->m_axi_fb_RLAST(blur_Mat2AXIM_U0_m_axi_fb_RLAST);
    blur_Mat2AXIM_U0->m_axi_fb_RID(blur_Mat2AXIM_U0_m_axi_fb_RID);
    blur_Mat2AXIM_U0->m_axi_fb_RUSER(blur_Mat2AXIM_U0_m_axi_fb_RUSER);
    blur_Mat2AXIM_U0->m_axi_fb_RRESP(blur_Mat2AXIM_U0_m_axi_fb_RRESP);
    blur_Mat2AXIM_U0->m_axi_fb_BVALID(blur_Mat2AXIM_U0_m_axi_fb_BVALID);
    blur_Mat2AXIM_U0->m_axi_fb_BREADY(blur_Mat2AXIM_U0_m_axi_fb_BREADY);
    blur_Mat2AXIM_U0->m_axi_fb_BRESP(blur_Mat2AXIM_U0_m_axi_fb_BRESP);
    blur_Mat2AXIM_U0->m_axi_fb_BID(blur_Mat2AXIM_U0_m_axi_fb_BID);
    blur_Mat2AXIM_U0->m_axi_fb_BUSER(blur_Mat2AXIM_U0_m_axi_fb_BUSER);
    blur_Mat2AXIM_U0->image_out_dout(blur_Mat2AXIM_U0_image_out_dout);
    blur_Mat2AXIM_U0->image_out_empty_n(blur_Mat2AXIM_U0_image_out_empty_n);
    blur_Mat2AXIM_U0->image_out_read(blur_Mat2AXIM_U0_image_out_read);
    src_rows_V_channel_U = new FIFO_blur_src_rows_V_channel("src_rows_V_channel_U");
    src_rows_V_channel_U->clk(ap_clk);
    src_rows_V_channel_U->reset(ap_rst_n_inv);
    src_rows_V_channel_U->if_read_ce(src_rows_V_channel_U_ap_dummy_ce);
    src_rows_V_channel_U->if_write_ce(src_rows_V_channel_U_ap_dummy_ce);
    src_rows_V_channel_U->if_din(src_rows_V_channel_din);
    src_rows_V_channel_U->if_full_n(src_rows_V_channel_full_n);
    src_rows_V_channel_U->if_write(src_rows_V_channel_write);
    src_rows_V_channel_U->if_dout(src_rows_V_channel_dout);
    src_rows_V_channel_U->if_empty_n(src_rows_V_channel_empty_n);
    src_rows_V_channel_U->if_read(src_rows_V_channel_read);
    src_cols_V_channel_U = new FIFO_blur_src_cols_V_channel("src_cols_V_channel_U");
    src_cols_V_channel_U->clk(ap_clk);
    src_cols_V_channel_U->reset(ap_rst_n_inv);
    src_cols_V_channel_U->if_read_ce(src_cols_V_channel_U_ap_dummy_ce);
    src_cols_V_channel_U->if_write_ce(src_cols_V_channel_U_ap_dummy_ce);
    src_cols_V_channel_U->if_din(src_cols_V_channel_din);
    src_cols_V_channel_U->if_full_n(src_cols_V_channel_full_n);
    src_cols_V_channel_U->if_write(src_cols_V_channel_write);
    src_cols_V_channel_U->if_dout(src_cols_V_channel_dout);
    src_cols_V_channel_U->if_empty_n(src_cols_V_channel_empty_n);
    src_cols_V_channel_U->if_read(src_cols_V_channel_read);
    image_in_channel_U = new FIFO_blur_image_in_channel("image_in_channel_U");
    image_in_channel_U->clk(ap_clk);
    image_in_channel_U->reset(ap_rst_n_inv);
    image_in_channel_U->if_read_ce(image_in_channel_U_ap_dummy_ce);
    image_in_channel_U->if_write_ce(image_in_channel_U_ap_dummy_ce);
    image_in_channel_U->if_din(image_in_channel_din);
    image_in_channel_U->if_full_n(image_in_channel_full_n);
    image_in_channel_U->if_write(image_in_channel_write);
    image_in_channel_U->if_dout(image_in_channel_dout);
    image_in_channel_U->if_empty_n(image_in_channel_empty_n);
    image_in_channel_U->if_read(image_in_channel_read);
    image_out_channel_U = new FIFO_blur_image_out_channel("image_out_channel_U");
    image_out_channel_U->clk(ap_clk);
    image_out_channel_U->reset(ap_rst_n_inv);
    image_out_channel_U->if_read_ce(image_out_channel_U_ap_dummy_ce);
    image_out_channel_U->if_write_ce(image_out_channel_U_ap_dummy_ce);
    image_out_channel_U->if_din(image_out_channel_din);
    image_out_channel_U->if_full_n(image_out_channel_full_n);
    image_out_channel_U->if_write(image_out_channel_write);
    image_out_channel_U->if_dout(image_out_channel_dout);
    image_out_channel_U->if_empty_n(image_out_channel_empty_n);
    image_out_channel_U->if_read(image_out_channel_read);
    src_data_stream_0_V_U = new FIFO_blur_src_data_stream_0_V("src_data_stream_0_V_U");
    src_data_stream_0_V_U->clk(ap_clk);
    src_data_stream_0_V_U->reset(ap_rst_n_inv);
    src_data_stream_0_V_U->if_read_ce(src_data_stream_0_V_U_ap_dummy_ce);
    src_data_stream_0_V_U->if_write_ce(src_data_stream_0_V_U_ap_dummy_ce);
    src_data_stream_0_V_U->if_din(src_data_stream_0_V_din);
    src_data_stream_0_V_U->if_full_n(src_data_stream_0_V_full_n);
    src_data_stream_0_V_U->if_write(src_data_stream_0_V_write);
    src_data_stream_0_V_U->if_dout(src_data_stream_0_V_dout);
    src_data_stream_0_V_U->if_empty_n(src_data_stream_0_V_empty_n);
    src_data_stream_0_V_U->if_read(src_data_stream_0_V_read);
    src_rows_V_channel38_U = new FIFO_blur_src_rows_V_channel38("src_rows_V_channel38_U");
    src_rows_V_channel38_U->clk(ap_clk);
    src_rows_V_channel38_U->reset(ap_rst_n_inv);
    src_rows_V_channel38_U->if_read_ce(src_rows_V_channel38_U_ap_dummy_ce);
    src_rows_V_channel38_U->if_write_ce(src_rows_V_channel38_U_ap_dummy_ce);
    src_rows_V_channel38_U->if_din(src_rows_V_channel38_din);
    src_rows_V_channel38_U->if_full_n(src_rows_V_channel38_full_n);
    src_rows_V_channel38_U->if_write(src_rows_V_channel38_write);
    src_rows_V_channel38_U->if_dout(src_rows_V_channel38_dout);
    src_rows_V_channel38_U->if_empty_n(src_rows_V_channel38_empty_n);
    src_rows_V_channel38_U->if_read(src_rows_V_channel38_read);
    src_cols_V_channel39_U = new FIFO_blur_src_cols_V_channel39("src_cols_V_channel39_U");
    src_cols_V_channel39_U->clk(ap_clk);
    src_cols_V_channel39_U->reset(ap_rst_n_inv);
    src_cols_V_channel39_U->if_read_ce(src_cols_V_channel39_U_ap_dummy_ce);
    src_cols_V_channel39_U->if_write_ce(src_cols_V_channel39_U_ap_dummy_ce);
    src_cols_V_channel39_U->if_din(src_cols_V_channel39_din);
    src_cols_V_channel39_U->if_full_n(src_cols_V_channel39_full_n);
    src_cols_V_channel39_U->if_write(src_cols_V_channel39_write);
    src_cols_V_channel39_U->if_dout(src_cols_V_channel39_dout);
    src_cols_V_channel39_U->if_empty_n(src_cols_V_channel39_empty_n);
    src_cols_V_channel39_U->if_read(src_cols_V_channel39_read);
    kernel_val_0_0_channel_U = new FIFO_blur_kernel_val_0_0_channel("kernel_val_0_0_channel_U");
    kernel_val_0_0_channel_U->clk(ap_clk);
    kernel_val_0_0_channel_U->reset(ap_rst_n_inv);
    kernel_val_0_0_channel_U->if_read_ce(kernel_val_0_0_channel_U_ap_dummy_ce);
    kernel_val_0_0_channel_U->if_write_ce(kernel_val_0_0_channel_U_ap_dummy_ce);
    kernel_val_0_0_channel_U->if_din(kernel_val_0_0_channel_din);
    kernel_val_0_0_channel_U->if_full_n(kernel_val_0_0_channel_full_n);
    kernel_val_0_0_channel_U->if_write(kernel_val_0_0_channel_write);
    kernel_val_0_0_channel_U->if_dout(kernel_val_0_0_channel_dout);
    kernel_val_0_0_channel_U->if_empty_n(kernel_val_0_0_channel_empty_n);
    kernel_val_0_0_channel_U->if_read(kernel_val_0_0_channel_read);
    kernel_val_0_1_channel_U = new FIFO_blur_kernel_val_0_1_channel("kernel_val_0_1_channel_U");
    kernel_val_0_1_channel_U->clk(ap_clk);
    kernel_val_0_1_channel_U->reset(ap_rst_n_inv);
    kernel_val_0_1_channel_U->if_read_ce(kernel_val_0_1_channel_U_ap_dummy_ce);
    kernel_val_0_1_channel_U->if_write_ce(kernel_val_0_1_channel_U_ap_dummy_ce);
    kernel_val_0_1_channel_U->if_din(kernel_val_0_1_channel_din);
    kernel_val_0_1_channel_U->if_full_n(kernel_val_0_1_channel_full_n);
    kernel_val_0_1_channel_U->if_write(kernel_val_0_1_channel_write);
    kernel_val_0_1_channel_U->if_dout(kernel_val_0_1_channel_dout);
    kernel_val_0_1_channel_U->if_empty_n(kernel_val_0_1_channel_empty_n);
    kernel_val_0_1_channel_U->if_read(kernel_val_0_1_channel_read);
    kernel_val_0_2_channel_U = new FIFO_blur_kernel_val_0_2_channel("kernel_val_0_2_channel_U");
    kernel_val_0_2_channel_U->clk(ap_clk);
    kernel_val_0_2_channel_U->reset(ap_rst_n_inv);
    kernel_val_0_2_channel_U->if_read_ce(kernel_val_0_2_channel_U_ap_dummy_ce);
    kernel_val_0_2_channel_U->if_write_ce(kernel_val_0_2_channel_U_ap_dummy_ce);
    kernel_val_0_2_channel_U->if_din(kernel_val_0_2_channel_din);
    kernel_val_0_2_channel_U->if_full_n(kernel_val_0_2_channel_full_n);
    kernel_val_0_2_channel_U->if_write(kernel_val_0_2_channel_write);
    kernel_val_0_2_channel_U->if_dout(kernel_val_0_2_channel_dout);
    kernel_val_0_2_channel_U->if_empty_n(kernel_val_0_2_channel_empty_n);
    kernel_val_0_2_channel_U->if_read(kernel_val_0_2_channel_read);
    kernel_val_1_0_channel_U = new FIFO_blur_kernel_val_1_0_channel("kernel_val_1_0_channel_U");
    kernel_val_1_0_channel_U->clk(ap_clk);
    kernel_val_1_0_channel_U->reset(ap_rst_n_inv);
    kernel_val_1_0_channel_U->if_read_ce(kernel_val_1_0_channel_U_ap_dummy_ce);
    kernel_val_1_0_channel_U->if_write_ce(kernel_val_1_0_channel_U_ap_dummy_ce);
    kernel_val_1_0_channel_U->if_din(kernel_val_1_0_channel_din);
    kernel_val_1_0_channel_U->if_full_n(kernel_val_1_0_channel_full_n);
    kernel_val_1_0_channel_U->if_write(kernel_val_1_0_channel_write);
    kernel_val_1_0_channel_U->if_dout(kernel_val_1_0_channel_dout);
    kernel_val_1_0_channel_U->if_empty_n(kernel_val_1_0_channel_empty_n);
    kernel_val_1_0_channel_U->if_read(kernel_val_1_0_channel_read);
    kernel_val_1_1_channel_U = new FIFO_blur_kernel_val_1_1_channel("kernel_val_1_1_channel_U");
    kernel_val_1_1_channel_U->clk(ap_clk);
    kernel_val_1_1_channel_U->reset(ap_rst_n_inv);
    kernel_val_1_1_channel_U->if_read_ce(kernel_val_1_1_channel_U_ap_dummy_ce);
    kernel_val_1_1_channel_U->if_write_ce(kernel_val_1_1_channel_U_ap_dummy_ce);
    kernel_val_1_1_channel_U->if_din(kernel_val_1_1_channel_din);
    kernel_val_1_1_channel_U->if_full_n(kernel_val_1_1_channel_full_n);
    kernel_val_1_1_channel_U->if_write(kernel_val_1_1_channel_write);
    kernel_val_1_1_channel_U->if_dout(kernel_val_1_1_channel_dout);
    kernel_val_1_1_channel_U->if_empty_n(kernel_val_1_1_channel_empty_n);
    kernel_val_1_1_channel_U->if_read(kernel_val_1_1_channel_read);
    kernel_val_1_2_channel_U = new FIFO_blur_kernel_val_1_2_channel("kernel_val_1_2_channel_U");
    kernel_val_1_2_channel_U->clk(ap_clk);
    kernel_val_1_2_channel_U->reset(ap_rst_n_inv);
    kernel_val_1_2_channel_U->if_read_ce(kernel_val_1_2_channel_U_ap_dummy_ce);
    kernel_val_1_2_channel_U->if_write_ce(kernel_val_1_2_channel_U_ap_dummy_ce);
    kernel_val_1_2_channel_U->if_din(kernel_val_1_2_channel_din);
    kernel_val_1_2_channel_U->if_full_n(kernel_val_1_2_channel_full_n);
    kernel_val_1_2_channel_U->if_write(kernel_val_1_2_channel_write);
    kernel_val_1_2_channel_U->if_dout(kernel_val_1_2_channel_dout);
    kernel_val_1_2_channel_U->if_empty_n(kernel_val_1_2_channel_empty_n);
    kernel_val_1_2_channel_U->if_read(kernel_val_1_2_channel_read);
    kernel_val_2_0_channel_U = new FIFO_blur_kernel_val_2_0_channel("kernel_val_2_0_channel_U");
    kernel_val_2_0_channel_U->clk(ap_clk);
    kernel_val_2_0_channel_U->reset(ap_rst_n_inv);
    kernel_val_2_0_channel_U->if_read_ce(kernel_val_2_0_channel_U_ap_dummy_ce);
    kernel_val_2_0_channel_U->if_write_ce(kernel_val_2_0_channel_U_ap_dummy_ce);
    kernel_val_2_0_channel_U->if_din(kernel_val_2_0_channel_din);
    kernel_val_2_0_channel_U->if_full_n(kernel_val_2_0_channel_full_n);
    kernel_val_2_0_channel_U->if_write(kernel_val_2_0_channel_write);
    kernel_val_2_0_channel_U->if_dout(kernel_val_2_0_channel_dout);
    kernel_val_2_0_channel_U->if_empty_n(kernel_val_2_0_channel_empty_n);
    kernel_val_2_0_channel_U->if_read(kernel_val_2_0_channel_read);
    kernel_val_2_1_channel_U = new FIFO_blur_kernel_val_2_1_channel("kernel_val_2_1_channel_U");
    kernel_val_2_1_channel_U->clk(ap_clk);
    kernel_val_2_1_channel_U->reset(ap_rst_n_inv);
    kernel_val_2_1_channel_U->if_read_ce(kernel_val_2_1_channel_U_ap_dummy_ce);
    kernel_val_2_1_channel_U->if_write_ce(kernel_val_2_1_channel_U_ap_dummy_ce);
    kernel_val_2_1_channel_U->if_din(kernel_val_2_1_channel_din);
    kernel_val_2_1_channel_U->if_full_n(kernel_val_2_1_channel_full_n);
    kernel_val_2_1_channel_U->if_write(kernel_val_2_1_channel_write);
    kernel_val_2_1_channel_U->if_dout(kernel_val_2_1_channel_dout);
    kernel_val_2_1_channel_U->if_empty_n(kernel_val_2_1_channel_empty_n);
    kernel_val_2_1_channel_U->if_read(kernel_val_2_1_channel_read);
    kernel_val_2_2_channel_U = new FIFO_blur_kernel_val_2_2_channel("kernel_val_2_2_channel_U");
    kernel_val_2_2_channel_U->clk(ap_clk);
    kernel_val_2_2_channel_U->reset(ap_rst_n_inv);
    kernel_val_2_2_channel_U->if_read_ce(kernel_val_2_2_channel_U_ap_dummy_ce);
    kernel_val_2_2_channel_U->if_write_ce(kernel_val_2_2_channel_U_ap_dummy_ce);
    kernel_val_2_2_channel_U->if_din(kernel_val_2_2_channel_din);
    kernel_val_2_2_channel_U->if_full_n(kernel_val_2_2_channel_full_n);
    kernel_val_2_2_channel_U->if_write(kernel_val_2_2_channel_write);
    kernel_val_2_2_channel_U->if_dout(kernel_val_2_2_channel_dout);
    kernel_val_2_2_channel_U->if_empty_n(kernel_val_2_2_channel_empty_n);
    kernel_val_2_2_channel_U->if_read(kernel_val_2_2_channel_read);
    dst_data_stream_0_V_U = new FIFO_blur_dst_data_stream_0_V("dst_data_stream_0_V_U");
    dst_data_stream_0_V_U->clk(ap_clk);
    dst_data_stream_0_V_U->reset(ap_rst_n_inv);
    dst_data_stream_0_V_U->if_read_ce(dst_data_stream_0_V_U_ap_dummy_ce);
    dst_data_stream_0_V_U->if_write_ce(dst_data_stream_0_V_U_ap_dummy_ce);
    dst_data_stream_0_V_U->if_din(dst_data_stream_0_V_din);
    dst_data_stream_0_V_U->if_full_n(dst_data_stream_0_V_full_n);
    dst_data_stream_0_V_U->if_write(dst_data_stream_0_V_write);
    dst_data_stream_0_V_U->if_dout(dst_data_stream_0_V_dout);
    dst_data_stream_0_V_U->if_empty_n(dst_data_stream_0_V_empty_n);
    dst_data_stream_0_V_U->if_read(dst_data_stream_0_V_read);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_CRTL_BUS_ARADDR);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARADDR );

    SC_METHOD(thread_CRTL_BUS_ARBURST);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARBURST );

    SC_METHOD(thread_CRTL_BUS_ARCACHE);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARCACHE );

    SC_METHOD(thread_CRTL_BUS_ARID);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARID );

    SC_METHOD(thread_CRTL_BUS_ARLEN);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARLEN );

    SC_METHOD(thread_CRTL_BUS_ARLOCK);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARLOCK );

    SC_METHOD(thread_CRTL_BUS_ARPROT);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARPROT );

    SC_METHOD(thread_CRTL_BUS_ARQOS);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARQOS );

    SC_METHOD(thread_CRTL_BUS_ARREGION);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARREGION );

    SC_METHOD(thread_CRTL_BUS_ARSIZE);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARSIZE );

    SC_METHOD(thread_CRTL_BUS_ARUSER);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARUSER );

    SC_METHOD(thread_CRTL_BUS_ARVALID);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_ARVALID );

    SC_METHOD(thread_CRTL_BUS_AWADDR);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWADDR );

    SC_METHOD(thread_CRTL_BUS_AWBURST);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWBURST );

    SC_METHOD(thread_CRTL_BUS_AWCACHE);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWCACHE );

    SC_METHOD(thread_CRTL_BUS_AWID);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWID );

    SC_METHOD(thread_CRTL_BUS_AWLEN);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWLEN );

    SC_METHOD(thread_CRTL_BUS_AWLOCK);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWLOCK );

    SC_METHOD(thread_CRTL_BUS_AWPROT);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWPROT );

    SC_METHOD(thread_CRTL_BUS_AWQOS);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWQOS );

    SC_METHOD(thread_CRTL_BUS_AWREGION);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWREGION );

    SC_METHOD(thread_CRTL_BUS_AWSIZE);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWSIZE );

    SC_METHOD(thread_CRTL_BUS_AWUSER);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWUSER );

    SC_METHOD(thread_CRTL_BUS_AWVALID);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_AWVALID );

    SC_METHOD(thread_CRTL_BUS_BREADY);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_BREADY );

    SC_METHOD(thread_CRTL_BUS_RREADY);
    sensitive << ( blur_AXIM2Mat_U0_m_axi_fb_RREADY );

    SC_METHOD(thread_CRTL_BUS_WDATA);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WDATA );

    SC_METHOD(thread_CRTL_BUS_WID);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WID );

    SC_METHOD(thread_CRTL_BUS_WLAST);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WLAST );

    SC_METHOD(thread_CRTL_BUS_WSTRB);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WSTRB );

    SC_METHOD(thread_CRTL_BUS_WUSER);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WUSER );

    SC_METHOD(thread_CRTL_BUS_WVALID);
    sensitive << ( blur_Mat2AXIM_U0_m_axi_fb_WVALID );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_0_0_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_0_1_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_0_2_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_1_0_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_1_1_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_1_2_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_2_0_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_2_1_channel_full_n );

    SC_METHOD(thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel);
    sensitive << ( blur_Loop_1_proc_U0_ap_done );
    sensitive << ( ap_reg_ready_kernel_val_2_2_channel_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_hs_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( blur_Block_proc9_U0_ap_idle );
    sensitive << ( blur_AXIM2Mat_U0_ap_idle );
    sensitive << ( blur_Loop_1_proc_U0_ap_idle );
    sensitive << ( blur_Filter2D_U0_ap_idle );
    sensitive << ( blur_Mat2AXIM_U0_ap_idle );
    sensitive << ( kernel_val_0_0_channel_empty_n );
    sensitive << ( kernel_val_0_1_channel_empty_n );
    sensitive << ( kernel_val_0_2_channel_empty_n );
    sensitive << ( kernel_val_1_0_channel_empty_n );
    sensitive << ( kernel_val_1_1_channel_empty_n );
    sensitive << ( kernel_val_1_2_channel_empty_n );
    sensitive << ( kernel_val_2_0_channel_empty_n );
    sensitive << ( kernel_val_2_1_channel_empty_n );
    sensitive << ( kernel_val_2_2_channel_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_top_allready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( blur_Mat2AXIM_U0_ap_done );

    SC_METHOD(thread_ap_sig_ready_blur_AXIM2Mat_U0_ap_ready);
    sensitive << ( blur_AXIM2Mat_U0_ap_ready );
    sensitive << ( ap_reg_ready_blur_AXIM2Mat_U0_ap_ready );

    SC_METHOD(thread_ap_sig_ready_blur_Block_proc9_U0_ap_ready);
    sensitive << ( blur_Block_proc9_U0_ap_ready );
    sensitive << ( ap_reg_ready_blur_Block_proc9_U0_ap_ready );

    SC_METHOD(thread_ap_sig_ready_kernel_val_0_0_channel_full_n);
    sensitive << ( kernel_val_0_0_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_0_0_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_0_1_channel_full_n);
    sensitive << ( kernel_val_0_1_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_0_1_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_0_2_channel_full_n);
    sensitive << ( kernel_val_0_2_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_0_2_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_1_0_channel_full_n);
    sensitive << ( kernel_val_1_0_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_1_0_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_1_1_channel_full_n);
    sensitive << ( kernel_val_1_1_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_1_1_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_1_2_channel_full_n);
    sensitive << ( kernel_val_1_2_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_1_2_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_2_0_channel_full_n);
    sensitive << ( kernel_val_2_0_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_2_0_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_2_1_channel_full_n);
    sensitive << ( kernel_val_2_1_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_2_1_channel_full_n );

    SC_METHOD(thread_ap_sig_ready_kernel_val_2_2_channel_full_n);
    sensitive << ( kernel_val_2_2_channel_full_n );
    sensitive << ( ap_reg_ready_kernel_val_2_2_channel_full_n );

    SC_METHOD(thread_ap_sig_start_in_blur_AXIM2Mat_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_blur_AXIM2Mat_U0_ap_ready );

    SC_METHOD(thread_ap_sig_start_in_blur_Block_proc9_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_reg_ready_blur_Block_proc9_U0_ap_ready );

    SC_METHOD(thread_ap_sig_top_allready);
    sensitive << ( ap_sig_ready_blur_Block_proc9_U0_ap_ready );
    sensitive << ( ap_sig_ready_blur_AXIM2Mat_U0_ap_ready );

    SC_METHOD(thread_blur_AXILiteS_s_axi_U_ap_dummy_ce);

    SC_METHOD(thread_blur_AXIM2Mat_U0_ap_continue);

    SC_METHOD(thread_blur_AXIM2Mat_U0_ap_start);
    sensitive << ( ap_sig_start_in_blur_AXIM2Mat_U0_ap_start );

    SC_METHOD(thread_blur_AXIM2Mat_U0_image_in_dout);
    sensitive << ( image_in_channel_dout );

    SC_METHOD(thread_blur_AXIM2Mat_U0_image_in_empty_n);
    sensitive << ( image_in_channel_empty_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_cols_V_dout);
    sensitive << ( src_cols_V_channel_dout );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_cols_V_empty_n);
    sensitive << ( src_cols_V_channel_empty_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_cols_V_out_full_n);
    sensitive << ( src_cols_V_channel39_full_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_data_stream_V_full_n);
    sensitive << ( src_data_stream_0_V_full_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_rows_V_dout);
    sensitive << ( src_rows_V_channel_dout );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_rows_V_empty_n);
    sensitive << ( src_rows_V_channel_empty_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_img_rows_V_out_full_n);
    sensitive << ( src_rows_V_channel38_full_n );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_ARREADY);
    sensitive << ( CRTL_BUS_ARREADY );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_AWREADY);

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_BID);

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_BRESP);

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_BUSER);

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_BVALID);

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RDATA);
    sensitive << ( CRTL_BUS_RDATA );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RID);
    sensitive << ( CRTL_BUS_RID );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RLAST);
    sensitive << ( CRTL_BUS_RLAST );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RRESP);
    sensitive << ( CRTL_BUS_RRESP );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RUSER);
    sensitive << ( CRTL_BUS_RUSER );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_RVALID);
    sensitive << ( CRTL_BUS_RVALID );

    SC_METHOD(thread_blur_AXIM2Mat_U0_m_axi_fb_WREADY);

    SC_METHOD(thread_blur_Block_proc9_U0_ap_continue);

    SC_METHOD(thread_blur_Block_proc9_U0_ap_start);
    sensitive << ( ap_sig_start_in_blur_Block_proc9_U0_ap_start );

    SC_METHOD(thread_blur_Block_proc9_U0_image_in);
    sensitive << ( image_in );

    SC_METHOD(thread_blur_Block_proc9_U0_image_in_out_full_n);
    sensitive << ( image_in_channel_full_n );

    SC_METHOD(thread_blur_Block_proc9_U0_image_out);
    sensitive << ( image_out );

    SC_METHOD(thread_blur_Block_proc9_U0_image_out_out_full_n);
    sensitive << ( image_out_channel_full_n );

    SC_METHOD(thread_blur_Block_proc9_U0_src_cols_V_out_full_n);
    sensitive << ( src_cols_V_channel_full_n );

    SC_METHOD(thread_blur_Block_proc9_U0_src_rows_V_out_full_n);
    sensitive << ( src_rows_V_channel_full_n );

    SC_METHOD(thread_blur_CRTL_BUS_m_axi_U_ap_dummy_ce);

    SC_METHOD(thread_blur_Filter2D_U0_ap_continue);

    SC_METHOD(thread_blur_Filter2D_U0_ap_start);
    sensitive << ( kernel_val_0_0_channel_empty_n );
    sensitive << ( kernel_val_0_1_channel_empty_n );
    sensitive << ( kernel_val_0_2_channel_empty_n );
    sensitive << ( kernel_val_1_0_channel_empty_n );
    sensitive << ( kernel_val_1_1_channel_empty_n );
    sensitive << ( kernel_val_1_2_channel_empty_n );
    sensitive << ( kernel_val_2_0_channel_empty_n );
    sensitive << ( kernel_val_2_1_channel_empty_n );
    sensitive << ( kernel_val_2_2_channel_empty_n );

    SC_METHOD(thread_blur_Filter2D_U0_p_dst_data_stream_V_full_n);
    sensitive << ( dst_data_stream_0_V_full_n );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_0_0_read);
    sensitive << ( kernel_val_0_0_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_0_1_read);
    sensitive << ( kernel_val_0_1_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_0_2_read);
    sensitive << ( kernel_val_0_2_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_1_0_read);
    sensitive << ( kernel_val_1_0_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_1_1_read);
    sensitive << ( kernel_val_1_1_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_1_2_read);
    sensitive << ( kernel_val_1_2_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_2_0_read);
    sensitive << ( kernel_val_2_0_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_2_1_read);
    sensitive << ( kernel_val_2_1_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_kernel_val_2_2_read);
    sensitive << ( kernel_val_2_2_channel_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_cols_V_dout);
    sensitive << ( src_cols_V_channel39_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_cols_V_empty_n);
    sensitive << ( src_cols_V_channel39_empty_n );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_data_stream_V_dout);
    sensitive << ( src_data_stream_0_V_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_data_stream_V_empty_n);
    sensitive << ( src_data_stream_0_V_empty_n );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_rows_V_dout);
    sensitive << ( src_rows_V_channel38_dout );

    SC_METHOD(thread_blur_Filter2D_U0_p_src_rows_V_empty_n);
    sensitive << ( src_rows_V_channel38_empty_n );

    SC_METHOD(thread_blur_Loop_1_proc_U0_ap_continue);
    sensitive << ( ap_sig_ready_kernel_val_0_1_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_0_0_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_0_2_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_1_0_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_1_1_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_1_2_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_2_0_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_2_1_channel_full_n );
    sensitive << ( ap_sig_ready_kernel_val_2_2_channel_full_n );

    SC_METHOD(thread_blur_Loop_1_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_blur_Mat2AXIM_U0_ap_continue);
    sensitive << ( ap_sig_hs_continue );

    SC_METHOD(thread_blur_Mat2AXIM_U0_image_out_dout);
    sensitive << ( image_out_channel_dout );

    SC_METHOD(thread_blur_Mat2AXIM_U0_image_out_empty_n);
    sensitive << ( image_out_channel_empty_n );

    SC_METHOD(thread_blur_Mat2AXIM_U0_img_data_stream_V_dout);
    sensitive << ( dst_data_stream_0_V_dout );

    SC_METHOD(thread_blur_Mat2AXIM_U0_img_data_stream_V_empty_n);
    sensitive << ( dst_data_stream_0_V_empty_n );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_ARREADY);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_AWREADY);
    sensitive << ( CRTL_BUS_AWREADY );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_BID);
    sensitive << ( CRTL_BUS_BID );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_BRESP);
    sensitive << ( CRTL_BUS_BRESP );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_BUSER);
    sensitive << ( CRTL_BUS_BUSER );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_BVALID);
    sensitive << ( CRTL_BUS_BVALID );

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RDATA);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RID);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RLAST);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RRESP);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RUSER);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_RVALID);

    SC_METHOD(thread_blur_Mat2AXIM_U0_m_axi_fb_WREADY);
    sensitive << ( CRTL_BUS_WREADY );

    SC_METHOD(thread_dst_data_stream_0_V_U_ap_dummy_ce);

    SC_METHOD(thread_dst_data_stream_0_V_din);
    sensitive << ( blur_Filter2D_U0_p_dst_data_stream_V_din );

    SC_METHOD(thread_dst_data_stream_0_V_read);
    sensitive << ( blur_Mat2AXIM_U0_img_data_stream_V_read );

    SC_METHOD(thread_dst_data_stream_0_V_write);
    sensitive << ( blur_Filter2D_U0_p_dst_data_stream_V_write );

    SC_METHOD(thread_image_in_channel_U_ap_dummy_ce);

    SC_METHOD(thread_image_in_channel_din);
    sensitive << ( blur_Block_proc9_U0_image_in_out_din );

    SC_METHOD(thread_image_in_channel_read);
    sensitive << ( blur_AXIM2Mat_U0_image_in_read );

    SC_METHOD(thread_image_in_channel_write);
    sensitive << ( blur_Block_proc9_U0_image_in_out_write );

    SC_METHOD(thread_image_out_channel_U_ap_dummy_ce);

    SC_METHOD(thread_image_out_channel_din);
    sensitive << ( blur_Block_proc9_U0_image_out_out_din );

    SC_METHOD(thread_image_out_channel_read);
    sensitive << ( blur_Mat2AXIM_U0_image_out_read );

    SC_METHOD(thread_image_out_channel_write);
    sensitive << ( blur_Block_proc9_U0_image_out_out_write );

    SC_METHOD(thread_kernel_val_0_0_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_0_0_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_0 );

    SC_METHOD(thread_kernel_val_0_0_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_0_0_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel );

    SC_METHOD(thread_kernel_val_0_1_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_0_1_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_1 );

    SC_METHOD(thread_kernel_val_0_1_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_0_1_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel );

    SC_METHOD(thread_kernel_val_0_2_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_0_2_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_2 );

    SC_METHOD(thread_kernel_val_0_2_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_0_2_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel );

    SC_METHOD(thread_kernel_val_1_0_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_1_0_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_3 );

    SC_METHOD(thread_kernel_val_1_0_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_1_0_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel );

    SC_METHOD(thread_kernel_val_1_1_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_1_1_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_4 );

    SC_METHOD(thread_kernel_val_1_1_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_1_1_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel );

    SC_METHOD(thread_kernel_val_1_2_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_1_2_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_5 );

    SC_METHOD(thread_kernel_val_1_2_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_1_2_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel );

    SC_METHOD(thread_kernel_val_2_0_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_2_0_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_6 );

    SC_METHOD(thread_kernel_val_2_0_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_2_0_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel );

    SC_METHOD(thread_kernel_val_2_1_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_2_1_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_7 );

    SC_METHOD(thread_kernel_val_2_1_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_2_1_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel );

    SC_METHOD(thread_kernel_val_2_2_channel_U_ap_dummy_ce);

    SC_METHOD(thread_kernel_val_2_2_channel_din);
    sensitive << ( blur_Loop_1_proc_U0_ap_return_8 );

    SC_METHOD(thread_kernel_val_2_2_channel_read);
    sensitive << ( blur_Filter2D_U0_ap_ready );

    SC_METHOD(thread_kernel_val_2_2_channel_write);
    sensitive << ( ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel );

    SC_METHOD(thread_src_cols_V_channel39_U_ap_dummy_ce);

    SC_METHOD(thread_src_cols_V_channel39_din);
    sensitive << ( blur_AXIM2Mat_U0_img_cols_V_out_din );

    SC_METHOD(thread_src_cols_V_channel39_read);
    sensitive << ( blur_Filter2D_U0_p_src_cols_V_read );

    SC_METHOD(thread_src_cols_V_channel39_write);
    sensitive << ( blur_AXIM2Mat_U0_img_cols_V_out_write );

    SC_METHOD(thread_src_cols_V_channel_U_ap_dummy_ce);

    SC_METHOD(thread_src_cols_V_channel_din);
    sensitive << ( blur_Block_proc9_U0_src_cols_V_out_din );

    SC_METHOD(thread_src_cols_V_channel_read);
    sensitive << ( blur_AXIM2Mat_U0_img_cols_V_read );

    SC_METHOD(thread_src_cols_V_channel_write);
    sensitive << ( blur_Block_proc9_U0_src_cols_V_out_write );

    SC_METHOD(thread_src_data_stream_0_V_U_ap_dummy_ce);

    SC_METHOD(thread_src_data_stream_0_V_din);
    sensitive << ( blur_AXIM2Mat_U0_img_data_stream_V_din );

    SC_METHOD(thread_src_data_stream_0_V_read);
    sensitive << ( blur_Filter2D_U0_p_src_data_stream_V_read );

    SC_METHOD(thread_src_data_stream_0_V_write);
    sensitive << ( blur_AXIM2Mat_U0_img_data_stream_V_write );

    SC_METHOD(thread_src_rows_V_channel38_U_ap_dummy_ce);

    SC_METHOD(thread_src_rows_V_channel38_din);
    sensitive << ( blur_AXIM2Mat_U0_img_rows_V_out_din );

    SC_METHOD(thread_src_rows_V_channel38_read);
    sensitive << ( blur_Filter2D_U0_p_src_rows_V_read );

    SC_METHOD(thread_src_rows_V_channel38_write);
    sensitive << ( blur_AXIM2Mat_U0_img_rows_V_out_write );

    SC_METHOD(thread_src_rows_V_channel_U_ap_dummy_ce);

    SC_METHOD(thread_src_rows_V_channel_din);
    sensitive << ( blur_Block_proc9_U0_src_rows_V_out_din );

    SC_METHOD(thread_src_rows_V_channel_read);
    sensitive << ( blur_AXIM2Mat_U0_img_rows_V_read );

    SC_METHOD(thread_src_rows_V_channel_write);
    sensitive << ( blur_Block_proc9_U0_src_rows_V_out_write );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_reg_ready_kernel_val_0_1_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_0_0_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_0_2_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_1_0_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_1_1_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_1_2_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_2_0_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_2_1_channel_full_n = SC_LOGIC_0;
    ap_reg_ready_kernel_val_2_2_channel_full_n = SC_LOGIC_0;
    blur_Mat2AXIM_U0_ap_start = SC_LOGIC_0;
    ap_reg_procdone_blur_Block_proc9_U0 = SC_LOGIC_0;
    ap_reg_procdone_blur_AXIM2Mat_U0 = SC_LOGIC_0;
    ap_reg_procdone_blur_Loop_1_proc_U0 = SC_LOGIC_0;
    ap_reg_procdone_blur_Filter2D_U0 = SC_LOGIC_0;
    ap_reg_procdone_blur_Mat2AXIM_U0 = SC_LOGIC_0;
    ap_reg_ready_blur_Block_proc9_U0_ap_ready = SC_LOGIC_0;
    ap_reg_ready_blur_AXIM2Mat_U0_ap_ready = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "blur_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWVALID, "(port)m_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWREADY, "(port)m_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWADDR, "(port)m_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWID, "(port)m_axi_CRTL_BUS_AWID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWLEN, "(port)m_axi_CRTL_BUS_AWLEN");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWSIZE, "(port)m_axi_CRTL_BUS_AWSIZE");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWBURST, "(port)m_axi_CRTL_BUS_AWBURST");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWLOCK, "(port)m_axi_CRTL_BUS_AWLOCK");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWCACHE, "(port)m_axi_CRTL_BUS_AWCACHE");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWPROT, "(port)m_axi_CRTL_BUS_AWPROT");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWQOS, "(port)m_axi_CRTL_BUS_AWQOS");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWREGION, "(port)m_axi_CRTL_BUS_AWREGION");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_AWUSER, "(port)m_axi_CRTL_BUS_AWUSER");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WVALID, "(port)m_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WREADY, "(port)m_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WDATA, "(port)m_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WSTRB, "(port)m_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WLAST, "(port)m_axi_CRTL_BUS_WLAST");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WID, "(port)m_axi_CRTL_BUS_WID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_WUSER, "(port)m_axi_CRTL_BUS_WUSER");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARVALID, "(port)m_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARREADY, "(port)m_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARADDR, "(port)m_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARID, "(port)m_axi_CRTL_BUS_ARID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARLEN, "(port)m_axi_CRTL_BUS_ARLEN");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARSIZE, "(port)m_axi_CRTL_BUS_ARSIZE");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARBURST, "(port)m_axi_CRTL_BUS_ARBURST");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARLOCK, "(port)m_axi_CRTL_BUS_ARLOCK");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARCACHE, "(port)m_axi_CRTL_BUS_ARCACHE");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARPROT, "(port)m_axi_CRTL_BUS_ARPROT");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARQOS, "(port)m_axi_CRTL_BUS_ARQOS");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARREGION, "(port)m_axi_CRTL_BUS_ARREGION");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_ARUSER, "(port)m_axi_CRTL_BUS_ARUSER");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RVALID, "(port)m_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RREADY, "(port)m_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RDATA, "(port)m_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RLAST, "(port)m_axi_CRTL_BUS_RLAST");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RID, "(port)m_axi_CRTL_BUS_RID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RUSER, "(port)m_axi_CRTL_BUS_RUSER");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_RRESP, "(port)m_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_BVALID, "(port)m_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_BREADY, "(port)m_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_BRESP, "(port)m_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_BID, "(port)m_axi_CRTL_BUS_BID");
    sc_trace(mVcdFile, m_axi_CRTL_BUS_BUSER, "(port)m_axi_CRTL_BUS_BUSER");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, blur_AXILiteS_s_axi_U_ap_dummy_ce, "blur_AXILiteS_s_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, image_in, "image_in");
    sc_trace(mVcdFile, image_out, "image_out");
    sc_trace(mVcdFile, CRTL_BUS_AWVALID, "CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, CRTL_BUS_AWREADY, "CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, CRTL_BUS_AWADDR, "CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, CRTL_BUS_AWID, "CRTL_BUS_AWID");
    sc_trace(mVcdFile, CRTL_BUS_AWLEN, "CRTL_BUS_AWLEN");
    sc_trace(mVcdFile, CRTL_BUS_AWSIZE, "CRTL_BUS_AWSIZE");
    sc_trace(mVcdFile, CRTL_BUS_AWBURST, "CRTL_BUS_AWBURST");
    sc_trace(mVcdFile, CRTL_BUS_AWLOCK, "CRTL_BUS_AWLOCK");
    sc_trace(mVcdFile, CRTL_BUS_AWCACHE, "CRTL_BUS_AWCACHE");
    sc_trace(mVcdFile, CRTL_BUS_AWPROT, "CRTL_BUS_AWPROT");
    sc_trace(mVcdFile, CRTL_BUS_AWQOS, "CRTL_BUS_AWQOS");
    sc_trace(mVcdFile, CRTL_BUS_AWREGION, "CRTL_BUS_AWREGION");
    sc_trace(mVcdFile, CRTL_BUS_AWUSER, "CRTL_BUS_AWUSER");
    sc_trace(mVcdFile, CRTL_BUS_WVALID, "CRTL_BUS_WVALID");
    sc_trace(mVcdFile, CRTL_BUS_WREADY, "CRTL_BUS_WREADY");
    sc_trace(mVcdFile, CRTL_BUS_WDATA, "CRTL_BUS_WDATA");
    sc_trace(mVcdFile, CRTL_BUS_WSTRB, "CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, CRTL_BUS_WLAST, "CRTL_BUS_WLAST");
    sc_trace(mVcdFile, CRTL_BUS_WID, "CRTL_BUS_WID");
    sc_trace(mVcdFile, CRTL_BUS_WUSER, "CRTL_BUS_WUSER");
    sc_trace(mVcdFile, CRTL_BUS_ARVALID, "CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, CRTL_BUS_ARREADY, "CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, CRTL_BUS_ARADDR, "CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, CRTL_BUS_ARID, "CRTL_BUS_ARID");
    sc_trace(mVcdFile, CRTL_BUS_ARLEN, "CRTL_BUS_ARLEN");
    sc_trace(mVcdFile, CRTL_BUS_ARSIZE, "CRTL_BUS_ARSIZE");
    sc_trace(mVcdFile, CRTL_BUS_ARBURST, "CRTL_BUS_ARBURST");
    sc_trace(mVcdFile, CRTL_BUS_ARLOCK, "CRTL_BUS_ARLOCK");
    sc_trace(mVcdFile, CRTL_BUS_ARCACHE, "CRTL_BUS_ARCACHE");
    sc_trace(mVcdFile, CRTL_BUS_ARPROT, "CRTL_BUS_ARPROT");
    sc_trace(mVcdFile, CRTL_BUS_ARQOS, "CRTL_BUS_ARQOS");
    sc_trace(mVcdFile, CRTL_BUS_ARREGION, "CRTL_BUS_ARREGION");
    sc_trace(mVcdFile, CRTL_BUS_ARUSER, "CRTL_BUS_ARUSER");
    sc_trace(mVcdFile, CRTL_BUS_RVALID, "CRTL_BUS_RVALID");
    sc_trace(mVcdFile, CRTL_BUS_RREADY, "CRTL_BUS_RREADY");
    sc_trace(mVcdFile, CRTL_BUS_RDATA, "CRTL_BUS_RDATA");
    sc_trace(mVcdFile, CRTL_BUS_RLAST, "CRTL_BUS_RLAST");
    sc_trace(mVcdFile, CRTL_BUS_RID, "CRTL_BUS_RID");
    sc_trace(mVcdFile, CRTL_BUS_RUSER, "CRTL_BUS_RUSER");
    sc_trace(mVcdFile, CRTL_BUS_RRESP, "CRTL_BUS_RRESP");
    sc_trace(mVcdFile, CRTL_BUS_BVALID, "CRTL_BUS_BVALID");
    sc_trace(mVcdFile, CRTL_BUS_BREADY, "CRTL_BUS_BREADY");
    sc_trace(mVcdFile, CRTL_BUS_BRESP, "CRTL_BUS_BRESP");
    sc_trace(mVcdFile, CRTL_BUS_BID, "CRTL_BUS_BID");
    sc_trace(mVcdFile, CRTL_BUS_BUSER, "CRTL_BUS_BUSER");
    sc_trace(mVcdFile, blur_CRTL_BUS_m_axi_U_ap_dummy_ce, "blur_CRTL_BUS_m_axi_U_ap_dummy_ce");
    sc_trace(mVcdFile, blur_Block_proc9_U0_ap_start, "blur_Block_proc9_U0_ap_start");
    sc_trace(mVcdFile, blur_Block_proc9_U0_ap_done, "blur_Block_proc9_U0_ap_done");
    sc_trace(mVcdFile, blur_Block_proc9_U0_ap_continue, "blur_Block_proc9_U0_ap_continue");
    sc_trace(mVcdFile, blur_Block_proc9_U0_ap_idle, "blur_Block_proc9_U0_ap_idle");
    sc_trace(mVcdFile, blur_Block_proc9_U0_ap_ready, "blur_Block_proc9_U0_ap_ready");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_rows_V_out_din, "blur_Block_proc9_U0_src_rows_V_out_din");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_rows_V_out_full_n, "blur_Block_proc9_U0_src_rows_V_out_full_n");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_rows_V_out_write, "blur_Block_proc9_U0_src_rows_V_out_write");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_cols_V_out_din, "blur_Block_proc9_U0_src_cols_V_out_din");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_cols_V_out_full_n, "blur_Block_proc9_U0_src_cols_V_out_full_n");
    sc_trace(mVcdFile, blur_Block_proc9_U0_src_cols_V_out_write, "blur_Block_proc9_U0_src_cols_V_out_write");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_in, "blur_Block_proc9_U0_image_in");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_out, "blur_Block_proc9_U0_image_out");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_in_out_din, "blur_Block_proc9_U0_image_in_out_din");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_in_out_full_n, "blur_Block_proc9_U0_image_in_out_full_n");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_in_out_write, "blur_Block_proc9_U0_image_in_out_write");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_out_out_din, "blur_Block_proc9_U0_image_out_out_din");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_out_out_full_n, "blur_Block_proc9_U0_image_out_out_full_n");
    sc_trace(mVcdFile, blur_Block_proc9_U0_image_out_out_write, "blur_Block_proc9_U0_image_out_out_write");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_ap_start, "blur_AXIM2Mat_U0_ap_start");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_ap_done, "blur_AXIM2Mat_U0_ap_done");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_ap_continue, "blur_AXIM2Mat_U0_ap_continue");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_ap_idle, "blur_AXIM2Mat_U0_ap_idle");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_ap_ready, "blur_AXIM2Mat_U0_ap_ready");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWVALID, "blur_AXIM2Mat_U0_m_axi_fb_AWVALID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWREADY, "blur_AXIM2Mat_U0_m_axi_fb_AWREADY");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWADDR, "blur_AXIM2Mat_U0_m_axi_fb_AWADDR");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWID, "blur_AXIM2Mat_U0_m_axi_fb_AWID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWLEN, "blur_AXIM2Mat_U0_m_axi_fb_AWLEN");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWSIZE, "blur_AXIM2Mat_U0_m_axi_fb_AWSIZE");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWBURST, "blur_AXIM2Mat_U0_m_axi_fb_AWBURST");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWLOCK, "blur_AXIM2Mat_U0_m_axi_fb_AWLOCK");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWCACHE, "blur_AXIM2Mat_U0_m_axi_fb_AWCACHE");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWPROT, "blur_AXIM2Mat_U0_m_axi_fb_AWPROT");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWQOS, "blur_AXIM2Mat_U0_m_axi_fb_AWQOS");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWREGION, "blur_AXIM2Mat_U0_m_axi_fb_AWREGION");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_AWUSER, "blur_AXIM2Mat_U0_m_axi_fb_AWUSER");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WVALID, "blur_AXIM2Mat_U0_m_axi_fb_WVALID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WREADY, "blur_AXIM2Mat_U0_m_axi_fb_WREADY");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WDATA, "blur_AXIM2Mat_U0_m_axi_fb_WDATA");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WSTRB, "blur_AXIM2Mat_U0_m_axi_fb_WSTRB");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WLAST, "blur_AXIM2Mat_U0_m_axi_fb_WLAST");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WID, "blur_AXIM2Mat_U0_m_axi_fb_WID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_WUSER, "blur_AXIM2Mat_U0_m_axi_fb_WUSER");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARVALID, "blur_AXIM2Mat_U0_m_axi_fb_ARVALID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARREADY, "blur_AXIM2Mat_U0_m_axi_fb_ARREADY");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARADDR, "blur_AXIM2Mat_U0_m_axi_fb_ARADDR");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARID, "blur_AXIM2Mat_U0_m_axi_fb_ARID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARLEN, "blur_AXIM2Mat_U0_m_axi_fb_ARLEN");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARSIZE, "blur_AXIM2Mat_U0_m_axi_fb_ARSIZE");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARBURST, "blur_AXIM2Mat_U0_m_axi_fb_ARBURST");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARLOCK, "blur_AXIM2Mat_U0_m_axi_fb_ARLOCK");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARCACHE, "blur_AXIM2Mat_U0_m_axi_fb_ARCACHE");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARPROT, "blur_AXIM2Mat_U0_m_axi_fb_ARPROT");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARQOS, "blur_AXIM2Mat_U0_m_axi_fb_ARQOS");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARREGION, "blur_AXIM2Mat_U0_m_axi_fb_ARREGION");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_ARUSER, "blur_AXIM2Mat_U0_m_axi_fb_ARUSER");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RVALID, "blur_AXIM2Mat_U0_m_axi_fb_RVALID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RREADY, "blur_AXIM2Mat_U0_m_axi_fb_RREADY");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RDATA, "blur_AXIM2Mat_U0_m_axi_fb_RDATA");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RLAST, "blur_AXIM2Mat_U0_m_axi_fb_RLAST");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RID, "blur_AXIM2Mat_U0_m_axi_fb_RID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RUSER, "blur_AXIM2Mat_U0_m_axi_fb_RUSER");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_RRESP, "blur_AXIM2Mat_U0_m_axi_fb_RRESP");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_BVALID, "blur_AXIM2Mat_U0_m_axi_fb_BVALID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_BREADY, "blur_AXIM2Mat_U0_m_axi_fb_BREADY");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_BRESP, "blur_AXIM2Mat_U0_m_axi_fb_BRESP");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_BID, "blur_AXIM2Mat_U0_m_axi_fb_BID");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_m_axi_fb_BUSER, "blur_AXIM2Mat_U0_m_axi_fb_BUSER");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_image_in_dout, "blur_AXIM2Mat_U0_image_in_dout");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_image_in_empty_n, "blur_AXIM2Mat_U0_image_in_empty_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_image_in_read, "blur_AXIM2Mat_U0_image_in_read");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_dout, "blur_AXIM2Mat_U0_img_rows_V_dout");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_empty_n, "blur_AXIM2Mat_U0_img_rows_V_empty_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_read, "blur_AXIM2Mat_U0_img_rows_V_read");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_dout, "blur_AXIM2Mat_U0_img_cols_V_dout");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_empty_n, "blur_AXIM2Mat_U0_img_cols_V_empty_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_read, "blur_AXIM2Mat_U0_img_cols_V_read");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_data_stream_V_din, "blur_AXIM2Mat_U0_img_data_stream_V_din");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_data_stream_V_full_n, "blur_AXIM2Mat_U0_img_data_stream_V_full_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_data_stream_V_write, "blur_AXIM2Mat_U0_img_data_stream_V_write");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_out_din, "blur_AXIM2Mat_U0_img_rows_V_out_din");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_out_full_n, "blur_AXIM2Mat_U0_img_rows_V_out_full_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_rows_V_out_write, "blur_AXIM2Mat_U0_img_rows_V_out_write");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_out_din, "blur_AXIM2Mat_U0_img_cols_V_out_din");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_out_full_n, "blur_AXIM2Mat_U0_img_cols_V_out_full_n");
    sc_trace(mVcdFile, blur_AXIM2Mat_U0_img_cols_V_out_write, "blur_AXIM2Mat_U0_img_cols_V_out_write");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_start, "blur_Loop_1_proc_U0_ap_start");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_done, "blur_Loop_1_proc_U0_ap_done");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_continue, "blur_Loop_1_proc_U0_ap_continue");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_idle, "blur_Loop_1_proc_U0_ap_idle");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_ready, "blur_Loop_1_proc_U0_ap_ready");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_0, "blur_Loop_1_proc_U0_ap_return_0");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_1, "blur_Loop_1_proc_U0_ap_return_1");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_2, "blur_Loop_1_proc_U0_ap_return_2");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_3, "blur_Loop_1_proc_U0_ap_return_3");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_4, "blur_Loop_1_proc_U0_ap_return_4");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_5, "blur_Loop_1_proc_U0_ap_return_5");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_6, "blur_Loop_1_proc_U0_ap_return_6");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_7, "blur_Loop_1_proc_U0_ap_return_7");
    sc_trace(mVcdFile, blur_Loop_1_proc_U0_ap_return_8, "blur_Loop_1_proc_U0_ap_return_8");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel");
    sc_trace(mVcdFile, kernel_val_0_1_channel_full_n, "kernel_val_0_1_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_0_1_channel_full_n, "ap_reg_ready_kernel_val_0_1_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_0_1_channel_full_n, "ap_sig_ready_kernel_val_0_1_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel");
    sc_trace(mVcdFile, kernel_val_0_0_channel_full_n, "kernel_val_0_0_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_0_0_channel_full_n, "ap_reg_ready_kernel_val_0_0_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_0_0_channel_full_n, "ap_sig_ready_kernel_val_0_0_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel");
    sc_trace(mVcdFile, kernel_val_0_2_channel_full_n, "kernel_val_0_2_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_0_2_channel_full_n, "ap_reg_ready_kernel_val_0_2_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_0_2_channel_full_n, "ap_sig_ready_kernel_val_0_2_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel");
    sc_trace(mVcdFile, kernel_val_1_0_channel_full_n, "kernel_val_1_0_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_1_0_channel_full_n, "ap_reg_ready_kernel_val_1_0_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_1_0_channel_full_n, "ap_sig_ready_kernel_val_1_0_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel");
    sc_trace(mVcdFile, kernel_val_1_1_channel_full_n, "kernel_val_1_1_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_1_1_channel_full_n, "ap_reg_ready_kernel_val_1_1_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_1_1_channel_full_n, "ap_sig_ready_kernel_val_1_1_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel");
    sc_trace(mVcdFile, kernel_val_1_2_channel_full_n, "kernel_val_1_2_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_1_2_channel_full_n, "ap_reg_ready_kernel_val_1_2_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_1_2_channel_full_n, "ap_sig_ready_kernel_val_1_2_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel");
    sc_trace(mVcdFile, kernel_val_2_0_channel_full_n, "kernel_val_2_0_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_2_0_channel_full_n, "ap_reg_ready_kernel_val_2_0_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_2_0_channel_full_n, "ap_sig_ready_kernel_val_2_0_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel");
    sc_trace(mVcdFile, kernel_val_2_1_channel_full_n, "kernel_val_2_1_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_2_1_channel_full_n, "ap_reg_ready_kernel_val_2_1_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_2_1_channel_full_n, "ap_sig_ready_kernel_val_2_1_channel_full_n");
    sc_trace(mVcdFile, ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel, "ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel");
    sc_trace(mVcdFile, kernel_val_2_2_channel_full_n, "kernel_val_2_2_channel_full_n");
    sc_trace(mVcdFile, ap_reg_ready_kernel_val_2_2_channel_full_n, "ap_reg_ready_kernel_val_2_2_channel_full_n");
    sc_trace(mVcdFile, ap_sig_ready_kernel_val_2_2_channel_full_n, "ap_sig_ready_kernel_val_2_2_channel_full_n");
    sc_trace(mVcdFile, blur_Filter2D_U0_ap_start, "blur_Filter2D_U0_ap_start");
    sc_trace(mVcdFile, blur_Filter2D_U0_ap_done, "blur_Filter2D_U0_ap_done");
    sc_trace(mVcdFile, blur_Filter2D_U0_ap_continue, "blur_Filter2D_U0_ap_continue");
    sc_trace(mVcdFile, blur_Filter2D_U0_ap_idle, "blur_Filter2D_U0_ap_idle");
    sc_trace(mVcdFile, blur_Filter2D_U0_ap_ready, "blur_Filter2D_U0_ap_ready");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_rows_V_dout, "blur_Filter2D_U0_p_src_rows_V_dout");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_rows_V_empty_n, "blur_Filter2D_U0_p_src_rows_V_empty_n");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_rows_V_read, "blur_Filter2D_U0_p_src_rows_V_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_cols_V_dout, "blur_Filter2D_U0_p_src_cols_V_dout");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_cols_V_empty_n, "blur_Filter2D_U0_p_src_cols_V_empty_n");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_cols_V_read, "blur_Filter2D_U0_p_src_cols_V_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_data_stream_V_dout, "blur_Filter2D_U0_p_src_data_stream_V_dout");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_data_stream_V_empty_n, "blur_Filter2D_U0_p_src_data_stream_V_empty_n");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_src_data_stream_V_read, "blur_Filter2D_U0_p_src_data_stream_V_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_dst_data_stream_V_din, "blur_Filter2D_U0_p_dst_data_stream_V_din");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_dst_data_stream_V_full_n, "blur_Filter2D_U0_p_dst_data_stream_V_full_n");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_dst_data_stream_V_write, "blur_Filter2D_U0_p_dst_data_stream_V_write");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_0_0_read, "blur_Filter2D_U0_p_kernel_val_0_0_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_0_1_read, "blur_Filter2D_U0_p_kernel_val_0_1_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_0_2_read, "blur_Filter2D_U0_p_kernel_val_0_2_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_1_0_read, "blur_Filter2D_U0_p_kernel_val_1_0_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_1_1_read, "blur_Filter2D_U0_p_kernel_val_1_1_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_1_2_read, "blur_Filter2D_U0_p_kernel_val_1_2_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_2_0_read, "blur_Filter2D_U0_p_kernel_val_2_0_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_2_1_read, "blur_Filter2D_U0_p_kernel_val_2_1_read");
    sc_trace(mVcdFile, blur_Filter2D_U0_p_kernel_val_2_2_read, "blur_Filter2D_U0_p_kernel_val_2_2_read");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_ap_start, "blur_Mat2AXIM_U0_ap_start");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_ap_done, "blur_Mat2AXIM_U0_ap_done");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_ap_continue, "blur_Mat2AXIM_U0_ap_continue");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_ap_idle, "blur_Mat2AXIM_U0_ap_idle");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_ap_ready, "blur_Mat2AXIM_U0_ap_ready");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_img_data_stream_V_dout, "blur_Mat2AXIM_U0_img_data_stream_V_dout");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_img_data_stream_V_empty_n, "blur_Mat2AXIM_U0_img_data_stream_V_empty_n");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_img_data_stream_V_read, "blur_Mat2AXIM_U0_img_data_stream_V_read");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWVALID, "blur_Mat2AXIM_U0_m_axi_fb_AWVALID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWREADY, "blur_Mat2AXIM_U0_m_axi_fb_AWREADY");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWADDR, "blur_Mat2AXIM_U0_m_axi_fb_AWADDR");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWID, "blur_Mat2AXIM_U0_m_axi_fb_AWID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWLEN, "blur_Mat2AXIM_U0_m_axi_fb_AWLEN");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWSIZE, "blur_Mat2AXIM_U0_m_axi_fb_AWSIZE");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWBURST, "blur_Mat2AXIM_U0_m_axi_fb_AWBURST");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWLOCK, "blur_Mat2AXIM_U0_m_axi_fb_AWLOCK");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWCACHE, "blur_Mat2AXIM_U0_m_axi_fb_AWCACHE");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWPROT, "blur_Mat2AXIM_U0_m_axi_fb_AWPROT");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWQOS, "blur_Mat2AXIM_U0_m_axi_fb_AWQOS");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWREGION, "blur_Mat2AXIM_U0_m_axi_fb_AWREGION");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_AWUSER, "blur_Mat2AXIM_U0_m_axi_fb_AWUSER");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WVALID, "blur_Mat2AXIM_U0_m_axi_fb_WVALID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WREADY, "blur_Mat2AXIM_U0_m_axi_fb_WREADY");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WDATA, "blur_Mat2AXIM_U0_m_axi_fb_WDATA");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WSTRB, "blur_Mat2AXIM_U0_m_axi_fb_WSTRB");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WLAST, "blur_Mat2AXIM_U0_m_axi_fb_WLAST");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WID, "blur_Mat2AXIM_U0_m_axi_fb_WID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_WUSER, "blur_Mat2AXIM_U0_m_axi_fb_WUSER");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARVALID, "blur_Mat2AXIM_U0_m_axi_fb_ARVALID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARREADY, "blur_Mat2AXIM_U0_m_axi_fb_ARREADY");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARADDR, "blur_Mat2AXIM_U0_m_axi_fb_ARADDR");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARID, "blur_Mat2AXIM_U0_m_axi_fb_ARID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARLEN, "blur_Mat2AXIM_U0_m_axi_fb_ARLEN");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARSIZE, "blur_Mat2AXIM_U0_m_axi_fb_ARSIZE");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARBURST, "blur_Mat2AXIM_U0_m_axi_fb_ARBURST");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARLOCK, "blur_Mat2AXIM_U0_m_axi_fb_ARLOCK");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARCACHE, "blur_Mat2AXIM_U0_m_axi_fb_ARCACHE");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARPROT, "blur_Mat2AXIM_U0_m_axi_fb_ARPROT");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARQOS, "blur_Mat2AXIM_U0_m_axi_fb_ARQOS");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARREGION, "blur_Mat2AXIM_U0_m_axi_fb_ARREGION");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_ARUSER, "blur_Mat2AXIM_U0_m_axi_fb_ARUSER");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RVALID, "blur_Mat2AXIM_U0_m_axi_fb_RVALID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RREADY, "blur_Mat2AXIM_U0_m_axi_fb_RREADY");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RDATA, "blur_Mat2AXIM_U0_m_axi_fb_RDATA");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RLAST, "blur_Mat2AXIM_U0_m_axi_fb_RLAST");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RID, "blur_Mat2AXIM_U0_m_axi_fb_RID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RUSER, "blur_Mat2AXIM_U0_m_axi_fb_RUSER");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_RRESP, "blur_Mat2AXIM_U0_m_axi_fb_RRESP");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_BVALID, "blur_Mat2AXIM_U0_m_axi_fb_BVALID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_BREADY, "blur_Mat2AXIM_U0_m_axi_fb_BREADY");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_BRESP, "blur_Mat2AXIM_U0_m_axi_fb_BRESP");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_BID, "blur_Mat2AXIM_U0_m_axi_fb_BID");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_m_axi_fb_BUSER, "blur_Mat2AXIM_U0_m_axi_fb_BUSER");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_image_out_dout, "blur_Mat2AXIM_U0_image_out_dout");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_image_out_empty_n, "blur_Mat2AXIM_U0_image_out_empty_n");
    sc_trace(mVcdFile, blur_Mat2AXIM_U0_image_out_read, "blur_Mat2AXIM_U0_image_out_read");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, src_rows_V_channel_U_ap_dummy_ce, "src_rows_V_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, src_rows_V_channel_din, "src_rows_V_channel_din");
    sc_trace(mVcdFile, src_rows_V_channel_full_n, "src_rows_V_channel_full_n");
    sc_trace(mVcdFile, src_rows_V_channel_write, "src_rows_V_channel_write");
    sc_trace(mVcdFile, src_rows_V_channel_dout, "src_rows_V_channel_dout");
    sc_trace(mVcdFile, src_rows_V_channel_empty_n, "src_rows_V_channel_empty_n");
    sc_trace(mVcdFile, src_rows_V_channel_read, "src_rows_V_channel_read");
    sc_trace(mVcdFile, src_cols_V_channel_U_ap_dummy_ce, "src_cols_V_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, src_cols_V_channel_din, "src_cols_V_channel_din");
    sc_trace(mVcdFile, src_cols_V_channel_full_n, "src_cols_V_channel_full_n");
    sc_trace(mVcdFile, src_cols_V_channel_write, "src_cols_V_channel_write");
    sc_trace(mVcdFile, src_cols_V_channel_dout, "src_cols_V_channel_dout");
    sc_trace(mVcdFile, src_cols_V_channel_empty_n, "src_cols_V_channel_empty_n");
    sc_trace(mVcdFile, src_cols_V_channel_read, "src_cols_V_channel_read");
    sc_trace(mVcdFile, image_in_channel_U_ap_dummy_ce, "image_in_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, image_in_channel_din, "image_in_channel_din");
    sc_trace(mVcdFile, image_in_channel_full_n, "image_in_channel_full_n");
    sc_trace(mVcdFile, image_in_channel_write, "image_in_channel_write");
    sc_trace(mVcdFile, image_in_channel_dout, "image_in_channel_dout");
    sc_trace(mVcdFile, image_in_channel_empty_n, "image_in_channel_empty_n");
    sc_trace(mVcdFile, image_in_channel_read, "image_in_channel_read");
    sc_trace(mVcdFile, image_out_channel_U_ap_dummy_ce, "image_out_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, image_out_channel_din, "image_out_channel_din");
    sc_trace(mVcdFile, image_out_channel_full_n, "image_out_channel_full_n");
    sc_trace(mVcdFile, image_out_channel_write, "image_out_channel_write");
    sc_trace(mVcdFile, image_out_channel_dout, "image_out_channel_dout");
    sc_trace(mVcdFile, image_out_channel_empty_n, "image_out_channel_empty_n");
    sc_trace(mVcdFile, image_out_channel_read, "image_out_channel_read");
    sc_trace(mVcdFile, src_data_stream_0_V_U_ap_dummy_ce, "src_data_stream_0_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, src_data_stream_0_V_din, "src_data_stream_0_V_din");
    sc_trace(mVcdFile, src_data_stream_0_V_full_n, "src_data_stream_0_V_full_n");
    sc_trace(mVcdFile, src_data_stream_0_V_write, "src_data_stream_0_V_write");
    sc_trace(mVcdFile, src_data_stream_0_V_dout, "src_data_stream_0_V_dout");
    sc_trace(mVcdFile, src_data_stream_0_V_empty_n, "src_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, src_data_stream_0_V_read, "src_data_stream_0_V_read");
    sc_trace(mVcdFile, src_rows_V_channel38_U_ap_dummy_ce, "src_rows_V_channel38_U_ap_dummy_ce");
    sc_trace(mVcdFile, src_rows_V_channel38_din, "src_rows_V_channel38_din");
    sc_trace(mVcdFile, src_rows_V_channel38_full_n, "src_rows_V_channel38_full_n");
    sc_trace(mVcdFile, src_rows_V_channel38_write, "src_rows_V_channel38_write");
    sc_trace(mVcdFile, src_rows_V_channel38_dout, "src_rows_V_channel38_dout");
    sc_trace(mVcdFile, src_rows_V_channel38_empty_n, "src_rows_V_channel38_empty_n");
    sc_trace(mVcdFile, src_rows_V_channel38_read, "src_rows_V_channel38_read");
    sc_trace(mVcdFile, src_cols_V_channel39_U_ap_dummy_ce, "src_cols_V_channel39_U_ap_dummy_ce");
    sc_trace(mVcdFile, src_cols_V_channel39_din, "src_cols_V_channel39_din");
    sc_trace(mVcdFile, src_cols_V_channel39_full_n, "src_cols_V_channel39_full_n");
    sc_trace(mVcdFile, src_cols_V_channel39_write, "src_cols_V_channel39_write");
    sc_trace(mVcdFile, src_cols_V_channel39_dout, "src_cols_V_channel39_dout");
    sc_trace(mVcdFile, src_cols_V_channel39_empty_n, "src_cols_V_channel39_empty_n");
    sc_trace(mVcdFile, src_cols_V_channel39_read, "src_cols_V_channel39_read");
    sc_trace(mVcdFile, kernel_val_0_0_channel_U_ap_dummy_ce, "kernel_val_0_0_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_0_0_channel_din, "kernel_val_0_0_channel_din");
    sc_trace(mVcdFile, kernel_val_0_0_channel_write, "kernel_val_0_0_channel_write");
    sc_trace(mVcdFile, kernel_val_0_0_channel_dout, "kernel_val_0_0_channel_dout");
    sc_trace(mVcdFile, kernel_val_0_0_channel_empty_n, "kernel_val_0_0_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_0_0_channel_read, "kernel_val_0_0_channel_read");
    sc_trace(mVcdFile, kernel_val_0_1_channel_U_ap_dummy_ce, "kernel_val_0_1_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_0_1_channel_din, "kernel_val_0_1_channel_din");
    sc_trace(mVcdFile, kernel_val_0_1_channel_write, "kernel_val_0_1_channel_write");
    sc_trace(mVcdFile, kernel_val_0_1_channel_dout, "kernel_val_0_1_channel_dout");
    sc_trace(mVcdFile, kernel_val_0_1_channel_empty_n, "kernel_val_0_1_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_0_1_channel_read, "kernel_val_0_1_channel_read");
    sc_trace(mVcdFile, kernel_val_0_2_channel_U_ap_dummy_ce, "kernel_val_0_2_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_0_2_channel_din, "kernel_val_0_2_channel_din");
    sc_trace(mVcdFile, kernel_val_0_2_channel_write, "kernel_val_0_2_channel_write");
    sc_trace(mVcdFile, kernel_val_0_2_channel_dout, "kernel_val_0_2_channel_dout");
    sc_trace(mVcdFile, kernel_val_0_2_channel_empty_n, "kernel_val_0_2_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_0_2_channel_read, "kernel_val_0_2_channel_read");
    sc_trace(mVcdFile, kernel_val_1_0_channel_U_ap_dummy_ce, "kernel_val_1_0_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_1_0_channel_din, "kernel_val_1_0_channel_din");
    sc_trace(mVcdFile, kernel_val_1_0_channel_write, "kernel_val_1_0_channel_write");
    sc_trace(mVcdFile, kernel_val_1_0_channel_dout, "kernel_val_1_0_channel_dout");
    sc_trace(mVcdFile, kernel_val_1_0_channel_empty_n, "kernel_val_1_0_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_1_0_channel_read, "kernel_val_1_0_channel_read");
    sc_trace(mVcdFile, kernel_val_1_1_channel_U_ap_dummy_ce, "kernel_val_1_1_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_1_1_channel_din, "kernel_val_1_1_channel_din");
    sc_trace(mVcdFile, kernel_val_1_1_channel_write, "kernel_val_1_1_channel_write");
    sc_trace(mVcdFile, kernel_val_1_1_channel_dout, "kernel_val_1_1_channel_dout");
    sc_trace(mVcdFile, kernel_val_1_1_channel_empty_n, "kernel_val_1_1_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_1_1_channel_read, "kernel_val_1_1_channel_read");
    sc_trace(mVcdFile, kernel_val_1_2_channel_U_ap_dummy_ce, "kernel_val_1_2_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_1_2_channel_din, "kernel_val_1_2_channel_din");
    sc_trace(mVcdFile, kernel_val_1_2_channel_write, "kernel_val_1_2_channel_write");
    sc_trace(mVcdFile, kernel_val_1_2_channel_dout, "kernel_val_1_2_channel_dout");
    sc_trace(mVcdFile, kernel_val_1_2_channel_empty_n, "kernel_val_1_2_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_1_2_channel_read, "kernel_val_1_2_channel_read");
    sc_trace(mVcdFile, kernel_val_2_0_channel_U_ap_dummy_ce, "kernel_val_2_0_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_2_0_channel_din, "kernel_val_2_0_channel_din");
    sc_trace(mVcdFile, kernel_val_2_0_channel_write, "kernel_val_2_0_channel_write");
    sc_trace(mVcdFile, kernel_val_2_0_channel_dout, "kernel_val_2_0_channel_dout");
    sc_trace(mVcdFile, kernel_val_2_0_channel_empty_n, "kernel_val_2_0_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_2_0_channel_read, "kernel_val_2_0_channel_read");
    sc_trace(mVcdFile, kernel_val_2_1_channel_U_ap_dummy_ce, "kernel_val_2_1_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_2_1_channel_din, "kernel_val_2_1_channel_din");
    sc_trace(mVcdFile, kernel_val_2_1_channel_write, "kernel_val_2_1_channel_write");
    sc_trace(mVcdFile, kernel_val_2_1_channel_dout, "kernel_val_2_1_channel_dout");
    sc_trace(mVcdFile, kernel_val_2_1_channel_empty_n, "kernel_val_2_1_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_2_1_channel_read, "kernel_val_2_1_channel_read");
    sc_trace(mVcdFile, kernel_val_2_2_channel_U_ap_dummy_ce, "kernel_val_2_2_channel_U_ap_dummy_ce");
    sc_trace(mVcdFile, kernel_val_2_2_channel_din, "kernel_val_2_2_channel_din");
    sc_trace(mVcdFile, kernel_val_2_2_channel_write, "kernel_val_2_2_channel_write");
    sc_trace(mVcdFile, kernel_val_2_2_channel_dout, "kernel_val_2_2_channel_dout");
    sc_trace(mVcdFile, kernel_val_2_2_channel_empty_n, "kernel_val_2_2_channel_empty_n");
    sc_trace(mVcdFile, kernel_val_2_2_channel_read, "kernel_val_2_2_channel_read");
    sc_trace(mVcdFile, dst_data_stream_0_V_U_ap_dummy_ce, "dst_data_stream_0_V_U_ap_dummy_ce");
    sc_trace(mVcdFile, dst_data_stream_0_V_din, "dst_data_stream_0_V_din");
    sc_trace(mVcdFile, dst_data_stream_0_V_full_n, "dst_data_stream_0_V_full_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_write, "dst_data_stream_0_V_write");
    sc_trace(mVcdFile, dst_data_stream_0_V_dout, "dst_data_stream_0_V_dout");
    sc_trace(mVcdFile, dst_data_stream_0_V_empty_n, "dst_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, dst_data_stream_0_V_read, "dst_data_stream_0_V_read");
    sc_trace(mVcdFile, ap_reg_procdone_blur_Block_proc9_U0, "ap_reg_procdone_blur_Block_proc9_U0");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
    sc_trace(mVcdFile, ap_reg_procdone_blur_AXIM2Mat_U0, "ap_reg_procdone_blur_AXIM2Mat_U0");
    sc_trace(mVcdFile, ap_reg_procdone_blur_Loop_1_proc_U0, "ap_reg_procdone_blur_Loop_1_proc_U0");
    sc_trace(mVcdFile, ap_reg_procdone_blur_Filter2D_U0, "ap_reg_procdone_blur_Filter2D_U0");
    sc_trace(mVcdFile, ap_reg_procdone_blur_Mat2AXIM_U0, "ap_reg_procdone_blur_Mat2AXIM_U0");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_top_allready, "ap_sig_top_allready");
    sc_trace(mVcdFile, ap_reg_ready_blur_Block_proc9_U0_ap_ready, "ap_reg_ready_blur_Block_proc9_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_blur_Block_proc9_U0_ap_ready, "ap_sig_ready_blur_Block_proc9_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_blur_Block_proc9_U0_ap_start, "ap_sig_start_in_blur_Block_proc9_U0_ap_start");
    sc_trace(mVcdFile, ap_reg_ready_blur_AXIM2Mat_U0_ap_ready, "ap_reg_ready_blur_AXIM2Mat_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_ready_blur_AXIM2Mat_U0_ap_ready, "ap_sig_ready_blur_AXIM2Mat_U0_ap_ready");
    sc_trace(mVcdFile, ap_sig_start_in_blur_AXIM2Mat_U0_ap_start, "ap_sig_start_in_blur_AXIM2Mat_U0_ap_start");
#endif

    }
    mHdltvinHandle.open("blur.hdltvin.dat");
    mHdltvoutHandle.open("blur.hdltvout.dat");
}

blur::~blur() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete blur_AXILiteS_s_axi_U;
    delete blur_CRTL_BUS_m_axi_U;
    delete blur_Block_proc9_U0;
    delete blur_AXIM2Mat_U0;
    delete blur_Loop_1_proc_U0;
    delete blur_Filter2D_U0;
    delete blur_Mat2AXIM_U0;
    delete src_rows_V_channel_U;
    delete src_cols_V_channel_U;
    delete image_in_channel_U;
    delete image_out_channel_U;
    delete src_data_stream_0_V_U;
    delete src_rows_V_channel38_U;
    delete src_cols_V_channel39_U;
    delete kernel_val_0_0_channel_U;
    delete kernel_val_0_1_channel_U;
    delete kernel_val_0_2_channel_U;
    delete kernel_val_1_0_channel_U;
    delete kernel_val_1_1_channel_U;
    delete kernel_val_1_2_channel_U;
    delete kernel_val_2_0_channel_U;
    delete kernel_val_2_1_channel_U;
    delete kernel_val_2_2_channel_U;
    delete dst_data_stream_0_V_U;
}

void blur::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_blur_AXIM2Mat_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_blur_AXIM2Mat_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_AXIM2Mat_U0_ap_done.read())) {
            ap_reg_procdone_blur_AXIM2Mat_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_blur_Block_proc9_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_blur_Block_proc9_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Block_proc9_U0_ap_done.read())) {
            ap_reg_procdone_blur_Block_proc9_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_blur_Filter2D_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_blur_Filter2D_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Filter2D_U0_ap_done.read())) {
            ap_reg_procdone_blur_Filter2D_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_blur_Loop_1_proc_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_blur_Loop_1_proc_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read())) {
            ap_reg_procdone_blur_Loop_1_proc_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_procdone_blur_Mat2AXIM_U0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_hs_done.read())) {
            ap_reg_procdone_blur_Mat2AXIM_U0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Mat2AXIM_U0_ap_done.read())) {
            ap_reg_procdone_blur_Mat2AXIM_U0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_blur_AXIM2Mat_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_blur_AXIM2Mat_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_AXIM2Mat_U0_ap_ready.read())) {
            ap_reg_ready_blur_AXIM2Mat_U0_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_blur_Block_proc9_U0_ap_ready = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_top_allready.read()))) {
            ap_reg_ready_blur_Block_proc9_U0_ap_ready = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Block_proc9_U0_ap_ready.read())) {
            ap_reg_ready_blur_Block_proc9_U0_ap_ready = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_0_0_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_0_0_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_0_0_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_0_0_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_0_1_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_0_1_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_0_1_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_0_1_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_0_2_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_0_2_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_0_2_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_0_2_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_1_0_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_1_0_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_1_0_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_1_0_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_1_1_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_1_1_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_1_1_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_1_1_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_1_2_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_1_2_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_1_2_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_1_2_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_2_0_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_2_0_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_2_0_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_2_0_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_2_1_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_2_1_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_2_1_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_2_1_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ready_kernel_val_2_2_channel_full_n = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_continue.read()))) {
            ap_reg_ready_kernel_val_2_2_channel_full_n = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_done.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, kernel_val_2_2_channel_full_n.read()))) {
            ap_reg_ready_kernel_val_2_2_channel_full_n = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        blur_Mat2AXIM_U0_ap_start = ap_const_logic_0;
    } else {
        blur_Mat2AXIM_U0_ap_start = ap_const_logic_1;
    }
}

void blur::thread_CRTL_BUS_ARADDR() {
    CRTL_BUS_ARADDR = blur_AXIM2Mat_U0_m_axi_fb_ARADDR.read();
}

void blur::thread_CRTL_BUS_ARBURST() {
    CRTL_BUS_ARBURST = blur_AXIM2Mat_U0_m_axi_fb_ARBURST.read();
}

void blur::thread_CRTL_BUS_ARCACHE() {
    CRTL_BUS_ARCACHE = blur_AXIM2Mat_U0_m_axi_fb_ARCACHE.read();
}

void blur::thread_CRTL_BUS_ARID() {
    CRTL_BUS_ARID = blur_AXIM2Mat_U0_m_axi_fb_ARID.read();
}

void blur::thread_CRTL_BUS_ARLEN() {
    CRTL_BUS_ARLEN = blur_AXIM2Mat_U0_m_axi_fb_ARLEN.read();
}

void blur::thread_CRTL_BUS_ARLOCK() {
    CRTL_BUS_ARLOCK = blur_AXIM2Mat_U0_m_axi_fb_ARLOCK.read();
}

void blur::thread_CRTL_BUS_ARPROT() {
    CRTL_BUS_ARPROT = blur_AXIM2Mat_U0_m_axi_fb_ARPROT.read();
}

void blur::thread_CRTL_BUS_ARQOS() {
    CRTL_BUS_ARQOS = blur_AXIM2Mat_U0_m_axi_fb_ARQOS.read();
}

void blur::thread_CRTL_BUS_ARREGION() {
    CRTL_BUS_ARREGION = blur_AXIM2Mat_U0_m_axi_fb_ARREGION.read();
}

void blur::thread_CRTL_BUS_ARSIZE() {
    CRTL_BUS_ARSIZE = blur_AXIM2Mat_U0_m_axi_fb_ARSIZE.read();
}

void blur::thread_CRTL_BUS_ARUSER() {
    CRTL_BUS_ARUSER = blur_AXIM2Mat_U0_m_axi_fb_ARUSER.read();
}

void blur::thread_CRTL_BUS_ARVALID() {
    CRTL_BUS_ARVALID = blur_AXIM2Mat_U0_m_axi_fb_ARVALID.read();
}

void blur::thread_CRTL_BUS_AWADDR() {
    CRTL_BUS_AWADDR = blur_Mat2AXIM_U0_m_axi_fb_AWADDR.read();
}

void blur::thread_CRTL_BUS_AWBURST() {
    CRTL_BUS_AWBURST = blur_Mat2AXIM_U0_m_axi_fb_AWBURST.read();
}

void blur::thread_CRTL_BUS_AWCACHE() {
    CRTL_BUS_AWCACHE = blur_Mat2AXIM_U0_m_axi_fb_AWCACHE.read();
}

void blur::thread_CRTL_BUS_AWID() {
    CRTL_BUS_AWID = blur_Mat2AXIM_U0_m_axi_fb_AWID.read();
}

void blur::thread_CRTL_BUS_AWLEN() {
    CRTL_BUS_AWLEN = blur_Mat2AXIM_U0_m_axi_fb_AWLEN.read();
}

void blur::thread_CRTL_BUS_AWLOCK() {
    CRTL_BUS_AWLOCK = blur_Mat2AXIM_U0_m_axi_fb_AWLOCK.read();
}

void blur::thread_CRTL_BUS_AWPROT() {
    CRTL_BUS_AWPROT = blur_Mat2AXIM_U0_m_axi_fb_AWPROT.read();
}

void blur::thread_CRTL_BUS_AWQOS() {
    CRTL_BUS_AWQOS = blur_Mat2AXIM_U0_m_axi_fb_AWQOS.read();
}

void blur::thread_CRTL_BUS_AWREGION() {
    CRTL_BUS_AWREGION = blur_Mat2AXIM_U0_m_axi_fb_AWREGION.read();
}

void blur::thread_CRTL_BUS_AWSIZE() {
    CRTL_BUS_AWSIZE = blur_Mat2AXIM_U0_m_axi_fb_AWSIZE.read();
}

void blur::thread_CRTL_BUS_AWUSER() {
    CRTL_BUS_AWUSER = blur_Mat2AXIM_U0_m_axi_fb_AWUSER.read();
}

void blur::thread_CRTL_BUS_AWVALID() {
    CRTL_BUS_AWVALID = blur_Mat2AXIM_U0_m_axi_fb_AWVALID.read();
}

void blur::thread_CRTL_BUS_BREADY() {
    CRTL_BUS_BREADY = blur_Mat2AXIM_U0_m_axi_fb_BREADY.read();
}

void blur::thread_CRTL_BUS_RREADY() {
    CRTL_BUS_RREADY = blur_AXIM2Mat_U0_m_axi_fb_RREADY.read();
}

void blur::thread_CRTL_BUS_WDATA() {
    CRTL_BUS_WDATA = blur_Mat2AXIM_U0_m_axi_fb_WDATA.read();
}

void blur::thread_CRTL_BUS_WID() {
    CRTL_BUS_WID = blur_Mat2AXIM_U0_m_axi_fb_WID.read();
}

void blur::thread_CRTL_BUS_WLAST() {
    CRTL_BUS_WLAST = blur_Mat2AXIM_U0_m_axi_fb_WLAST.read();
}

void blur::thread_CRTL_BUS_WSTRB() {
    CRTL_BUS_WSTRB = blur_Mat2AXIM_U0_m_axi_fb_WSTRB.read();
}

void blur::thread_CRTL_BUS_WUSER() {
    CRTL_BUS_WUSER = blur_Mat2AXIM_U0_m_axi_fb_WUSER.read();
}

void blur::thread_CRTL_BUS_WVALID() {
    CRTL_BUS_WVALID = blur_Mat2AXIM_U0_m_axi_fb_WVALID.read();
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_0_0_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_0_1_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_0_2_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_1_0_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_1_1_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_1_2_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_2_0_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_2_1_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_reg_ready_kernel_val_2_2_channel_full_n.read())) {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel = ap_const_logic_0;
    } else {
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel = blur_Loop_1_proc_U0_ap_done.read();
    }
}

void blur::thread_ap_done() {
    ap_done = ap_sig_hs_done.read();
}

void blur::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, blur_Block_proc9_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, blur_AXIM2Mat_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, blur_Loop_1_proc_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, blur_Filter2D_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, blur_Mat2AXIM_U0_ap_idle.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_0_0_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_0_1_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_0_2_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_1_0_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_1_1_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_1_2_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_2_0_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_2_1_channel_empty_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, kernel_val_2_2_channel_empty_n.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void blur::thread_ap_ready() {
    ap_ready = ap_sig_top_allready.read();
}

void blur::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void blur::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_1;
}

void blur::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, blur_Mat2AXIM_U0_ap_done.read())) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void blur::thread_ap_sig_ready_blur_AXIM2Mat_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_blur_AXIM2Mat_U0_ap_ready.read())) {
        ap_sig_ready_blur_AXIM2Mat_U0_ap_ready = blur_AXIM2Mat_U0_ap_ready.read();
    } else {
        ap_sig_ready_blur_AXIM2Mat_U0_ap_ready = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_blur_Block_proc9_U0_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_blur_Block_proc9_U0_ap_ready.read())) {
        ap_sig_ready_blur_Block_proc9_U0_ap_ready = blur_Block_proc9_U0_ap_ready.read();
    } else {
        ap_sig_ready_blur_Block_proc9_U0_ap_ready = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_0_0_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_0_0_channel_full_n.read())) {
        ap_sig_ready_kernel_val_0_0_channel_full_n = kernel_val_0_0_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_0_0_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_0_1_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_0_1_channel_full_n.read())) {
        ap_sig_ready_kernel_val_0_1_channel_full_n = kernel_val_0_1_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_0_1_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_0_2_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_0_2_channel_full_n.read())) {
        ap_sig_ready_kernel_val_0_2_channel_full_n = kernel_val_0_2_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_0_2_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_1_0_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_1_0_channel_full_n.read())) {
        ap_sig_ready_kernel_val_1_0_channel_full_n = kernel_val_1_0_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_1_0_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_1_1_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_1_1_channel_full_n.read())) {
        ap_sig_ready_kernel_val_1_1_channel_full_n = kernel_val_1_1_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_1_1_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_1_2_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_1_2_channel_full_n.read())) {
        ap_sig_ready_kernel_val_1_2_channel_full_n = kernel_val_1_2_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_1_2_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_2_0_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_2_0_channel_full_n.read())) {
        ap_sig_ready_kernel_val_2_0_channel_full_n = kernel_val_2_0_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_2_0_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_2_1_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_2_1_channel_full_n.read())) {
        ap_sig_ready_kernel_val_2_1_channel_full_n = kernel_val_2_1_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_2_1_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_ready_kernel_val_2_2_channel_full_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_kernel_val_2_2_channel_full_n.read())) {
        ap_sig_ready_kernel_val_2_2_channel_full_n = kernel_val_2_2_channel_full_n.read();
    } else {
        ap_sig_ready_kernel_val_2_2_channel_full_n = ap_const_logic_1;
    }
}

void blur::thread_ap_sig_start_in_blur_AXIM2Mat_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_blur_AXIM2Mat_U0_ap_ready.read()))) {
        ap_sig_start_in_blur_AXIM2Mat_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_blur_AXIM2Mat_U0_ap_start = ap_const_logic_0;
    }
}

void blur::thread_ap_sig_start_in_blur_Block_proc9_U0_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ready_blur_Block_proc9_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_sig_start_in_blur_Block_proc9_U0_ap_start = ap_const_logic_1;
    } else {
        ap_sig_start_in_blur_Block_proc9_U0_ap_start = ap_const_logic_0;
    }
}

void blur::thread_ap_sig_top_allready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_blur_Block_proc9_U0_ap_ready.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_blur_AXIM2Mat_U0_ap_ready.read()))) {
        ap_sig_top_allready = ap_const_logic_1;
    } else {
        ap_sig_top_allready = ap_const_logic_0;
    }
}

void blur::thread_blur_AXILiteS_s_axi_U_ap_dummy_ce() {
    blur_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_blur_AXIM2Mat_U0_ap_continue() {
    blur_AXIM2Mat_U0_ap_continue = ap_const_logic_1;
}

void blur::thread_blur_AXIM2Mat_U0_ap_start() {
    blur_AXIM2Mat_U0_ap_start = ap_sig_start_in_blur_AXIM2Mat_U0_ap_start.read();
}

void blur::thread_blur_AXIM2Mat_U0_image_in_dout() {
    blur_AXIM2Mat_U0_image_in_dout = image_in_channel_dout.read();
}

void blur::thread_blur_AXIM2Mat_U0_image_in_empty_n() {
    blur_AXIM2Mat_U0_image_in_empty_n = image_in_channel_empty_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_cols_V_dout() {
    blur_AXIM2Mat_U0_img_cols_V_dout = src_cols_V_channel_dout.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_cols_V_empty_n() {
    blur_AXIM2Mat_U0_img_cols_V_empty_n = src_cols_V_channel_empty_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_cols_V_out_full_n() {
    blur_AXIM2Mat_U0_img_cols_V_out_full_n = src_cols_V_channel39_full_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_data_stream_V_full_n() {
    blur_AXIM2Mat_U0_img_data_stream_V_full_n = src_data_stream_0_V_full_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_rows_V_dout() {
    blur_AXIM2Mat_U0_img_rows_V_dout = src_rows_V_channel_dout.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_rows_V_empty_n() {
    blur_AXIM2Mat_U0_img_rows_V_empty_n = src_rows_V_channel_empty_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_img_rows_V_out_full_n() {
    blur_AXIM2Mat_U0_img_rows_V_out_full_n = src_rows_V_channel38_full_n.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_ARREADY() {
    blur_AXIM2Mat_U0_m_axi_fb_ARREADY = CRTL_BUS_ARREADY.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_AWREADY() {
    blur_AXIM2Mat_U0_m_axi_fb_AWREADY = ap_const_logic_0;
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_BID() {
    blur_AXIM2Mat_U0_m_axi_fb_BID = ap_const_lv1_0;
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_BRESP() {
    blur_AXIM2Mat_U0_m_axi_fb_BRESP = ap_const_lv2_0;
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_BUSER() {
    blur_AXIM2Mat_U0_m_axi_fb_BUSER = ap_const_lv1_0;
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_BVALID() {
    blur_AXIM2Mat_U0_m_axi_fb_BVALID = ap_const_logic_0;
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RDATA() {
    blur_AXIM2Mat_U0_m_axi_fb_RDATA = CRTL_BUS_RDATA.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RID() {
    blur_AXIM2Mat_U0_m_axi_fb_RID = CRTL_BUS_RID.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RLAST() {
    blur_AXIM2Mat_U0_m_axi_fb_RLAST = CRTL_BUS_RLAST.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RRESP() {
    blur_AXIM2Mat_U0_m_axi_fb_RRESP = CRTL_BUS_RRESP.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RUSER() {
    blur_AXIM2Mat_U0_m_axi_fb_RUSER = CRTL_BUS_RUSER.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_RVALID() {
    blur_AXIM2Mat_U0_m_axi_fb_RVALID = CRTL_BUS_RVALID.read();
}

void blur::thread_blur_AXIM2Mat_U0_m_axi_fb_WREADY() {
    blur_AXIM2Mat_U0_m_axi_fb_WREADY = ap_const_logic_0;
}

void blur::thread_blur_Block_proc9_U0_ap_continue() {
    blur_Block_proc9_U0_ap_continue = ap_const_logic_1;
}

void blur::thread_blur_Block_proc9_U0_ap_start() {
    blur_Block_proc9_U0_ap_start = ap_sig_start_in_blur_Block_proc9_U0_ap_start.read();
}

void blur::thread_blur_Block_proc9_U0_image_in() {
    blur_Block_proc9_U0_image_in = image_in.read();
}

void blur::thread_blur_Block_proc9_U0_image_in_out_full_n() {
    blur_Block_proc9_U0_image_in_out_full_n = image_in_channel_full_n.read();
}

void blur::thread_blur_Block_proc9_U0_image_out() {
    blur_Block_proc9_U0_image_out = image_out.read();
}

void blur::thread_blur_Block_proc9_U0_image_out_out_full_n() {
    blur_Block_proc9_U0_image_out_out_full_n = image_out_channel_full_n.read();
}

void blur::thread_blur_Block_proc9_U0_src_cols_V_out_full_n() {
    blur_Block_proc9_U0_src_cols_V_out_full_n = src_cols_V_channel_full_n.read();
}

void blur::thread_blur_Block_proc9_U0_src_rows_V_out_full_n() {
    blur_Block_proc9_U0_src_rows_V_out_full_n = src_rows_V_channel_full_n.read();
}

void blur::thread_blur_CRTL_BUS_m_axi_U_ap_dummy_ce() {
    blur_CRTL_BUS_m_axi_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_blur_Filter2D_U0_ap_continue() {
    blur_Filter2D_U0_ap_continue = ap_const_logic_1;
}

void blur::thread_blur_Filter2D_U0_ap_start() {
    blur_Filter2D_U0_ap_start = (kernel_val_0_0_channel_empty_n.read() & kernel_val_0_1_channel_empty_n.read() & kernel_val_0_2_channel_empty_n.read() & kernel_val_1_0_channel_empty_n.read() & kernel_val_1_1_channel_empty_n.read() & kernel_val_1_2_channel_empty_n.read() & kernel_val_2_0_channel_empty_n.read() & kernel_val_2_1_channel_empty_n.read() & kernel_val_2_2_channel_empty_n.read());
}

void blur::thread_blur_Filter2D_U0_p_dst_data_stream_V_full_n() {
    blur_Filter2D_U0_p_dst_data_stream_V_full_n = dst_data_stream_0_V_full_n.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_0_0_read() {
    blur_Filter2D_U0_p_kernel_val_0_0_read = kernel_val_0_0_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_0_1_read() {
    blur_Filter2D_U0_p_kernel_val_0_1_read = kernel_val_0_1_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_0_2_read() {
    blur_Filter2D_U0_p_kernel_val_0_2_read = kernel_val_0_2_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_1_0_read() {
    blur_Filter2D_U0_p_kernel_val_1_0_read = kernel_val_1_0_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_1_1_read() {
    blur_Filter2D_U0_p_kernel_val_1_1_read = kernel_val_1_1_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_1_2_read() {
    blur_Filter2D_U0_p_kernel_val_1_2_read = kernel_val_1_2_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_2_0_read() {
    blur_Filter2D_U0_p_kernel_val_2_0_read = kernel_val_2_0_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_2_1_read() {
    blur_Filter2D_U0_p_kernel_val_2_1_read = kernel_val_2_1_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_kernel_val_2_2_read() {
    blur_Filter2D_U0_p_kernel_val_2_2_read = kernel_val_2_2_channel_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_src_cols_V_dout() {
    blur_Filter2D_U0_p_src_cols_V_dout = src_cols_V_channel39_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_src_cols_V_empty_n() {
    blur_Filter2D_U0_p_src_cols_V_empty_n = src_cols_V_channel39_empty_n.read();
}

void blur::thread_blur_Filter2D_U0_p_src_data_stream_V_dout() {
    blur_Filter2D_U0_p_src_data_stream_V_dout = src_data_stream_0_V_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_src_data_stream_V_empty_n() {
    blur_Filter2D_U0_p_src_data_stream_V_empty_n = src_data_stream_0_V_empty_n.read();
}

void blur::thread_blur_Filter2D_U0_p_src_rows_V_dout() {
    blur_Filter2D_U0_p_src_rows_V_dout = src_rows_V_channel38_dout.read();
}

void blur::thread_blur_Filter2D_U0_p_src_rows_V_empty_n() {
    blur_Filter2D_U0_p_src_rows_V_empty_n = src_rows_V_channel38_empty_n.read();
}

void blur::thread_blur_Loop_1_proc_U0_ap_continue() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_0_1_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_0_0_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_0_2_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_1_0_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_1_1_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_1_2_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_2_0_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_2_1_channel_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_ready_kernel_val_2_2_channel_full_n.read()))) {
        blur_Loop_1_proc_U0_ap_continue = ap_const_logic_1;
    } else {
        blur_Loop_1_proc_U0_ap_continue = ap_const_logic_0;
    }
}

void blur::thread_blur_Loop_1_proc_U0_ap_start() {
    blur_Loop_1_proc_U0_ap_start = ap_start.read();
}

void blur::thread_blur_Mat2AXIM_U0_ap_continue() {
    blur_Mat2AXIM_U0_ap_continue = ap_sig_hs_continue.read();
}

void blur::thread_blur_Mat2AXIM_U0_image_out_dout() {
    blur_Mat2AXIM_U0_image_out_dout = image_out_channel_dout.read();
}

void blur::thread_blur_Mat2AXIM_U0_image_out_empty_n() {
    blur_Mat2AXIM_U0_image_out_empty_n = image_out_channel_empty_n.read();
}

void blur::thread_blur_Mat2AXIM_U0_img_data_stream_V_dout() {
    blur_Mat2AXIM_U0_img_data_stream_V_dout = dst_data_stream_0_V_dout.read();
}

void blur::thread_blur_Mat2AXIM_U0_img_data_stream_V_empty_n() {
    blur_Mat2AXIM_U0_img_data_stream_V_empty_n = dst_data_stream_0_V_empty_n.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_ARREADY() {
    blur_Mat2AXIM_U0_m_axi_fb_ARREADY = ap_const_logic_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_AWREADY() {
    blur_Mat2AXIM_U0_m_axi_fb_AWREADY = CRTL_BUS_AWREADY.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_BID() {
    blur_Mat2AXIM_U0_m_axi_fb_BID = CRTL_BUS_BID.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_BRESP() {
    blur_Mat2AXIM_U0_m_axi_fb_BRESP = CRTL_BUS_BRESP.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_BUSER() {
    blur_Mat2AXIM_U0_m_axi_fb_BUSER = CRTL_BUS_BUSER.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_BVALID() {
    blur_Mat2AXIM_U0_m_axi_fb_BVALID = CRTL_BUS_BVALID.read();
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RDATA() {
    blur_Mat2AXIM_U0_m_axi_fb_RDATA = ap_const_lv8_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RID() {
    blur_Mat2AXIM_U0_m_axi_fb_RID = ap_const_lv1_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RLAST() {
    blur_Mat2AXIM_U0_m_axi_fb_RLAST = ap_const_logic_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RRESP() {
    blur_Mat2AXIM_U0_m_axi_fb_RRESP = ap_const_lv2_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RUSER() {
    blur_Mat2AXIM_U0_m_axi_fb_RUSER = ap_const_lv1_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_RVALID() {
    blur_Mat2AXIM_U0_m_axi_fb_RVALID = ap_const_logic_0;
}

void blur::thread_blur_Mat2AXIM_U0_m_axi_fb_WREADY() {
    blur_Mat2AXIM_U0_m_axi_fb_WREADY = CRTL_BUS_WREADY.read();
}

void blur::thread_dst_data_stream_0_V_U_ap_dummy_ce() {
    dst_data_stream_0_V_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_dst_data_stream_0_V_din() {
    dst_data_stream_0_V_din = blur_Filter2D_U0_p_dst_data_stream_V_din.read();
}

void blur::thread_dst_data_stream_0_V_read() {
    dst_data_stream_0_V_read = blur_Mat2AXIM_U0_img_data_stream_V_read.read();
}

void blur::thread_dst_data_stream_0_V_write() {
    dst_data_stream_0_V_write = blur_Filter2D_U0_p_dst_data_stream_V_write.read();
}

void blur::thread_image_in_channel_U_ap_dummy_ce() {
    image_in_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_image_in_channel_din() {
    image_in_channel_din = blur_Block_proc9_U0_image_in_out_din.read();
}

void blur::thread_image_in_channel_read() {
    image_in_channel_read = blur_AXIM2Mat_U0_image_in_read.read();
}

void blur::thread_image_in_channel_write() {
    image_in_channel_write = blur_Block_proc9_U0_image_in_out_write.read();
}

void blur::thread_image_out_channel_U_ap_dummy_ce() {
    image_out_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_image_out_channel_din() {
    image_out_channel_din = blur_Block_proc9_U0_image_out_out_din.read();
}

void blur::thread_image_out_channel_read() {
    image_out_channel_read = blur_Mat2AXIM_U0_image_out_read.read();
}

void blur::thread_image_out_channel_write() {
    image_out_channel_write = blur_Block_proc9_U0_image_out_out_write.read();
}

void blur::thread_kernel_val_0_0_channel_U_ap_dummy_ce() {
    kernel_val_0_0_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_0_0_channel_din() {
    kernel_val_0_0_channel_din = blur_Loop_1_proc_U0_ap_return_0.read();
}

void blur::thread_kernel_val_0_0_channel_read() {
    kernel_val_0_0_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_0_0_channel_write() {
    kernel_val_0_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel.read();
}

void blur::thread_kernel_val_0_1_channel_U_ap_dummy_ce() {
    kernel_val_0_1_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_0_1_channel_din() {
    kernel_val_0_1_channel_din = blur_Loop_1_proc_U0_ap_return_1.read();
}

void blur::thread_kernel_val_0_1_channel_read() {
    kernel_val_0_1_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_0_1_channel_write() {
    kernel_val_0_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel.read();
}

void blur::thread_kernel_val_0_2_channel_U_ap_dummy_ce() {
    kernel_val_0_2_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_0_2_channel_din() {
    kernel_val_0_2_channel_din = blur_Loop_1_proc_U0_ap_return_2.read();
}

void blur::thread_kernel_val_0_2_channel_read() {
    kernel_val_0_2_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_0_2_channel_write() {
    kernel_val_0_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel.read();
}

void blur::thread_kernel_val_1_0_channel_U_ap_dummy_ce() {
    kernel_val_1_0_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_1_0_channel_din() {
    kernel_val_1_0_channel_din = blur_Loop_1_proc_U0_ap_return_3.read();
}

void blur::thread_kernel_val_1_0_channel_read() {
    kernel_val_1_0_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_1_0_channel_write() {
    kernel_val_1_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel.read();
}

void blur::thread_kernel_val_1_1_channel_U_ap_dummy_ce() {
    kernel_val_1_1_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_1_1_channel_din() {
    kernel_val_1_1_channel_din = blur_Loop_1_proc_U0_ap_return_4.read();
}

void blur::thread_kernel_val_1_1_channel_read() {
    kernel_val_1_1_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_1_1_channel_write() {
    kernel_val_1_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel.read();
}

void blur::thread_kernel_val_1_2_channel_U_ap_dummy_ce() {
    kernel_val_1_2_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_1_2_channel_din() {
    kernel_val_1_2_channel_din = blur_Loop_1_proc_U0_ap_return_5.read();
}

void blur::thread_kernel_val_1_2_channel_read() {
    kernel_val_1_2_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_1_2_channel_write() {
    kernel_val_1_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel.read();
}

void blur::thread_kernel_val_2_0_channel_U_ap_dummy_ce() {
    kernel_val_2_0_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_2_0_channel_din() {
    kernel_val_2_0_channel_din = blur_Loop_1_proc_U0_ap_return_6.read();
}

void blur::thread_kernel_val_2_0_channel_read() {
    kernel_val_2_0_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_2_0_channel_write() {
    kernel_val_2_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel.read();
}

void blur::thread_kernel_val_2_1_channel_U_ap_dummy_ce() {
    kernel_val_2_1_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_2_1_channel_din() {
    kernel_val_2_1_channel_din = blur_Loop_1_proc_U0_ap_return_7.read();
}

void blur::thread_kernel_val_2_1_channel_read() {
    kernel_val_2_1_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_2_1_channel_write() {
    kernel_val_2_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel.read();
}

void blur::thread_kernel_val_2_2_channel_U_ap_dummy_ce() {
    kernel_val_2_2_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_kernel_val_2_2_channel_din() {
    kernel_val_2_2_channel_din = blur_Loop_1_proc_U0_ap_return_8.read();
}

void blur::thread_kernel_val_2_2_channel_read() {
    kernel_val_2_2_channel_read = blur_Filter2D_U0_ap_ready.read();
}

void blur::thread_kernel_val_2_2_channel_write() {
    kernel_val_2_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel.read();
}

void blur::thread_src_cols_V_channel39_U_ap_dummy_ce() {
    src_cols_V_channel39_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_src_cols_V_channel39_din() {
    src_cols_V_channel39_din = blur_AXIM2Mat_U0_img_cols_V_out_din.read();
}

void blur::thread_src_cols_V_channel39_read() {
    src_cols_V_channel39_read = blur_Filter2D_U0_p_src_cols_V_read.read();
}

void blur::thread_src_cols_V_channel39_write() {
    src_cols_V_channel39_write = blur_AXIM2Mat_U0_img_cols_V_out_write.read();
}

void blur::thread_src_cols_V_channel_U_ap_dummy_ce() {
    src_cols_V_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_src_cols_V_channel_din() {
    src_cols_V_channel_din = blur_Block_proc9_U0_src_cols_V_out_din.read();
}

void blur::thread_src_cols_V_channel_read() {
    src_cols_V_channel_read = blur_AXIM2Mat_U0_img_cols_V_read.read();
}

void blur::thread_src_cols_V_channel_write() {
    src_cols_V_channel_write = blur_Block_proc9_U0_src_cols_V_out_write.read();
}

void blur::thread_src_data_stream_0_V_U_ap_dummy_ce() {
    src_data_stream_0_V_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_src_data_stream_0_V_din() {
    src_data_stream_0_V_din = blur_AXIM2Mat_U0_img_data_stream_V_din.read();
}

void blur::thread_src_data_stream_0_V_read() {
    src_data_stream_0_V_read = blur_Filter2D_U0_p_src_data_stream_V_read.read();
}

void blur::thread_src_data_stream_0_V_write() {
    src_data_stream_0_V_write = blur_AXIM2Mat_U0_img_data_stream_V_write.read();
}

void blur::thread_src_rows_V_channel38_U_ap_dummy_ce() {
    src_rows_V_channel38_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_src_rows_V_channel38_din() {
    src_rows_V_channel38_din = blur_AXIM2Mat_U0_img_rows_V_out_din.read();
}

void blur::thread_src_rows_V_channel38_read() {
    src_rows_V_channel38_read = blur_Filter2D_U0_p_src_rows_V_read.read();
}

void blur::thread_src_rows_V_channel38_write() {
    src_rows_V_channel38_write = blur_AXIM2Mat_U0_img_rows_V_out_write.read();
}

void blur::thread_src_rows_V_channel_U_ap_dummy_ce() {
    src_rows_V_channel_U_ap_dummy_ce = ap_const_logic_1;
}

void blur::thread_src_rows_V_channel_din() {
    src_rows_V_channel_din = blur_Block_proc9_U0_src_rows_V_out_din.read();
}

void blur::thread_src_rows_V_channel_read() {
    src_rows_V_channel_read = blur_AXIM2Mat_U0_img_rows_V_read.read();
}

void blur::thread_src_rows_V_channel_write() {
    src_rows_V_channel_write = blur_Block_proc9_U0_src_rows_V_out_write.read();
}

void blur::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWVALID\" :  \"" << m_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_AWREADY\" :  \"" << m_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWADDR\" :  \"" << m_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWID\" :  \"" << m_axi_CRTL_BUS_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWLEN\" :  \"" << m_axi_CRTL_BUS_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWSIZE\" :  \"" << m_axi_CRTL_BUS_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWBURST\" :  \"" << m_axi_CRTL_BUS_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWLOCK\" :  \"" << m_axi_CRTL_BUS_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWCACHE\" :  \"" << m_axi_CRTL_BUS_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWPROT\" :  \"" << m_axi_CRTL_BUS_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWQOS\" :  \"" << m_axi_CRTL_BUS_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWREGION\" :  \"" << m_axi_CRTL_BUS_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_AWUSER\" :  \"" << m_axi_CRTL_BUS_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WVALID\" :  \"" << m_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_WREADY\" :  \"" << m_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WDATA\" :  \"" << m_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WSTRB\" :  \"" << m_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WLAST\" :  \"" << m_axi_CRTL_BUS_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WID\" :  \"" << m_axi_CRTL_BUS_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_WUSER\" :  \"" << m_axi_CRTL_BUS_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARVALID\" :  \"" << m_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_ARREADY\" :  \"" << m_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARADDR\" :  \"" << m_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARID\" :  \"" << m_axi_CRTL_BUS_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARLEN\" :  \"" << m_axi_CRTL_BUS_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARSIZE\" :  \"" << m_axi_CRTL_BUS_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARBURST\" :  \"" << m_axi_CRTL_BUS_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARLOCK\" :  \"" << m_axi_CRTL_BUS_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARCACHE\" :  \"" << m_axi_CRTL_BUS_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARPROT\" :  \"" << m_axi_CRTL_BUS_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARQOS\" :  \"" << m_axi_CRTL_BUS_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARREGION\" :  \"" << m_axi_CRTL_BUS_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_ARUSER\" :  \"" << m_axi_CRTL_BUS_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RVALID\" :  \"" << m_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_RREADY\" :  \"" << m_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RDATA\" :  \"" << m_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RLAST\" :  \"" << m_axi_CRTL_BUS_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RID\" :  \"" << m_axi_CRTL_BUS_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RUSER\" :  \"" << m_axi_CRTL_BUS_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_RRESP\" :  \"" << m_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_BVALID\" :  \"" << m_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_CRTL_BUS_BREADY\" :  \"" << m_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_BRESP\" :  \"" << m_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_BID\" :  \"" << m_axi_CRTL_BUS_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_CRTL_BUS_BUSER\" :  \"" << m_axi_CRTL_BUS_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

