// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _blur_Loop_1_proc_HH_
#define _blur_Loop_1_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "blur_Loop_1_proc_coefficients.h"

namespace ap_rtl {

struct blur_Loop_1_proc : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;


    // Module declarations
    blur_Loop_1_proc(sc_module_name name);
    SC_HAS_PROCESS(blur_Loop_1_proc);

    ~blur_Loop_1_proc();

    sc_trace_file* mVcdFile;

    blur_Loop_1_proc_coefficients* coefficients_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_23;
    sc_signal< sc_lv<4> > coefficients_address0;
    sc_signal< sc_logic > coefficients_ce0;
    sc_signal< sc_lv<3> > coefficients_q0;
    sc_signal< sc_lv<2> > i_1_fu_98_p2;
    sc_signal< sc_lv<2> > i_1_reg_339;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_54;
    sc_signal< sc_lv<5> > tmp_3_fu_120_p2;
    sc_signal< sc_lv<5> > tmp_3_reg_344;
    sc_signal< sc_lv<1> > exitcond1_fu_92_p2;
    sc_signal< sc_lv<2> > j_1_fu_213_p2;
    sc_signal< sc_lv<2> > j_1_reg_352;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_69;
    sc_signal< sc_lv<1> > exitcond_fu_207_p2;
    sc_signal< sc_lv<2> > i_reg_68;
    sc_signal< bool > ap_sig_bdd_82;
    sc_signal< sc_lv<2> > j_reg_80;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_94;
    sc_signal< sc_lv<64> > tmp_4_cast_fu_228_p1;
    sc_signal< sc_lv<8> > kernel_val_2_2_s_fu_20;
    sc_signal< sc_lv<8> > kernel_val_2_0_cast_fu_233_p1;
    sc_signal< sc_lv<8> > kernel_val_2_1_s_fu_24;
    sc_signal< sc_lv<8> > kernel_val_0_0_s_fu_28;
    sc_signal< sc_lv<8> > kernel_val_2_0_s_fu_32;
    sc_signal< sc_lv<8> > kernel_val_1_2_s_fu_36;
    sc_signal< sc_lv<8> > kernel_val_0_1_s_fu_40;
    sc_signal< sc_lv<8> > kernel_val_1_1_s_fu_44;
    sc_signal< sc_lv<8> > kernel_val_1_0_s_fu_48;
    sc_signal< sc_lv<8> > kernel_val_0_2_s_fu_52;
    sc_signal< sc_lv<4> > tmp_2_fu_108_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_116_p1;
    sc_signal< sc_lv<5> > tmp_cast_fu_104_p1;
    sc_signal< sc_lv<5> > tmp_cast_42_fu_219_p1;
    sc_signal< sc_lv<5> > tmp_4_fu_223_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_sig_bdd_23();
    void thread_ap_sig_bdd_54();
    void thread_ap_sig_bdd_69();
    void thread_ap_sig_bdd_82();
    void thread_ap_sig_bdd_94();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_coefficients_address0();
    void thread_coefficients_ce0();
    void thread_exitcond1_fu_92_p2();
    void thread_exitcond_fu_207_p2();
    void thread_i_1_fu_98_p2();
    void thread_j_1_fu_213_p2();
    void thread_kernel_val_2_0_cast_fu_233_p1();
    void thread_p_shl_cast_fu_116_p1();
    void thread_tmp_2_fu_108_p3();
    void thread_tmp_3_fu_120_p2();
    void thread_tmp_4_cast_fu_228_p1();
    void thread_tmp_4_fu_223_p2();
    void thread_tmp_cast_42_fu_219_p1();
    void thread_tmp_cast_fu_104_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
