// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="blur,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=9,HLS_SYN_FF=1852,HLS_SYN_LUT=2340}" *)

module blur (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        m_axi_CRTL_BUS_AWVALID,
        m_axi_CRTL_BUS_AWREADY,
        m_axi_CRTL_BUS_AWADDR,
        m_axi_CRTL_BUS_AWID,
        m_axi_CRTL_BUS_AWLEN,
        m_axi_CRTL_BUS_AWSIZE,
        m_axi_CRTL_BUS_AWBURST,
        m_axi_CRTL_BUS_AWLOCK,
        m_axi_CRTL_BUS_AWCACHE,
        m_axi_CRTL_BUS_AWPROT,
        m_axi_CRTL_BUS_AWQOS,
        m_axi_CRTL_BUS_AWREGION,
        m_axi_CRTL_BUS_AWUSER,
        m_axi_CRTL_BUS_WVALID,
        m_axi_CRTL_BUS_WREADY,
        m_axi_CRTL_BUS_WDATA,
        m_axi_CRTL_BUS_WSTRB,
        m_axi_CRTL_BUS_WLAST,
        m_axi_CRTL_BUS_WID,
        m_axi_CRTL_BUS_WUSER,
        m_axi_CRTL_BUS_ARVALID,
        m_axi_CRTL_BUS_ARREADY,
        m_axi_CRTL_BUS_ARADDR,
        m_axi_CRTL_BUS_ARID,
        m_axi_CRTL_BUS_ARLEN,
        m_axi_CRTL_BUS_ARSIZE,
        m_axi_CRTL_BUS_ARBURST,
        m_axi_CRTL_BUS_ARLOCK,
        m_axi_CRTL_BUS_ARCACHE,
        m_axi_CRTL_BUS_ARPROT,
        m_axi_CRTL_BUS_ARQOS,
        m_axi_CRTL_BUS_ARREGION,
        m_axi_CRTL_BUS_ARUSER,
        m_axi_CRTL_BUS_RVALID,
        m_axi_CRTL_BUS_RREADY,
        m_axi_CRTL_BUS_RDATA,
        m_axi_CRTL_BUS_RLAST,
        m_axi_CRTL_BUS_RID,
        m_axi_CRTL_BUS_RUSER,
        m_axi_CRTL_BUS_RRESP,
        m_axi_CRTL_BUS_BVALID,
        m_axi_CRTL_BUS_BREADY,
        m_axi_CRTL_BUS_BRESP,
        m_axi_CRTL_BUS_BID,
        m_axi_CRTL_BUS_BUSER,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    ap_const_logic_1 = 1'b1;
parameter    C_M_AXI_CRTL_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_CRTL_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_CRTL_BUS_USER_VALUE = 0;
parameter    C_M_AXI_CRTL_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_CRTL_BUS_CACHE_VALUE = 3;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_true = 1'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_CRTL_BUS_WSTRB_WIDTH = (C_M_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   m_axi_CRTL_BUS_AWVALID;
input   m_axi_CRTL_BUS_AWREADY;
output  [C_M_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] m_axi_CRTL_BUS_AWADDR;
output  [C_M_AXI_CRTL_BUS_ID_WIDTH - 1 : 0] m_axi_CRTL_BUS_AWID;
output  [7:0] m_axi_CRTL_BUS_AWLEN;
output  [2:0] m_axi_CRTL_BUS_AWSIZE;
output  [1:0] m_axi_CRTL_BUS_AWBURST;
output  [1:0] m_axi_CRTL_BUS_AWLOCK;
output  [3:0] m_axi_CRTL_BUS_AWCACHE;
output  [2:0] m_axi_CRTL_BUS_AWPROT;
output  [3:0] m_axi_CRTL_BUS_AWQOS;
output  [3:0] m_axi_CRTL_BUS_AWREGION;
output  [C_M_AXI_CRTL_BUS_AWUSER_WIDTH - 1 : 0] m_axi_CRTL_BUS_AWUSER;
output   m_axi_CRTL_BUS_WVALID;
input   m_axi_CRTL_BUS_WREADY;
output  [C_M_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] m_axi_CRTL_BUS_WDATA;
output  [C_M_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] m_axi_CRTL_BUS_WSTRB;
output   m_axi_CRTL_BUS_WLAST;
output  [C_M_AXI_CRTL_BUS_ID_WIDTH - 1 : 0] m_axi_CRTL_BUS_WID;
output  [C_M_AXI_CRTL_BUS_WUSER_WIDTH - 1 : 0] m_axi_CRTL_BUS_WUSER;
output   m_axi_CRTL_BUS_ARVALID;
input   m_axi_CRTL_BUS_ARREADY;
output  [C_M_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] m_axi_CRTL_BUS_ARADDR;
output  [C_M_AXI_CRTL_BUS_ID_WIDTH - 1 : 0] m_axi_CRTL_BUS_ARID;
output  [7:0] m_axi_CRTL_BUS_ARLEN;
output  [2:0] m_axi_CRTL_BUS_ARSIZE;
output  [1:0] m_axi_CRTL_BUS_ARBURST;
output  [1:0] m_axi_CRTL_BUS_ARLOCK;
output  [3:0] m_axi_CRTL_BUS_ARCACHE;
output  [2:0] m_axi_CRTL_BUS_ARPROT;
output  [3:0] m_axi_CRTL_BUS_ARQOS;
output  [3:0] m_axi_CRTL_BUS_ARREGION;
output  [C_M_AXI_CRTL_BUS_ARUSER_WIDTH - 1 : 0] m_axi_CRTL_BUS_ARUSER;
input   m_axi_CRTL_BUS_RVALID;
output   m_axi_CRTL_BUS_RREADY;
input  [C_M_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] m_axi_CRTL_BUS_RDATA;
input   m_axi_CRTL_BUS_RLAST;
input  [C_M_AXI_CRTL_BUS_ID_WIDTH - 1 : 0] m_axi_CRTL_BUS_RID;
input  [C_M_AXI_CRTL_BUS_RUSER_WIDTH - 1 : 0] m_axi_CRTL_BUS_RUSER;
input  [1:0] m_axi_CRTL_BUS_RRESP;
input   m_axi_CRTL_BUS_BVALID;
output   m_axi_CRTL_BUS_BREADY;
input  [1:0] m_axi_CRTL_BUS_BRESP;
input  [C_M_AXI_CRTL_BUS_ID_WIDTH - 1 : 0] m_axi_CRTL_BUS_BID;
input  [C_M_AXI_CRTL_BUS_BUSER_WIDTH - 1 : 0] m_axi_CRTL_BUS_BUSER;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_idle;
reg    ap_rst_n_inv;
wire    blur_AXILiteS_s_axi_U_ap_dummy_ce;
wire   [31:0] image_in;
wire   [31:0] image_out;
wire    CRTL_BUS_AWVALID;
wire    CRTL_BUS_AWREADY;
wire   [31:0] CRTL_BUS_AWADDR;
wire   [0:0] CRTL_BUS_AWID;
wire   [31:0] CRTL_BUS_AWLEN;
wire   [2:0] CRTL_BUS_AWSIZE;
wire   [1:0] CRTL_BUS_AWBURST;
wire   [1:0] CRTL_BUS_AWLOCK;
wire   [3:0] CRTL_BUS_AWCACHE;
wire   [2:0] CRTL_BUS_AWPROT;
wire   [3:0] CRTL_BUS_AWQOS;
wire   [3:0] CRTL_BUS_AWREGION;
wire   [0:0] CRTL_BUS_AWUSER;
wire    CRTL_BUS_WVALID;
wire    CRTL_BUS_WREADY;
wire   [7:0] CRTL_BUS_WDATA;
wire   [0:0] CRTL_BUS_WSTRB;
wire    CRTL_BUS_WLAST;
wire   [0:0] CRTL_BUS_WID;
wire   [0:0] CRTL_BUS_WUSER;
wire    CRTL_BUS_ARVALID;
wire    CRTL_BUS_ARREADY;
wire   [31:0] CRTL_BUS_ARADDR;
wire   [0:0] CRTL_BUS_ARID;
wire   [31:0] CRTL_BUS_ARLEN;
wire   [2:0] CRTL_BUS_ARSIZE;
wire   [1:0] CRTL_BUS_ARBURST;
wire   [1:0] CRTL_BUS_ARLOCK;
wire   [3:0] CRTL_BUS_ARCACHE;
wire   [2:0] CRTL_BUS_ARPROT;
wire   [3:0] CRTL_BUS_ARQOS;
wire   [3:0] CRTL_BUS_ARREGION;
wire   [0:0] CRTL_BUS_ARUSER;
wire    CRTL_BUS_RVALID;
wire    CRTL_BUS_RREADY;
wire   [7:0] CRTL_BUS_RDATA;
wire    CRTL_BUS_RLAST;
wire   [0:0] CRTL_BUS_RID;
wire   [0:0] CRTL_BUS_RUSER;
wire   [1:0] CRTL_BUS_RRESP;
wire    CRTL_BUS_BVALID;
wire    CRTL_BUS_BREADY;
wire   [1:0] CRTL_BUS_BRESP;
wire   [0:0] CRTL_BUS_BID;
wire   [0:0] CRTL_BUS_BUSER;
wire    blur_CRTL_BUS_m_axi_U_ap_dummy_ce;
wire    blur_Block_proc9_U0_ap_start;
wire    blur_Block_proc9_U0_ap_done;
wire    blur_Block_proc9_U0_ap_continue;
wire    blur_Block_proc9_U0_ap_idle;
wire    blur_Block_proc9_U0_ap_ready;
wire   [11:0] blur_Block_proc9_U0_src_rows_V_out_din;
wire    blur_Block_proc9_U0_src_rows_V_out_full_n;
wire    blur_Block_proc9_U0_src_rows_V_out_write;
wire   [11:0] blur_Block_proc9_U0_src_cols_V_out_din;
wire    blur_Block_proc9_U0_src_cols_V_out_full_n;
wire    blur_Block_proc9_U0_src_cols_V_out_write;
wire   [31:0] blur_Block_proc9_U0_image_in;
wire   [31:0] blur_Block_proc9_U0_image_out;
wire   [31:0] blur_Block_proc9_U0_image_in_out_din;
wire    blur_Block_proc9_U0_image_in_out_full_n;
wire    blur_Block_proc9_U0_image_in_out_write;
wire   [31:0] blur_Block_proc9_U0_image_out_out_din;
wire    blur_Block_proc9_U0_image_out_out_full_n;
wire    blur_Block_proc9_U0_image_out_out_write;
wire    blur_AXIM2Mat_U0_ap_start;
wire    blur_AXIM2Mat_U0_ap_done;
wire    blur_AXIM2Mat_U0_ap_continue;
wire    blur_AXIM2Mat_U0_ap_idle;
wire    blur_AXIM2Mat_U0_ap_ready;
wire    blur_AXIM2Mat_U0_m_axi_fb_AWVALID;
wire    blur_AXIM2Mat_U0_m_axi_fb_AWREADY;
wire   [31:0] blur_AXIM2Mat_U0_m_axi_fb_AWADDR;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_AWID;
wire   [31:0] blur_AXIM2Mat_U0_m_axi_fb_AWLEN;
wire   [2:0] blur_AXIM2Mat_U0_m_axi_fb_AWSIZE;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_AWBURST;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_AWLOCK;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_AWCACHE;
wire   [2:0] blur_AXIM2Mat_U0_m_axi_fb_AWPROT;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_AWQOS;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_AWREGION;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_AWUSER;
wire    blur_AXIM2Mat_U0_m_axi_fb_WVALID;
wire    blur_AXIM2Mat_U0_m_axi_fb_WREADY;
wire   [7:0] blur_AXIM2Mat_U0_m_axi_fb_WDATA;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_WSTRB;
wire    blur_AXIM2Mat_U0_m_axi_fb_WLAST;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_WID;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_WUSER;
wire    blur_AXIM2Mat_U0_m_axi_fb_ARVALID;
wire    blur_AXIM2Mat_U0_m_axi_fb_ARREADY;
wire   [31:0] blur_AXIM2Mat_U0_m_axi_fb_ARADDR;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_ARID;
wire   [31:0] blur_AXIM2Mat_U0_m_axi_fb_ARLEN;
wire   [2:0] blur_AXIM2Mat_U0_m_axi_fb_ARSIZE;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_ARBURST;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_ARLOCK;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_ARCACHE;
wire   [2:0] blur_AXIM2Mat_U0_m_axi_fb_ARPROT;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_ARQOS;
wire   [3:0] blur_AXIM2Mat_U0_m_axi_fb_ARREGION;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_ARUSER;
wire    blur_AXIM2Mat_U0_m_axi_fb_RVALID;
wire    blur_AXIM2Mat_U0_m_axi_fb_RREADY;
wire   [7:0] blur_AXIM2Mat_U0_m_axi_fb_RDATA;
wire    blur_AXIM2Mat_U0_m_axi_fb_RLAST;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_RID;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_RUSER;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_RRESP;
wire    blur_AXIM2Mat_U0_m_axi_fb_BVALID;
wire    blur_AXIM2Mat_U0_m_axi_fb_BREADY;
wire   [1:0] blur_AXIM2Mat_U0_m_axi_fb_BRESP;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_BID;
wire   [0:0] blur_AXIM2Mat_U0_m_axi_fb_BUSER;
wire   [31:0] blur_AXIM2Mat_U0_image_in_dout;
wire    blur_AXIM2Mat_U0_image_in_empty_n;
wire    blur_AXIM2Mat_U0_image_in_read;
wire   [11:0] blur_AXIM2Mat_U0_img_rows_V_dout;
wire    blur_AXIM2Mat_U0_img_rows_V_empty_n;
wire    blur_AXIM2Mat_U0_img_rows_V_read;
wire   [11:0] blur_AXIM2Mat_U0_img_cols_V_dout;
wire    blur_AXIM2Mat_U0_img_cols_V_empty_n;
wire    blur_AXIM2Mat_U0_img_cols_V_read;
wire   [7:0] blur_AXIM2Mat_U0_img_data_stream_V_din;
wire    blur_AXIM2Mat_U0_img_data_stream_V_full_n;
wire    blur_AXIM2Mat_U0_img_data_stream_V_write;
wire   [11:0] blur_AXIM2Mat_U0_img_rows_V_out_din;
wire    blur_AXIM2Mat_U0_img_rows_V_out_full_n;
wire    blur_AXIM2Mat_U0_img_rows_V_out_write;
wire   [11:0] blur_AXIM2Mat_U0_img_cols_V_out_din;
wire    blur_AXIM2Mat_U0_img_cols_V_out_full_n;
wire    blur_AXIM2Mat_U0_img_cols_V_out_write;
wire    blur_Loop_1_proc_U0_ap_start;
wire    blur_Loop_1_proc_U0_ap_done;
reg    blur_Loop_1_proc_U0_ap_continue;
wire    blur_Loop_1_proc_U0_ap_idle;
wire    blur_Loop_1_proc_U0_ap_ready;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_0;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_1;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_2;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_3;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_4;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_5;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_6;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_7;
wire   [7:0] blur_Loop_1_proc_U0_ap_return_8;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel;
wire    kernel_val_0_1_channel_full_n;
reg    ap_reg_ready_kernel_val_0_1_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_0_1_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel;
wire    kernel_val_0_0_channel_full_n;
reg    ap_reg_ready_kernel_val_0_0_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_0_0_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel;
wire    kernel_val_0_2_channel_full_n;
reg    ap_reg_ready_kernel_val_0_2_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_0_2_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel;
wire    kernel_val_1_0_channel_full_n;
reg    ap_reg_ready_kernel_val_1_0_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_1_0_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel;
wire    kernel_val_1_1_channel_full_n;
reg    ap_reg_ready_kernel_val_1_1_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_1_1_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel;
wire    kernel_val_1_2_channel_full_n;
reg    ap_reg_ready_kernel_val_1_2_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_1_2_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel;
wire    kernel_val_2_0_channel_full_n;
reg    ap_reg_ready_kernel_val_2_0_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_2_0_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel;
wire    kernel_val_2_1_channel_full_n;
reg    ap_reg_ready_kernel_val_2_1_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_2_1_channel_full_n;
reg    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel;
wire    kernel_val_2_2_channel_full_n;
reg    ap_reg_ready_kernel_val_2_2_channel_full_n = 1'b0;
reg    ap_sig_ready_kernel_val_2_2_channel_full_n;
wire    blur_Filter2D_U0_ap_start;
wire    blur_Filter2D_U0_ap_done;
wire    blur_Filter2D_U0_ap_continue;
wire    blur_Filter2D_U0_ap_idle;
wire    blur_Filter2D_U0_ap_ready;
wire   [11:0] blur_Filter2D_U0_p_src_rows_V_dout;
wire    blur_Filter2D_U0_p_src_rows_V_empty_n;
wire    blur_Filter2D_U0_p_src_rows_V_read;
wire   [11:0] blur_Filter2D_U0_p_src_cols_V_dout;
wire    blur_Filter2D_U0_p_src_cols_V_empty_n;
wire    blur_Filter2D_U0_p_src_cols_V_read;
wire   [7:0] blur_Filter2D_U0_p_src_data_stream_V_dout;
wire    blur_Filter2D_U0_p_src_data_stream_V_empty_n;
wire    blur_Filter2D_U0_p_src_data_stream_V_read;
wire   [7:0] blur_Filter2D_U0_p_dst_data_stream_V_din;
wire    blur_Filter2D_U0_p_dst_data_stream_V_full_n;
wire    blur_Filter2D_U0_p_dst_data_stream_V_write;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_0_0_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_0_1_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_0_2_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_1_0_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_1_1_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_1_2_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_2_0_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_2_1_read;
wire   [7:0] blur_Filter2D_U0_p_kernel_val_2_2_read;
reg    blur_Mat2AXIM_U0_ap_start = 1'b0;
wire    blur_Mat2AXIM_U0_ap_done;
wire    blur_Mat2AXIM_U0_ap_continue;
wire    blur_Mat2AXIM_U0_ap_idle;
wire    blur_Mat2AXIM_U0_ap_ready;
wire   [7:0] blur_Mat2AXIM_U0_img_data_stream_V_dout;
wire    blur_Mat2AXIM_U0_img_data_stream_V_empty_n;
wire    blur_Mat2AXIM_U0_img_data_stream_V_read;
wire    blur_Mat2AXIM_U0_m_axi_fb_AWVALID;
wire    blur_Mat2AXIM_U0_m_axi_fb_AWREADY;
wire   [31:0] blur_Mat2AXIM_U0_m_axi_fb_AWADDR;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_AWID;
wire   [31:0] blur_Mat2AXIM_U0_m_axi_fb_AWLEN;
wire   [2:0] blur_Mat2AXIM_U0_m_axi_fb_AWSIZE;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_AWBURST;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_AWLOCK;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_AWCACHE;
wire   [2:0] blur_Mat2AXIM_U0_m_axi_fb_AWPROT;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_AWQOS;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_AWREGION;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_AWUSER;
wire    blur_Mat2AXIM_U0_m_axi_fb_WVALID;
wire    blur_Mat2AXIM_U0_m_axi_fb_WREADY;
wire   [7:0] blur_Mat2AXIM_U0_m_axi_fb_WDATA;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_WSTRB;
wire    blur_Mat2AXIM_U0_m_axi_fb_WLAST;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_WID;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_WUSER;
wire    blur_Mat2AXIM_U0_m_axi_fb_ARVALID;
wire    blur_Mat2AXIM_U0_m_axi_fb_ARREADY;
wire   [31:0] blur_Mat2AXIM_U0_m_axi_fb_ARADDR;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_ARID;
wire   [31:0] blur_Mat2AXIM_U0_m_axi_fb_ARLEN;
wire   [2:0] blur_Mat2AXIM_U0_m_axi_fb_ARSIZE;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_ARBURST;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_ARLOCK;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_ARCACHE;
wire   [2:0] blur_Mat2AXIM_U0_m_axi_fb_ARPROT;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_ARQOS;
wire   [3:0] blur_Mat2AXIM_U0_m_axi_fb_ARREGION;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_ARUSER;
wire    blur_Mat2AXIM_U0_m_axi_fb_RVALID;
wire    blur_Mat2AXIM_U0_m_axi_fb_RREADY;
wire   [7:0] blur_Mat2AXIM_U0_m_axi_fb_RDATA;
wire    blur_Mat2AXIM_U0_m_axi_fb_RLAST;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_RID;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_RUSER;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_RRESP;
wire    blur_Mat2AXIM_U0_m_axi_fb_BVALID;
wire    blur_Mat2AXIM_U0_m_axi_fb_BREADY;
wire   [1:0] blur_Mat2AXIM_U0_m_axi_fb_BRESP;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_BID;
wire   [0:0] blur_Mat2AXIM_U0_m_axi_fb_BUSER;
wire   [31:0] blur_Mat2AXIM_U0_image_out_dout;
wire    blur_Mat2AXIM_U0_image_out_empty_n;
wire    blur_Mat2AXIM_U0_image_out_read;
wire    ap_sig_hs_continue;
wire    src_rows_V_channel_U_ap_dummy_ce;
wire   [11:0] src_rows_V_channel_din;
wire    src_rows_V_channel_full_n;
wire    src_rows_V_channel_write;
wire   [11:0] src_rows_V_channel_dout;
wire    src_rows_V_channel_empty_n;
wire    src_rows_V_channel_read;
wire    src_cols_V_channel_U_ap_dummy_ce;
wire   [11:0] src_cols_V_channel_din;
wire    src_cols_V_channel_full_n;
wire    src_cols_V_channel_write;
wire   [11:0] src_cols_V_channel_dout;
wire    src_cols_V_channel_empty_n;
wire    src_cols_V_channel_read;
wire    image_in_channel_U_ap_dummy_ce;
wire   [31:0] image_in_channel_din;
wire    image_in_channel_full_n;
wire    image_in_channel_write;
wire   [31:0] image_in_channel_dout;
wire    image_in_channel_empty_n;
wire    image_in_channel_read;
wire    image_out_channel_U_ap_dummy_ce;
wire   [31:0] image_out_channel_din;
wire    image_out_channel_full_n;
wire    image_out_channel_write;
wire   [31:0] image_out_channel_dout;
wire    image_out_channel_empty_n;
wire    image_out_channel_read;
wire    src_data_stream_0_V_U_ap_dummy_ce;
wire   [7:0] src_data_stream_0_V_din;
wire    src_data_stream_0_V_full_n;
wire    src_data_stream_0_V_write;
wire   [7:0] src_data_stream_0_V_dout;
wire    src_data_stream_0_V_empty_n;
wire    src_data_stream_0_V_read;
wire    src_rows_V_channel38_U_ap_dummy_ce;
wire   [11:0] src_rows_V_channel38_din;
wire    src_rows_V_channel38_full_n;
wire    src_rows_V_channel38_write;
wire   [11:0] src_rows_V_channel38_dout;
wire    src_rows_V_channel38_empty_n;
wire    src_rows_V_channel38_read;
wire    src_cols_V_channel39_U_ap_dummy_ce;
wire   [11:0] src_cols_V_channel39_din;
wire    src_cols_V_channel39_full_n;
wire    src_cols_V_channel39_write;
wire   [11:0] src_cols_V_channel39_dout;
wire    src_cols_V_channel39_empty_n;
wire    src_cols_V_channel39_read;
wire    kernel_val_0_0_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_0_0_channel_din;
wire    kernel_val_0_0_channel_write;
wire   [7:0] kernel_val_0_0_channel_dout;
wire    kernel_val_0_0_channel_empty_n;
wire    kernel_val_0_0_channel_read;
wire    kernel_val_0_1_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_0_1_channel_din;
wire    kernel_val_0_1_channel_write;
wire   [7:0] kernel_val_0_1_channel_dout;
wire    kernel_val_0_1_channel_empty_n;
wire    kernel_val_0_1_channel_read;
wire    kernel_val_0_2_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_0_2_channel_din;
wire    kernel_val_0_2_channel_write;
wire   [7:0] kernel_val_0_2_channel_dout;
wire    kernel_val_0_2_channel_empty_n;
wire    kernel_val_0_2_channel_read;
wire    kernel_val_1_0_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_1_0_channel_din;
wire    kernel_val_1_0_channel_write;
wire   [7:0] kernel_val_1_0_channel_dout;
wire    kernel_val_1_0_channel_empty_n;
wire    kernel_val_1_0_channel_read;
wire    kernel_val_1_1_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_1_1_channel_din;
wire    kernel_val_1_1_channel_write;
wire   [7:0] kernel_val_1_1_channel_dout;
wire    kernel_val_1_1_channel_empty_n;
wire    kernel_val_1_1_channel_read;
wire    kernel_val_1_2_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_1_2_channel_din;
wire    kernel_val_1_2_channel_write;
wire   [7:0] kernel_val_1_2_channel_dout;
wire    kernel_val_1_2_channel_empty_n;
wire    kernel_val_1_2_channel_read;
wire    kernel_val_2_0_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_2_0_channel_din;
wire    kernel_val_2_0_channel_write;
wire   [7:0] kernel_val_2_0_channel_dout;
wire    kernel_val_2_0_channel_empty_n;
wire    kernel_val_2_0_channel_read;
wire    kernel_val_2_1_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_2_1_channel_din;
wire    kernel_val_2_1_channel_write;
wire   [7:0] kernel_val_2_1_channel_dout;
wire    kernel_val_2_1_channel_empty_n;
wire    kernel_val_2_1_channel_read;
wire    kernel_val_2_2_channel_U_ap_dummy_ce;
wire   [7:0] kernel_val_2_2_channel_din;
wire    kernel_val_2_2_channel_write;
wire   [7:0] kernel_val_2_2_channel_dout;
wire    kernel_val_2_2_channel_empty_n;
wire    kernel_val_2_2_channel_read;
wire    dst_data_stream_0_V_U_ap_dummy_ce;
wire   [7:0] dst_data_stream_0_V_din;
wire    dst_data_stream_0_V_full_n;
wire    dst_data_stream_0_V_write;
wire   [7:0] dst_data_stream_0_V_dout;
wire    dst_data_stream_0_V_empty_n;
wire    dst_data_stream_0_V_read;
reg    ap_reg_procdone_blur_Block_proc9_U0 = 1'b0;
reg    ap_sig_hs_done;
reg    ap_reg_procdone_blur_AXIM2Mat_U0 = 1'b0;
reg    ap_reg_procdone_blur_Loop_1_proc_U0 = 1'b0;
reg    ap_reg_procdone_blur_Filter2D_U0 = 1'b0;
reg    ap_reg_procdone_blur_Mat2AXIM_U0 = 1'b0;
reg    ap_CS;
reg    ap_sig_top_allready;
reg    ap_reg_ready_blur_Block_proc9_U0_ap_ready = 1'b0;
reg    ap_sig_ready_blur_Block_proc9_U0_ap_ready;
reg    ap_sig_start_in_blur_Block_proc9_U0_ap_start;
reg    ap_reg_ready_blur_AXIM2Mat_U0_ap_ready = 1'b0;
reg    ap_sig_ready_blur_AXIM2Mat_U0_ap_ready;
reg    ap_sig_start_in_blur_AXIM2Mat_U0_ap_start;


blur_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
blur_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( blur_AXILiteS_s_axi_U_ap_dummy_ce ),
    .image_in( image_in ),
    .image_out( image_out )
);

blur_CRTL_BUS_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CRTL_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CRTL_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CRTL_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CRTL_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CRTL_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CRTL_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CRTL_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CRTL_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CRTL_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CRTL_BUS_CACHE_VALUE ))
blur_CRTL_BUS_m_axi_U(
    .AWVALID( m_axi_CRTL_BUS_AWVALID ),
    .AWREADY( m_axi_CRTL_BUS_AWREADY ),
    .AWADDR( m_axi_CRTL_BUS_AWADDR ),
    .AWID( m_axi_CRTL_BUS_AWID ),
    .AWLEN( m_axi_CRTL_BUS_AWLEN ),
    .AWSIZE( m_axi_CRTL_BUS_AWSIZE ),
    .AWBURST( m_axi_CRTL_BUS_AWBURST ),
    .AWLOCK( m_axi_CRTL_BUS_AWLOCK ),
    .AWCACHE( m_axi_CRTL_BUS_AWCACHE ),
    .AWPROT( m_axi_CRTL_BUS_AWPROT ),
    .AWQOS( m_axi_CRTL_BUS_AWQOS ),
    .AWREGION( m_axi_CRTL_BUS_AWREGION ),
    .AWUSER( m_axi_CRTL_BUS_AWUSER ),
    .WVALID( m_axi_CRTL_BUS_WVALID ),
    .WREADY( m_axi_CRTL_BUS_WREADY ),
    .WDATA( m_axi_CRTL_BUS_WDATA ),
    .WSTRB( m_axi_CRTL_BUS_WSTRB ),
    .WLAST( m_axi_CRTL_BUS_WLAST ),
    .WID( m_axi_CRTL_BUS_WID ),
    .WUSER( m_axi_CRTL_BUS_WUSER ),
    .ARVALID( m_axi_CRTL_BUS_ARVALID ),
    .ARREADY( m_axi_CRTL_BUS_ARREADY ),
    .ARADDR( m_axi_CRTL_BUS_ARADDR ),
    .ARID( m_axi_CRTL_BUS_ARID ),
    .ARLEN( m_axi_CRTL_BUS_ARLEN ),
    .ARSIZE( m_axi_CRTL_BUS_ARSIZE ),
    .ARBURST( m_axi_CRTL_BUS_ARBURST ),
    .ARLOCK( m_axi_CRTL_BUS_ARLOCK ),
    .ARCACHE( m_axi_CRTL_BUS_ARCACHE ),
    .ARPROT( m_axi_CRTL_BUS_ARPROT ),
    .ARQOS( m_axi_CRTL_BUS_ARQOS ),
    .ARREGION( m_axi_CRTL_BUS_ARREGION ),
    .ARUSER( m_axi_CRTL_BUS_ARUSER ),
    .RVALID( m_axi_CRTL_BUS_RVALID ),
    .RREADY( m_axi_CRTL_BUS_RREADY ),
    .RDATA( m_axi_CRTL_BUS_RDATA ),
    .RLAST( m_axi_CRTL_BUS_RLAST ),
    .RID( m_axi_CRTL_BUS_RID ),
    .RUSER( m_axi_CRTL_BUS_RUSER ),
    .RRESP( m_axi_CRTL_BUS_RRESP ),
    .BVALID( m_axi_CRTL_BUS_BVALID ),
    .BREADY( m_axi_CRTL_BUS_BREADY ),
    .BRESP( m_axi_CRTL_BUS_BRESP ),
    .BID( m_axi_CRTL_BUS_BID ),
    .BUSER( m_axi_CRTL_BUS_BUSER ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( blur_CRTL_BUS_m_axi_U_ap_dummy_ce ),
    .I_ARVALID( CRTL_BUS_ARVALID ),
    .I_ARREADY( CRTL_BUS_ARREADY ),
    .I_ARADDR( CRTL_BUS_ARADDR ),
    .I_ARID( CRTL_BUS_ARID ),
    .I_ARLEN( CRTL_BUS_ARLEN ),
    .I_ARSIZE( CRTL_BUS_ARSIZE ),
    .I_ARLOCK( CRTL_BUS_ARLOCK ),
    .I_ARCACHE( CRTL_BUS_ARCACHE ),
    .I_ARQOS( CRTL_BUS_ARQOS ),
    .I_ARPROT( CRTL_BUS_ARPROT ),
    .I_ARUSER( CRTL_BUS_ARUSER ),
    .I_ARBURST( CRTL_BUS_ARBURST ),
    .I_ARREGION( CRTL_BUS_ARREGION ),
    .I_RVALID( CRTL_BUS_RVALID ),
    .I_RREADY( CRTL_BUS_RREADY ),
    .I_RDATA( CRTL_BUS_RDATA ),
    .I_RID( CRTL_BUS_RID ),
    .I_RUSER( CRTL_BUS_RUSER ),
    .I_RRESP( CRTL_BUS_RRESP ),
    .I_RLAST( CRTL_BUS_RLAST ),
    .I_AWVALID( CRTL_BUS_AWVALID ),
    .I_AWREADY( CRTL_BUS_AWREADY ),
    .I_AWADDR( CRTL_BUS_AWADDR ),
    .I_AWID( CRTL_BUS_AWID ),
    .I_AWLEN( CRTL_BUS_AWLEN ),
    .I_AWSIZE( CRTL_BUS_AWSIZE ),
    .I_AWLOCK( CRTL_BUS_AWLOCK ),
    .I_AWCACHE( CRTL_BUS_AWCACHE ),
    .I_AWQOS( CRTL_BUS_AWQOS ),
    .I_AWPROT( CRTL_BUS_AWPROT ),
    .I_AWUSER( CRTL_BUS_AWUSER ),
    .I_AWBURST( CRTL_BUS_AWBURST ),
    .I_AWREGION( CRTL_BUS_AWREGION ),
    .I_WVALID( CRTL_BUS_WVALID ),
    .I_WREADY( CRTL_BUS_WREADY ),
    .I_WDATA( CRTL_BUS_WDATA ),
    .I_WID( CRTL_BUS_WID ),
    .I_WUSER( CRTL_BUS_WUSER ),
    .I_WLAST( CRTL_BUS_WLAST ),
    .I_WSTRB( CRTL_BUS_WSTRB ),
    .I_BVALID( CRTL_BUS_BVALID ),
    .I_BREADY( CRTL_BUS_BREADY ),
    .I_BRESP( CRTL_BUS_BRESP ),
    .I_BID( CRTL_BUS_BID ),
    .I_BUSER( CRTL_BUS_BUSER )
);

blur_Block_proc9 blur_Block_proc9_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( blur_Block_proc9_U0_ap_start ),
    .ap_done( blur_Block_proc9_U0_ap_done ),
    .ap_continue( blur_Block_proc9_U0_ap_continue ),
    .ap_idle( blur_Block_proc9_U0_ap_idle ),
    .ap_ready( blur_Block_proc9_U0_ap_ready ),
    .src_rows_V_out_din( blur_Block_proc9_U0_src_rows_V_out_din ),
    .src_rows_V_out_full_n( blur_Block_proc9_U0_src_rows_V_out_full_n ),
    .src_rows_V_out_write( blur_Block_proc9_U0_src_rows_V_out_write ),
    .src_cols_V_out_din( blur_Block_proc9_U0_src_cols_V_out_din ),
    .src_cols_V_out_full_n( blur_Block_proc9_U0_src_cols_V_out_full_n ),
    .src_cols_V_out_write( blur_Block_proc9_U0_src_cols_V_out_write ),
    .image_in( blur_Block_proc9_U0_image_in ),
    .image_out( blur_Block_proc9_U0_image_out ),
    .image_in_out_din( blur_Block_proc9_U0_image_in_out_din ),
    .image_in_out_full_n( blur_Block_proc9_U0_image_in_out_full_n ),
    .image_in_out_write( blur_Block_proc9_U0_image_in_out_write ),
    .image_out_out_din( blur_Block_proc9_U0_image_out_out_din ),
    .image_out_out_full_n( blur_Block_proc9_U0_image_out_out_full_n ),
    .image_out_out_write( blur_Block_proc9_U0_image_out_out_write )
);

blur_AXIM2Mat blur_AXIM2Mat_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( blur_AXIM2Mat_U0_ap_start ),
    .ap_done( blur_AXIM2Mat_U0_ap_done ),
    .ap_continue( blur_AXIM2Mat_U0_ap_continue ),
    .ap_idle( blur_AXIM2Mat_U0_ap_idle ),
    .ap_ready( blur_AXIM2Mat_U0_ap_ready ),
    .m_axi_fb_AWVALID( blur_AXIM2Mat_U0_m_axi_fb_AWVALID ),
    .m_axi_fb_AWREADY( blur_AXIM2Mat_U0_m_axi_fb_AWREADY ),
    .m_axi_fb_AWADDR( blur_AXIM2Mat_U0_m_axi_fb_AWADDR ),
    .m_axi_fb_AWID( blur_AXIM2Mat_U0_m_axi_fb_AWID ),
    .m_axi_fb_AWLEN( blur_AXIM2Mat_U0_m_axi_fb_AWLEN ),
    .m_axi_fb_AWSIZE( blur_AXIM2Mat_U0_m_axi_fb_AWSIZE ),
    .m_axi_fb_AWBURST( blur_AXIM2Mat_U0_m_axi_fb_AWBURST ),
    .m_axi_fb_AWLOCK( blur_AXIM2Mat_U0_m_axi_fb_AWLOCK ),
    .m_axi_fb_AWCACHE( blur_AXIM2Mat_U0_m_axi_fb_AWCACHE ),
    .m_axi_fb_AWPROT( blur_AXIM2Mat_U0_m_axi_fb_AWPROT ),
    .m_axi_fb_AWQOS( blur_AXIM2Mat_U0_m_axi_fb_AWQOS ),
    .m_axi_fb_AWREGION( blur_AXIM2Mat_U0_m_axi_fb_AWREGION ),
    .m_axi_fb_AWUSER( blur_AXIM2Mat_U0_m_axi_fb_AWUSER ),
    .m_axi_fb_WVALID( blur_AXIM2Mat_U0_m_axi_fb_WVALID ),
    .m_axi_fb_WREADY( blur_AXIM2Mat_U0_m_axi_fb_WREADY ),
    .m_axi_fb_WDATA( blur_AXIM2Mat_U0_m_axi_fb_WDATA ),
    .m_axi_fb_WSTRB( blur_AXIM2Mat_U0_m_axi_fb_WSTRB ),
    .m_axi_fb_WLAST( blur_AXIM2Mat_U0_m_axi_fb_WLAST ),
    .m_axi_fb_WID( blur_AXIM2Mat_U0_m_axi_fb_WID ),
    .m_axi_fb_WUSER( blur_AXIM2Mat_U0_m_axi_fb_WUSER ),
    .m_axi_fb_ARVALID( blur_AXIM2Mat_U0_m_axi_fb_ARVALID ),
    .m_axi_fb_ARREADY( blur_AXIM2Mat_U0_m_axi_fb_ARREADY ),
    .m_axi_fb_ARADDR( blur_AXIM2Mat_U0_m_axi_fb_ARADDR ),
    .m_axi_fb_ARID( blur_AXIM2Mat_U0_m_axi_fb_ARID ),
    .m_axi_fb_ARLEN( blur_AXIM2Mat_U0_m_axi_fb_ARLEN ),
    .m_axi_fb_ARSIZE( blur_AXIM2Mat_U0_m_axi_fb_ARSIZE ),
    .m_axi_fb_ARBURST( blur_AXIM2Mat_U0_m_axi_fb_ARBURST ),
    .m_axi_fb_ARLOCK( blur_AXIM2Mat_U0_m_axi_fb_ARLOCK ),
    .m_axi_fb_ARCACHE( blur_AXIM2Mat_U0_m_axi_fb_ARCACHE ),
    .m_axi_fb_ARPROT( blur_AXIM2Mat_U0_m_axi_fb_ARPROT ),
    .m_axi_fb_ARQOS( blur_AXIM2Mat_U0_m_axi_fb_ARQOS ),
    .m_axi_fb_ARREGION( blur_AXIM2Mat_U0_m_axi_fb_ARREGION ),
    .m_axi_fb_ARUSER( blur_AXIM2Mat_U0_m_axi_fb_ARUSER ),
    .m_axi_fb_RVALID( blur_AXIM2Mat_U0_m_axi_fb_RVALID ),
    .m_axi_fb_RREADY( blur_AXIM2Mat_U0_m_axi_fb_RREADY ),
    .m_axi_fb_RDATA( blur_AXIM2Mat_U0_m_axi_fb_RDATA ),
    .m_axi_fb_RLAST( blur_AXIM2Mat_U0_m_axi_fb_RLAST ),
    .m_axi_fb_RID( blur_AXIM2Mat_U0_m_axi_fb_RID ),
    .m_axi_fb_RUSER( blur_AXIM2Mat_U0_m_axi_fb_RUSER ),
    .m_axi_fb_RRESP( blur_AXIM2Mat_U0_m_axi_fb_RRESP ),
    .m_axi_fb_BVALID( blur_AXIM2Mat_U0_m_axi_fb_BVALID ),
    .m_axi_fb_BREADY( blur_AXIM2Mat_U0_m_axi_fb_BREADY ),
    .m_axi_fb_BRESP( blur_AXIM2Mat_U0_m_axi_fb_BRESP ),
    .m_axi_fb_BID( blur_AXIM2Mat_U0_m_axi_fb_BID ),
    .m_axi_fb_BUSER( blur_AXIM2Mat_U0_m_axi_fb_BUSER ),
    .image_in_dout( blur_AXIM2Mat_U0_image_in_dout ),
    .image_in_empty_n( blur_AXIM2Mat_U0_image_in_empty_n ),
    .image_in_read( blur_AXIM2Mat_U0_image_in_read ),
    .img_rows_V_dout( blur_AXIM2Mat_U0_img_rows_V_dout ),
    .img_rows_V_empty_n( blur_AXIM2Mat_U0_img_rows_V_empty_n ),
    .img_rows_V_read( blur_AXIM2Mat_U0_img_rows_V_read ),
    .img_cols_V_dout( blur_AXIM2Mat_U0_img_cols_V_dout ),
    .img_cols_V_empty_n( blur_AXIM2Mat_U0_img_cols_V_empty_n ),
    .img_cols_V_read( blur_AXIM2Mat_U0_img_cols_V_read ),
    .img_data_stream_V_din( blur_AXIM2Mat_U0_img_data_stream_V_din ),
    .img_data_stream_V_full_n( blur_AXIM2Mat_U0_img_data_stream_V_full_n ),
    .img_data_stream_V_write( blur_AXIM2Mat_U0_img_data_stream_V_write ),
    .img_rows_V_out_din( blur_AXIM2Mat_U0_img_rows_V_out_din ),
    .img_rows_V_out_full_n( blur_AXIM2Mat_U0_img_rows_V_out_full_n ),
    .img_rows_V_out_write( blur_AXIM2Mat_U0_img_rows_V_out_write ),
    .img_cols_V_out_din( blur_AXIM2Mat_U0_img_cols_V_out_din ),
    .img_cols_V_out_full_n( blur_AXIM2Mat_U0_img_cols_V_out_full_n ),
    .img_cols_V_out_write( blur_AXIM2Mat_U0_img_cols_V_out_write )
);

blur_Loop_1_proc blur_Loop_1_proc_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( blur_Loop_1_proc_U0_ap_start ),
    .ap_done( blur_Loop_1_proc_U0_ap_done ),
    .ap_continue( blur_Loop_1_proc_U0_ap_continue ),
    .ap_idle( blur_Loop_1_proc_U0_ap_idle ),
    .ap_ready( blur_Loop_1_proc_U0_ap_ready ),
    .ap_return_0( blur_Loop_1_proc_U0_ap_return_0 ),
    .ap_return_1( blur_Loop_1_proc_U0_ap_return_1 ),
    .ap_return_2( blur_Loop_1_proc_U0_ap_return_2 ),
    .ap_return_3( blur_Loop_1_proc_U0_ap_return_3 ),
    .ap_return_4( blur_Loop_1_proc_U0_ap_return_4 ),
    .ap_return_5( blur_Loop_1_proc_U0_ap_return_5 ),
    .ap_return_6( blur_Loop_1_proc_U0_ap_return_6 ),
    .ap_return_7( blur_Loop_1_proc_U0_ap_return_7 ),
    .ap_return_8( blur_Loop_1_proc_U0_ap_return_8 )
);

blur_Filter2D blur_Filter2D_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( blur_Filter2D_U0_ap_start ),
    .ap_done( blur_Filter2D_U0_ap_done ),
    .ap_continue( blur_Filter2D_U0_ap_continue ),
    .ap_idle( blur_Filter2D_U0_ap_idle ),
    .ap_ready( blur_Filter2D_U0_ap_ready ),
    .p_src_rows_V_dout( blur_Filter2D_U0_p_src_rows_V_dout ),
    .p_src_rows_V_empty_n( blur_Filter2D_U0_p_src_rows_V_empty_n ),
    .p_src_rows_V_read( blur_Filter2D_U0_p_src_rows_V_read ),
    .p_src_cols_V_dout( blur_Filter2D_U0_p_src_cols_V_dout ),
    .p_src_cols_V_empty_n( blur_Filter2D_U0_p_src_cols_V_empty_n ),
    .p_src_cols_V_read( blur_Filter2D_U0_p_src_cols_V_read ),
    .p_src_data_stream_V_dout( blur_Filter2D_U0_p_src_data_stream_V_dout ),
    .p_src_data_stream_V_empty_n( blur_Filter2D_U0_p_src_data_stream_V_empty_n ),
    .p_src_data_stream_V_read( blur_Filter2D_U0_p_src_data_stream_V_read ),
    .p_dst_data_stream_V_din( blur_Filter2D_U0_p_dst_data_stream_V_din ),
    .p_dst_data_stream_V_full_n( blur_Filter2D_U0_p_dst_data_stream_V_full_n ),
    .p_dst_data_stream_V_write( blur_Filter2D_U0_p_dst_data_stream_V_write ),
    .p_kernel_val_0_0_read( blur_Filter2D_U0_p_kernel_val_0_0_read ),
    .p_kernel_val_0_1_read( blur_Filter2D_U0_p_kernel_val_0_1_read ),
    .p_kernel_val_0_2_read( blur_Filter2D_U0_p_kernel_val_0_2_read ),
    .p_kernel_val_1_0_read( blur_Filter2D_U0_p_kernel_val_1_0_read ),
    .p_kernel_val_1_1_read( blur_Filter2D_U0_p_kernel_val_1_1_read ),
    .p_kernel_val_1_2_read( blur_Filter2D_U0_p_kernel_val_1_2_read ),
    .p_kernel_val_2_0_read( blur_Filter2D_U0_p_kernel_val_2_0_read ),
    .p_kernel_val_2_1_read( blur_Filter2D_U0_p_kernel_val_2_1_read ),
    .p_kernel_val_2_2_read( blur_Filter2D_U0_p_kernel_val_2_2_read )
);

blur_Mat2AXIM blur_Mat2AXIM_U0(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( blur_Mat2AXIM_U0_ap_start ),
    .ap_done( blur_Mat2AXIM_U0_ap_done ),
    .ap_continue( blur_Mat2AXIM_U0_ap_continue ),
    .ap_idle( blur_Mat2AXIM_U0_ap_idle ),
    .ap_ready( blur_Mat2AXIM_U0_ap_ready ),
    .img_data_stream_V_dout( blur_Mat2AXIM_U0_img_data_stream_V_dout ),
    .img_data_stream_V_empty_n( blur_Mat2AXIM_U0_img_data_stream_V_empty_n ),
    .img_data_stream_V_read( blur_Mat2AXIM_U0_img_data_stream_V_read ),
    .m_axi_fb_AWVALID( blur_Mat2AXIM_U0_m_axi_fb_AWVALID ),
    .m_axi_fb_AWREADY( blur_Mat2AXIM_U0_m_axi_fb_AWREADY ),
    .m_axi_fb_AWADDR( blur_Mat2AXIM_U0_m_axi_fb_AWADDR ),
    .m_axi_fb_AWID( blur_Mat2AXIM_U0_m_axi_fb_AWID ),
    .m_axi_fb_AWLEN( blur_Mat2AXIM_U0_m_axi_fb_AWLEN ),
    .m_axi_fb_AWSIZE( blur_Mat2AXIM_U0_m_axi_fb_AWSIZE ),
    .m_axi_fb_AWBURST( blur_Mat2AXIM_U0_m_axi_fb_AWBURST ),
    .m_axi_fb_AWLOCK( blur_Mat2AXIM_U0_m_axi_fb_AWLOCK ),
    .m_axi_fb_AWCACHE( blur_Mat2AXIM_U0_m_axi_fb_AWCACHE ),
    .m_axi_fb_AWPROT( blur_Mat2AXIM_U0_m_axi_fb_AWPROT ),
    .m_axi_fb_AWQOS( blur_Mat2AXIM_U0_m_axi_fb_AWQOS ),
    .m_axi_fb_AWREGION( blur_Mat2AXIM_U0_m_axi_fb_AWREGION ),
    .m_axi_fb_AWUSER( blur_Mat2AXIM_U0_m_axi_fb_AWUSER ),
    .m_axi_fb_WVALID( blur_Mat2AXIM_U0_m_axi_fb_WVALID ),
    .m_axi_fb_WREADY( blur_Mat2AXIM_U0_m_axi_fb_WREADY ),
    .m_axi_fb_WDATA( blur_Mat2AXIM_U0_m_axi_fb_WDATA ),
    .m_axi_fb_WSTRB( blur_Mat2AXIM_U0_m_axi_fb_WSTRB ),
    .m_axi_fb_WLAST( blur_Mat2AXIM_U0_m_axi_fb_WLAST ),
    .m_axi_fb_WID( blur_Mat2AXIM_U0_m_axi_fb_WID ),
    .m_axi_fb_WUSER( blur_Mat2AXIM_U0_m_axi_fb_WUSER ),
    .m_axi_fb_ARVALID( blur_Mat2AXIM_U0_m_axi_fb_ARVALID ),
    .m_axi_fb_ARREADY( blur_Mat2AXIM_U0_m_axi_fb_ARREADY ),
    .m_axi_fb_ARADDR( blur_Mat2AXIM_U0_m_axi_fb_ARADDR ),
    .m_axi_fb_ARID( blur_Mat2AXIM_U0_m_axi_fb_ARID ),
    .m_axi_fb_ARLEN( blur_Mat2AXIM_U0_m_axi_fb_ARLEN ),
    .m_axi_fb_ARSIZE( blur_Mat2AXIM_U0_m_axi_fb_ARSIZE ),
    .m_axi_fb_ARBURST( blur_Mat2AXIM_U0_m_axi_fb_ARBURST ),
    .m_axi_fb_ARLOCK( blur_Mat2AXIM_U0_m_axi_fb_ARLOCK ),
    .m_axi_fb_ARCACHE( blur_Mat2AXIM_U0_m_axi_fb_ARCACHE ),
    .m_axi_fb_ARPROT( blur_Mat2AXIM_U0_m_axi_fb_ARPROT ),
    .m_axi_fb_ARQOS( blur_Mat2AXIM_U0_m_axi_fb_ARQOS ),
    .m_axi_fb_ARREGION( blur_Mat2AXIM_U0_m_axi_fb_ARREGION ),
    .m_axi_fb_ARUSER( blur_Mat2AXIM_U0_m_axi_fb_ARUSER ),
    .m_axi_fb_RVALID( blur_Mat2AXIM_U0_m_axi_fb_RVALID ),
    .m_axi_fb_RREADY( blur_Mat2AXIM_U0_m_axi_fb_RREADY ),
    .m_axi_fb_RDATA( blur_Mat2AXIM_U0_m_axi_fb_RDATA ),
    .m_axi_fb_RLAST( blur_Mat2AXIM_U0_m_axi_fb_RLAST ),
    .m_axi_fb_RID( blur_Mat2AXIM_U0_m_axi_fb_RID ),
    .m_axi_fb_RUSER( blur_Mat2AXIM_U0_m_axi_fb_RUSER ),
    .m_axi_fb_RRESP( blur_Mat2AXIM_U0_m_axi_fb_RRESP ),
    .m_axi_fb_BVALID( blur_Mat2AXIM_U0_m_axi_fb_BVALID ),
    .m_axi_fb_BREADY( blur_Mat2AXIM_U0_m_axi_fb_BREADY ),
    .m_axi_fb_BRESP( blur_Mat2AXIM_U0_m_axi_fb_BRESP ),
    .m_axi_fb_BID( blur_Mat2AXIM_U0_m_axi_fb_BID ),
    .m_axi_fb_BUSER( blur_Mat2AXIM_U0_m_axi_fb_BUSER ),
    .image_out_dout( blur_Mat2AXIM_U0_image_out_dout ),
    .image_out_empty_n( blur_Mat2AXIM_U0_image_out_empty_n ),
    .image_out_read( blur_Mat2AXIM_U0_image_out_read )
);

FIFO_blur_src_rows_V_channel src_rows_V_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( src_rows_V_channel_U_ap_dummy_ce ),
    .if_write_ce( src_rows_V_channel_U_ap_dummy_ce ),
    .if_din( src_rows_V_channel_din ),
    .if_full_n( src_rows_V_channel_full_n ),
    .if_write( src_rows_V_channel_write ),
    .if_dout( src_rows_V_channel_dout ),
    .if_empty_n( src_rows_V_channel_empty_n ),
    .if_read( src_rows_V_channel_read )
);

FIFO_blur_src_cols_V_channel src_cols_V_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( src_cols_V_channel_U_ap_dummy_ce ),
    .if_write_ce( src_cols_V_channel_U_ap_dummy_ce ),
    .if_din( src_cols_V_channel_din ),
    .if_full_n( src_cols_V_channel_full_n ),
    .if_write( src_cols_V_channel_write ),
    .if_dout( src_cols_V_channel_dout ),
    .if_empty_n( src_cols_V_channel_empty_n ),
    .if_read( src_cols_V_channel_read )
);

FIFO_blur_image_in_channel image_in_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( image_in_channel_U_ap_dummy_ce ),
    .if_write_ce( image_in_channel_U_ap_dummy_ce ),
    .if_din( image_in_channel_din ),
    .if_full_n( image_in_channel_full_n ),
    .if_write( image_in_channel_write ),
    .if_dout( image_in_channel_dout ),
    .if_empty_n( image_in_channel_empty_n ),
    .if_read( image_in_channel_read )
);

FIFO_blur_image_out_channel image_out_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( image_out_channel_U_ap_dummy_ce ),
    .if_write_ce( image_out_channel_U_ap_dummy_ce ),
    .if_din( image_out_channel_din ),
    .if_full_n( image_out_channel_full_n ),
    .if_write( image_out_channel_write ),
    .if_dout( image_out_channel_dout ),
    .if_empty_n( image_out_channel_empty_n ),
    .if_read( image_out_channel_read )
);

FIFO_blur_src_data_stream_0_V src_data_stream_0_V_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( src_data_stream_0_V_U_ap_dummy_ce ),
    .if_write_ce( src_data_stream_0_V_U_ap_dummy_ce ),
    .if_din( src_data_stream_0_V_din ),
    .if_full_n( src_data_stream_0_V_full_n ),
    .if_write( src_data_stream_0_V_write ),
    .if_dout( src_data_stream_0_V_dout ),
    .if_empty_n( src_data_stream_0_V_empty_n ),
    .if_read( src_data_stream_0_V_read )
);

FIFO_blur_src_rows_V_channel38 src_rows_V_channel38_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( src_rows_V_channel38_U_ap_dummy_ce ),
    .if_write_ce( src_rows_V_channel38_U_ap_dummy_ce ),
    .if_din( src_rows_V_channel38_din ),
    .if_full_n( src_rows_V_channel38_full_n ),
    .if_write( src_rows_V_channel38_write ),
    .if_dout( src_rows_V_channel38_dout ),
    .if_empty_n( src_rows_V_channel38_empty_n ),
    .if_read( src_rows_V_channel38_read )
);

FIFO_blur_src_cols_V_channel39 src_cols_V_channel39_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( src_cols_V_channel39_U_ap_dummy_ce ),
    .if_write_ce( src_cols_V_channel39_U_ap_dummy_ce ),
    .if_din( src_cols_V_channel39_din ),
    .if_full_n( src_cols_V_channel39_full_n ),
    .if_write( src_cols_V_channel39_write ),
    .if_dout( src_cols_V_channel39_dout ),
    .if_empty_n( src_cols_V_channel39_empty_n ),
    .if_read( src_cols_V_channel39_read )
);

FIFO_blur_kernel_val_0_0_channel kernel_val_0_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_0_0_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_0_0_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_0_0_channel_din ),
    .if_full_n( kernel_val_0_0_channel_full_n ),
    .if_write( kernel_val_0_0_channel_write ),
    .if_dout( kernel_val_0_0_channel_dout ),
    .if_empty_n( kernel_val_0_0_channel_empty_n ),
    .if_read( kernel_val_0_0_channel_read )
);

FIFO_blur_kernel_val_0_1_channel kernel_val_0_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_0_1_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_0_1_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_0_1_channel_din ),
    .if_full_n( kernel_val_0_1_channel_full_n ),
    .if_write( kernel_val_0_1_channel_write ),
    .if_dout( kernel_val_0_1_channel_dout ),
    .if_empty_n( kernel_val_0_1_channel_empty_n ),
    .if_read( kernel_val_0_1_channel_read )
);

FIFO_blur_kernel_val_0_2_channel kernel_val_0_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_0_2_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_0_2_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_0_2_channel_din ),
    .if_full_n( kernel_val_0_2_channel_full_n ),
    .if_write( kernel_val_0_2_channel_write ),
    .if_dout( kernel_val_0_2_channel_dout ),
    .if_empty_n( kernel_val_0_2_channel_empty_n ),
    .if_read( kernel_val_0_2_channel_read )
);

FIFO_blur_kernel_val_1_0_channel kernel_val_1_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_1_0_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_1_0_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_1_0_channel_din ),
    .if_full_n( kernel_val_1_0_channel_full_n ),
    .if_write( kernel_val_1_0_channel_write ),
    .if_dout( kernel_val_1_0_channel_dout ),
    .if_empty_n( kernel_val_1_0_channel_empty_n ),
    .if_read( kernel_val_1_0_channel_read )
);

FIFO_blur_kernel_val_1_1_channel kernel_val_1_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_1_1_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_1_1_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_1_1_channel_din ),
    .if_full_n( kernel_val_1_1_channel_full_n ),
    .if_write( kernel_val_1_1_channel_write ),
    .if_dout( kernel_val_1_1_channel_dout ),
    .if_empty_n( kernel_val_1_1_channel_empty_n ),
    .if_read( kernel_val_1_1_channel_read )
);

FIFO_blur_kernel_val_1_2_channel kernel_val_1_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_1_2_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_1_2_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_1_2_channel_din ),
    .if_full_n( kernel_val_1_2_channel_full_n ),
    .if_write( kernel_val_1_2_channel_write ),
    .if_dout( kernel_val_1_2_channel_dout ),
    .if_empty_n( kernel_val_1_2_channel_empty_n ),
    .if_read( kernel_val_1_2_channel_read )
);

FIFO_blur_kernel_val_2_0_channel kernel_val_2_0_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_2_0_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_2_0_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_2_0_channel_din ),
    .if_full_n( kernel_val_2_0_channel_full_n ),
    .if_write( kernel_val_2_0_channel_write ),
    .if_dout( kernel_val_2_0_channel_dout ),
    .if_empty_n( kernel_val_2_0_channel_empty_n ),
    .if_read( kernel_val_2_0_channel_read )
);

FIFO_blur_kernel_val_2_1_channel kernel_val_2_1_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_2_1_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_2_1_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_2_1_channel_din ),
    .if_full_n( kernel_val_2_1_channel_full_n ),
    .if_write( kernel_val_2_1_channel_write ),
    .if_dout( kernel_val_2_1_channel_dout ),
    .if_empty_n( kernel_val_2_1_channel_empty_n ),
    .if_read( kernel_val_2_1_channel_read )
);

FIFO_blur_kernel_val_2_2_channel kernel_val_2_2_channel_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( kernel_val_2_2_channel_U_ap_dummy_ce ),
    .if_write_ce( kernel_val_2_2_channel_U_ap_dummy_ce ),
    .if_din( kernel_val_2_2_channel_din ),
    .if_full_n( kernel_val_2_2_channel_full_n ),
    .if_write( kernel_val_2_2_channel_write ),
    .if_dout( kernel_val_2_2_channel_dout ),
    .if_empty_n( kernel_val_2_2_channel_empty_n ),
    .if_read( kernel_val_2_2_channel_read )
);

FIFO_blur_dst_data_stream_0_V dst_data_stream_0_V_U(
    .clk( ap_clk ),
    .reset( ap_rst_n_inv ),
    .if_read_ce( dst_data_stream_0_V_U_ap_dummy_ce ),
    .if_write_ce( dst_data_stream_0_V_U_ap_dummy_ce ),
    .if_din( dst_data_stream_0_V_din ),
    .if_full_n( dst_data_stream_0_V_full_n ),
    .if_write( dst_data_stream_0_V_write ),
    .if_dout( dst_data_stream_0_V_dout ),
    .if_empty_n( dst_data_stream_0_V_empty_n ),
    .if_read( dst_data_stream_0_V_read )
);



always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_blur_AXIM2Mat_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_AXIM2Mat_U0_ap_done)) begin
            ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_blur_Block_proc9_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_Block_proc9_U0_ap_done)) begin
            ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_blur_Filter2D_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_Filter2D_U0_ap_done)) begin
            ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_blur_Loop_1_proc_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done)) begin
            ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_procdone_blur_Mat2AXIM_U0
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_hs_done)) begin
            ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_Mat2AXIM_U0_ap_done)) begin
            ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_blur_AXIM2Mat_U0_ap_ready
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_AXIM2Mat_U0_ap_ready)) begin
            ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_blur_Block_proc9_U0_ap_ready
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_top_allready))) begin
            ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == blur_Block_proc9_U0_ap_ready)) begin
            ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_0_0_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_0_0_channel_full_n))) begin
            ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_0_1_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_0_1_channel_full_n))) begin
            ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_0_2_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_0_2_channel_full_n))) begin
            ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_1_0_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_1_0_channel_full_n))) begin
            ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_1_1_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_1_1_channel_full_n))) begin
            ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_1_2_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_1_2_channel_full_n))) begin
            ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_2_0_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_2_0_channel_full_n))) begin
            ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_2_1_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_2_1_channel_full_n))) begin
            ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ready_kernel_val_2_2_channel_full_n
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_continue))) begin
            ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == blur_Loop_1_proc_U0_ap_done) & (ap_const_logic_1 == kernel_val_2_2_channel_full_n))) begin
            ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_blur_Mat2AXIM_U0_ap_start
    if (ap_rst_n_inv == 1'b1) begin
        blur_Mat2AXIM_U0_ap_start <= ap_const_logic_0;
    end else begin
        blur_Mat2AXIM_U0_ap_start <= ap_const_logic_1;
    end
end

always @ (posedge ap_clk) begin
    ap_CS <= ap_const_logic_0;
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_0_0_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_0_0_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_0_1_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_0_1_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_0_2_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_0_2_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_1_0_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_1_0_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_1_1_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_1_1_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_1_2_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_1_2_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_2_0_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_2_0_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_2_1_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_2_1_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Loop_1_proc_U0_ap_done or ap_reg_ready_kernel_val_2_2_channel_full_n) begin
    if ((ap_const_logic_1 == ap_reg_ready_kernel_val_2_2_channel_full_n)) begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel = ap_const_logic_0;
    end else begin
        ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel = blur_Loop_1_proc_U0_ap_done;
    end
end

always @ (blur_Block_proc9_U0_ap_idle or blur_AXIM2Mat_U0_ap_idle or blur_Loop_1_proc_U0_ap_idle or blur_Filter2D_U0_ap_idle or blur_Mat2AXIM_U0_ap_idle or kernel_val_0_0_channel_empty_n or kernel_val_0_1_channel_empty_n or kernel_val_0_2_channel_empty_n or kernel_val_1_0_channel_empty_n or kernel_val_1_1_channel_empty_n or kernel_val_1_2_channel_empty_n or kernel_val_2_0_channel_empty_n or kernel_val_2_1_channel_empty_n or kernel_val_2_2_channel_empty_n) begin
    if (((ap_const_logic_1 == blur_Block_proc9_U0_ap_idle) & (ap_const_logic_1 == blur_AXIM2Mat_U0_ap_idle) & (ap_const_logic_1 == blur_Loop_1_proc_U0_ap_idle) & (ap_const_logic_1 == blur_Filter2D_U0_ap_idle) & (ap_const_logic_1 == blur_Mat2AXIM_U0_ap_idle) & (ap_const_logic_0 == kernel_val_0_0_channel_empty_n) & (ap_const_logic_0 == kernel_val_0_1_channel_empty_n) & (ap_const_logic_0 == kernel_val_0_2_channel_empty_n) & (ap_const_logic_0 == kernel_val_1_0_channel_empty_n) & (ap_const_logic_0 == kernel_val_1_1_channel_empty_n) & (ap_const_logic_0 == kernel_val_1_2_channel_empty_n) & (ap_const_logic_0 == kernel_val_2_0_channel_empty_n) & (ap_const_logic_0 == kernel_val_2_1_channel_empty_n) & (ap_const_logic_0 == kernel_val_2_2_channel_empty_n))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (blur_Mat2AXIM_U0_ap_done) begin
    if ((ap_const_logic_1 == blur_Mat2AXIM_U0_ap_done)) begin
        ap_sig_hs_done = ap_const_logic_1;
    end else begin
        ap_sig_hs_done = ap_const_logic_0;
    end
end

always @ (blur_AXIM2Mat_U0_ap_ready or ap_reg_ready_blur_AXIM2Mat_U0_ap_ready) begin
    if ((ap_const_logic_0 == ap_reg_ready_blur_AXIM2Mat_U0_ap_ready)) begin
        ap_sig_ready_blur_AXIM2Mat_U0_ap_ready = blur_AXIM2Mat_U0_ap_ready;
    end else begin
        ap_sig_ready_blur_AXIM2Mat_U0_ap_ready = ap_const_logic_1;
    end
end

always @ (blur_Block_proc9_U0_ap_ready or ap_reg_ready_blur_Block_proc9_U0_ap_ready) begin
    if ((ap_const_logic_0 == ap_reg_ready_blur_Block_proc9_U0_ap_ready)) begin
        ap_sig_ready_blur_Block_proc9_U0_ap_ready = blur_Block_proc9_U0_ap_ready;
    end else begin
        ap_sig_ready_blur_Block_proc9_U0_ap_ready = ap_const_logic_1;
    end
end

always @ (kernel_val_0_0_channel_full_n or ap_reg_ready_kernel_val_0_0_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_0_0_channel_full_n)) begin
        ap_sig_ready_kernel_val_0_0_channel_full_n = kernel_val_0_0_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_0_0_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_0_1_channel_full_n or ap_reg_ready_kernel_val_0_1_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_0_1_channel_full_n)) begin
        ap_sig_ready_kernel_val_0_1_channel_full_n = kernel_val_0_1_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_0_1_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_0_2_channel_full_n or ap_reg_ready_kernel_val_0_2_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_0_2_channel_full_n)) begin
        ap_sig_ready_kernel_val_0_2_channel_full_n = kernel_val_0_2_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_0_2_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_1_0_channel_full_n or ap_reg_ready_kernel_val_1_0_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_1_0_channel_full_n)) begin
        ap_sig_ready_kernel_val_1_0_channel_full_n = kernel_val_1_0_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_1_0_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_1_1_channel_full_n or ap_reg_ready_kernel_val_1_1_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_1_1_channel_full_n)) begin
        ap_sig_ready_kernel_val_1_1_channel_full_n = kernel_val_1_1_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_1_1_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_1_2_channel_full_n or ap_reg_ready_kernel_val_1_2_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_1_2_channel_full_n)) begin
        ap_sig_ready_kernel_val_1_2_channel_full_n = kernel_val_1_2_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_1_2_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_2_0_channel_full_n or ap_reg_ready_kernel_val_2_0_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_2_0_channel_full_n)) begin
        ap_sig_ready_kernel_val_2_0_channel_full_n = kernel_val_2_0_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_2_0_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_2_1_channel_full_n or ap_reg_ready_kernel_val_2_1_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_2_1_channel_full_n)) begin
        ap_sig_ready_kernel_val_2_1_channel_full_n = kernel_val_2_1_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_2_1_channel_full_n = ap_const_logic_1;
    end
end

always @ (kernel_val_2_2_channel_full_n or ap_reg_ready_kernel_val_2_2_channel_full_n) begin
    if ((ap_const_logic_0 == ap_reg_ready_kernel_val_2_2_channel_full_n)) begin
        ap_sig_ready_kernel_val_2_2_channel_full_n = kernel_val_2_2_channel_full_n;
    end else begin
        ap_sig_ready_kernel_val_2_2_channel_full_n = ap_const_logic_1;
    end
end

always @ (ap_start or ap_reg_ready_blur_AXIM2Mat_U0_ap_ready) begin
    if (((ap_const_logic_1 == ap_start) & (ap_const_logic_0 == ap_reg_ready_blur_AXIM2Mat_U0_ap_ready))) begin
        ap_sig_start_in_blur_AXIM2Mat_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_blur_AXIM2Mat_U0_ap_start = ap_const_logic_0;
    end
end

always @ (ap_start or ap_reg_ready_blur_Block_proc9_U0_ap_ready) begin
    if (((ap_const_logic_0 == ap_reg_ready_blur_Block_proc9_U0_ap_ready) & (ap_const_logic_1 == ap_start))) begin
        ap_sig_start_in_blur_Block_proc9_U0_ap_start = ap_const_logic_1;
    end else begin
        ap_sig_start_in_blur_Block_proc9_U0_ap_start = ap_const_logic_0;
    end
end

always @ (ap_sig_ready_blur_Block_proc9_U0_ap_ready or ap_sig_ready_blur_AXIM2Mat_U0_ap_ready) begin
    if (((ap_const_logic_1 == ap_sig_ready_blur_Block_proc9_U0_ap_ready) & (ap_const_logic_1 == ap_sig_ready_blur_AXIM2Mat_U0_ap_ready))) begin
        ap_sig_top_allready = ap_const_logic_1;
    end else begin
        ap_sig_top_allready = ap_const_logic_0;
    end
end

always @ (ap_sig_ready_kernel_val_0_1_channel_full_n or ap_sig_ready_kernel_val_0_0_channel_full_n or ap_sig_ready_kernel_val_0_2_channel_full_n or ap_sig_ready_kernel_val_1_0_channel_full_n or ap_sig_ready_kernel_val_1_1_channel_full_n or ap_sig_ready_kernel_val_1_2_channel_full_n or ap_sig_ready_kernel_val_2_0_channel_full_n or ap_sig_ready_kernel_val_2_1_channel_full_n or ap_sig_ready_kernel_val_2_2_channel_full_n) begin
    if (((ap_const_logic_1 == ap_sig_ready_kernel_val_0_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_0_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_0_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_1_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_1_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_1_2_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_2_0_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_2_1_channel_full_n) & (ap_const_logic_1 == ap_sig_ready_kernel_val_2_2_channel_full_n))) begin
        blur_Loop_1_proc_U0_ap_continue = ap_const_logic_1;
    end else begin
        blur_Loop_1_proc_U0_ap_continue = ap_const_logic_0;
    end
end

assign CRTL_BUS_ARADDR = blur_AXIM2Mat_U0_m_axi_fb_ARADDR;

assign CRTL_BUS_ARBURST = blur_AXIM2Mat_U0_m_axi_fb_ARBURST;

assign CRTL_BUS_ARCACHE = blur_AXIM2Mat_U0_m_axi_fb_ARCACHE;

assign CRTL_BUS_ARID = blur_AXIM2Mat_U0_m_axi_fb_ARID;

assign CRTL_BUS_ARLEN = blur_AXIM2Mat_U0_m_axi_fb_ARLEN;

assign CRTL_BUS_ARLOCK = blur_AXIM2Mat_U0_m_axi_fb_ARLOCK;

assign CRTL_BUS_ARPROT = blur_AXIM2Mat_U0_m_axi_fb_ARPROT;

assign CRTL_BUS_ARQOS = blur_AXIM2Mat_U0_m_axi_fb_ARQOS;

assign CRTL_BUS_ARREGION = blur_AXIM2Mat_U0_m_axi_fb_ARREGION;

assign CRTL_BUS_ARSIZE = blur_AXIM2Mat_U0_m_axi_fb_ARSIZE;

assign CRTL_BUS_ARUSER = blur_AXIM2Mat_U0_m_axi_fb_ARUSER;

assign CRTL_BUS_ARVALID = blur_AXIM2Mat_U0_m_axi_fb_ARVALID;

assign CRTL_BUS_AWADDR = blur_Mat2AXIM_U0_m_axi_fb_AWADDR;

assign CRTL_BUS_AWBURST = blur_Mat2AXIM_U0_m_axi_fb_AWBURST;

assign CRTL_BUS_AWCACHE = blur_Mat2AXIM_U0_m_axi_fb_AWCACHE;

assign CRTL_BUS_AWID = blur_Mat2AXIM_U0_m_axi_fb_AWID;

assign CRTL_BUS_AWLEN = blur_Mat2AXIM_U0_m_axi_fb_AWLEN;

assign CRTL_BUS_AWLOCK = blur_Mat2AXIM_U0_m_axi_fb_AWLOCK;

assign CRTL_BUS_AWPROT = blur_Mat2AXIM_U0_m_axi_fb_AWPROT;

assign CRTL_BUS_AWQOS = blur_Mat2AXIM_U0_m_axi_fb_AWQOS;

assign CRTL_BUS_AWREGION = blur_Mat2AXIM_U0_m_axi_fb_AWREGION;

assign CRTL_BUS_AWSIZE = blur_Mat2AXIM_U0_m_axi_fb_AWSIZE;

assign CRTL_BUS_AWUSER = blur_Mat2AXIM_U0_m_axi_fb_AWUSER;

assign CRTL_BUS_AWVALID = blur_Mat2AXIM_U0_m_axi_fb_AWVALID;

assign CRTL_BUS_BREADY = blur_Mat2AXIM_U0_m_axi_fb_BREADY;

assign CRTL_BUS_RREADY = blur_AXIM2Mat_U0_m_axi_fb_RREADY;

assign CRTL_BUS_WDATA = blur_Mat2AXIM_U0_m_axi_fb_WDATA;

assign CRTL_BUS_WID = blur_Mat2AXIM_U0_m_axi_fb_WID;

assign CRTL_BUS_WLAST = blur_Mat2AXIM_U0_m_axi_fb_WLAST;

assign CRTL_BUS_WSTRB = blur_Mat2AXIM_U0_m_axi_fb_WSTRB;

assign CRTL_BUS_WUSER = blur_Mat2AXIM_U0_m_axi_fb_WUSER;

assign CRTL_BUS_WVALID = blur_Mat2AXIM_U0_m_axi_fb_WVALID;

assign ap_done = ap_sig_hs_done;

assign ap_ready = ap_sig_top_allready;


always @ (ap_rst_n) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sig_hs_continue = ap_const_logic_1;

assign blur_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;

assign blur_AXIM2Mat_U0_ap_continue = ap_const_logic_1;

assign blur_AXIM2Mat_U0_ap_start = ap_sig_start_in_blur_AXIM2Mat_U0_ap_start;

assign blur_AXIM2Mat_U0_image_in_dout = image_in_channel_dout;

assign blur_AXIM2Mat_U0_image_in_empty_n = image_in_channel_empty_n;

assign blur_AXIM2Mat_U0_img_cols_V_dout = src_cols_V_channel_dout;

assign blur_AXIM2Mat_U0_img_cols_V_empty_n = src_cols_V_channel_empty_n;

assign blur_AXIM2Mat_U0_img_cols_V_out_full_n = src_cols_V_channel39_full_n;

assign blur_AXIM2Mat_U0_img_data_stream_V_full_n = src_data_stream_0_V_full_n;

assign blur_AXIM2Mat_U0_img_rows_V_dout = src_rows_V_channel_dout;

assign blur_AXIM2Mat_U0_img_rows_V_empty_n = src_rows_V_channel_empty_n;

assign blur_AXIM2Mat_U0_img_rows_V_out_full_n = src_rows_V_channel38_full_n;

assign blur_AXIM2Mat_U0_m_axi_fb_ARREADY = CRTL_BUS_ARREADY;

assign blur_AXIM2Mat_U0_m_axi_fb_AWREADY = ap_const_logic_0;

assign blur_AXIM2Mat_U0_m_axi_fb_BID = ap_const_lv1_0;

assign blur_AXIM2Mat_U0_m_axi_fb_BRESP = ap_const_lv2_0;

assign blur_AXIM2Mat_U0_m_axi_fb_BUSER = ap_const_lv1_0;

assign blur_AXIM2Mat_U0_m_axi_fb_BVALID = ap_const_logic_0;

assign blur_AXIM2Mat_U0_m_axi_fb_RDATA = CRTL_BUS_RDATA;

assign blur_AXIM2Mat_U0_m_axi_fb_RID = CRTL_BUS_RID;

assign blur_AXIM2Mat_U0_m_axi_fb_RLAST = CRTL_BUS_RLAST;

assign blur_AXIM2Mat_U0_m_axi_fb_RRESP = CRTL_BUS_RRESP;

assign blur_AXIM2Mat_U0_m_axi_fb_RUSER = CRTL_BUS_RUSER;

assign blur_AXIM2Mat_U0_m_axi_fb_RVALID = CRTL_BUS_RVALID;

assign blur_AXIM2Mat_U0_m_axi_fb_WREADY = ap_const_logic_0;

assign blur_Block_proc9_U0_ap_continue = ap_const_logic_1;

assign blur_Block_proc9_U0_ap_start = ap_sig_start_in_blur_Block_proc9_U0_ap_start;

assign blur_Block_proc9_U0_image_in = image_in;

assign blur_Block_proc9_U0_image_in_out_full_n = image_in_channel_full_n;

assign blur_Block_proc9_U0_image_out = image_out;

assign blur_Block_proc9_U0_image_out_out_full_n = image_out_channel_full_n;

assign blur_Block_proc9_U0_src_cols_V_out_full_n = src_cols_V_channel_full_n;

assign blur_Block_proc9_U0_src_rows_V_out_full_n = src_rows_V_channel_full_n;

assign blur_CRTL_BUS_m_axi_U_ap_dummy_ce = ap_const_logic_1;

assign blur_Filter2D_U0_ap_continue = ap_const_logic_1;

assign blur_Filter2D_U0_ap_start = (kernel_val_0_0_channel_empty_n & kernel_val_0_1_channel_empty_n & kernel_val_0_2_channel_empty_n & kernel_val_1_0_channel_empty_n & kernel_val_1_1_channel_empty_n & kernel_val_1_2_channel_empty_n & kernel_val_2_0_channel_empty_n & kernel_val_2_1_channel_empty_n & kernel_val_2_2_channel_empty_n);

assign blur_Filter2D_U0_p_dst_data_stream_V_full_n = dst_data_stream_0_V_full_n;

assign blur_Filter2D_U0_p_kernel_val_0_0_read = kernel_val_0_0_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_0_1_read = kernel_val_0_1_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_0_2_read = kernel_val_0_2_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_1_0_read = kernel_val_1_0_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_1_1_read = kernel_val_1_1_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_1_2_read = kernel_val_1_2_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_2_0_read = kernel_val_2_0_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_2_1_read = kernel_val_2_1_channel_dout;

assign blur_Filter2D_U0_p_kernel_val_2_2_read = kernel_val_2_2_channel_dout;

assign blur_Filter2D_U0_p_src_cols_V_dout = src_cols_V_channel39_dout;

assign blur_Filter2D_U0_p_src_cols_V_empty_n = src_cols_V_channel39_empty_n;

assign blur_Filter2D_U0_p_src_data_stream_V_dout = src_data_stream_0_V_dout;

assign blur_Filter2D_U0_p_src_data_stream_V_empty_n = src_data_stream_0_V_empty_n;

assign blur_Filter2D_U0_p_src_rows_V_dout = src_rows_V_channel38_dout;

assign blur_Filter2D_U0_p_src_rows_V_empty_n = src_rows_V_channel38_empty_n;

assign blur_Loop_1_proc_U0_ap_start = ap_start;

assign blur_Mat2AXIM_U0_ap_continue = ap_sig_hs_continue;

assign blur_Mat2AXIM_U0_image_out_dout = image_out_channel_dout;

assign blur_Mat2AXIM_U0_image_out_empty_n = image_out_channel_empty_n;

assign blur_Mat2AXIM_U0_img_data_stream_V_dout = dst_data_stream_0_V_dout;

assign blur_Mat2AXIM_U0_img_data_stream_V_empty_n = dst_data_stream_0_V_empty_n;

assign blur_Mat2AXIM_U0_m_axi_fb_ARREADY = ap_const_logic_0;

assign blur_Mat2AXIM_U0_m_axi_fb_AWREADY = CRTL_BUS_AWREADY;

assign blur_Mat2AXIM_U0_m_axi_fb_BID = CRTL_BUS_BID;

assign blur_Mat2AXIM_U0_m_axi_fb_BRESP = CRTL_BUS_BRESP;

assign blur_Mat2AXIM_U0_m_axi_fb_BUSER = CRTL_BUS_BUSER;

assign blur_Mat2AXIM_U0_m_axi_fb_BVALID = CRTL_BUS_BVALID;

assign blur_Mat2AXIM_U0_m_axi_fb_RDATA = ap_const_lv8_0;

assign blur_Mat2AXIM_U0_m_axi_fb_RID = ap_const_lv1_0;

assign blur_Mat2AXIM_U0_m_axi_fb_RLAST = ap_const_logic_0;

assign blur_Mat2AXIM_U0_m_axi_fb_RRESP = ap_const_lv2_0;

assign blur_Mat2AXIM_U0_m_axi_fb_RUSER = ap_const_lv1_0;

assign blur_Mat2AXIM_U0_m_axi_fb_RVALID = ap_const_logic_0;

assign blur_Mat2AXIM_U0_m_axi_fb_WREADY = CRTL_BUS_WREADY;

assign dst_data_stream_0_V_U_ap_dummy_ce = ap_const_logic_1;

assign dst_data_stream_0_V_din = blur_Filter2D_U0_p_dst_data_stream_V_din;

assign dst_data_stream_0_V_read = blur_Mat2AXIM_U0_img_data_stream_V_read;

assign dst_data_stream_0_V_write = blur_Filter2D_U0_p_dst_data_stream_V_write;

assign image_in_channel_U_ap_dummy_ce = ap_const_logic_1;

assign image_in_channel_din = blur_Block_proc9_U0_image_in_out_din;

assign image_in_channel_read = blur_AXIM2Mat_U0_image_in_read;

assign image_in_channel_write = blur_Block_proc9_U0_image_in_out_write;

assign image_out_channel_U_ap_dummy_ce = ap_const_logic_1;

assign image_out_channel_din = blur_Block_proc9_U0_image_out_out_din;

assign image_out_channel_read = blur_Mat2AXIM_U0_image_out_read;

assign image_out_channel_write = blur_Block_proc9_U0_image_out_out_write;

assign kernel_val_0_0_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_0_0_channel_din = blur_Loop_1_proc_U0_ap_return_0;

assign kernel_val_0_0_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_0_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel;

assign kernel_val_0_1_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_0_1_channel_din = blur_Loop_1_proc_U0_ap_return_1;

assign kernel_val_0_1_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_0_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel;

assign kernel_val_0_2_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_0_2_channel_din = blur_Loop_1_proc_U0_ap_return_2;

assign kernel_val_0_2_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_0_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel;

assign kernel_val_1_0_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_1_0_channel_din = blur_Loop_1_proc_U0_ap_return_3;

assign kernel_val_1_0_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_1_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel;

assign kernel_val_1_1_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_1_1_channel_din = blur_Loop_1_proc_U0_ap_return_4;

assign kernel_val_1_1_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_1_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel;

assign kernel_val_1_2_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_1_2_channel_din = blur_Loop_1_proc_U0_ap_return_5;

assign kernel_val_1_2_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_1_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel;

assign kernel_val_2_0_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_2_0_channel_din = blur_Loop_1_proc_U0_ap_return_6;

assign kernel_val_2_0_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_2_0_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel;

assign kernel_val_2_1_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_2_1_channel_din = blur_Loop_1_proc_U0_ap_return_7;

assign kernel_val_2_1_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_2_1_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel;

assign kernel_val_2_2_channel_U_ap_dummy_ce = ap_const_logic_1;

assign kernel_val_2_2_channel_din = blur_Loop_1_proc_U0_ap_return_8;

assign kernel_val_2_2_channel_read = blur_Filter2D_U0_ap_ready;

assign kernel_val_2_2_channel_write = ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel;

assign src_cols_V_channel39_U_ap_dummy_ce = ap_const_logic_1;

assign src_cols_V_channel39_din = blur_AXIM2Mat_U0_img_cols_V_out_din;

assign src_cols_V_channel39_read = blur_Filter2D_U0_p_src_cols_V_read;

assign src_cols_V_channel39_write = blur_AXIM2Mat_U0_img_cols_V_out_write;

assign src_cols_V_channel_U_ap_dummy_ce = ap_const_logic_1;

assign src_cols_V_channel_din = blur_Block_proc9_U0_src_cols_V_out_din;

assign src_cols_V_channel_read = blur_AXIM2Mat_U0_img_cols_V_read;

assign src_cols_V_channel_write = blur_Block_proc9_U0_src_cols_V_out_write;

assign src_data_stream_0_V_U_ap_dummy_ce = ap_const_logic_1;

assign src_data_stream_0_V_din = blur_AXIM2Mat_U0_img_data_stream_V_din;

assign src_data_stream_0_V_read = blur_Filter2D_U0_p_src_data_stream_V_read;

assign src_data_stream_0_V_write = blur_AXIM2Mat_U0_img_data_stream_V_write;

assign src_rows_V_channel38_U_ap_dummy_ce = ap_const_logic_1;

assign src_rows_V_channel38_din = blur_AXIM2Mat_U0_img_rows_V_out_din;

assign src_rows_V_channel38_read = blur_Filter2D_U0_p_src_rows_V_read;

assign src_rows_V_channel38_write = blur_AXIM2Mat_U0_img_rows_V_out_write;

assign src_rows_V_channel_U_ap_dummy_ce = ap_const_logic_1;

assign src_rows_V_channel_din = blur_Block_proc9_U0_src_rows_V_out_din;

assign src_rows_V_channel_read = blur_AXIM2Mat_U0_img_rows_V_read;

assign src_rows_V_channel_write = blur_Block_proc9_U0_src_rows_V_out_write;


endmodule //blur

