-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blur_AXIM2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fb_AWVALID : OUT STD_LOGIC;
    m_axi_fb_AWREADY : IN STD_LOGIC;
    m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WVALID : OUT STD_LOGIC;
    m_axi_fb_WREADY : IN STD_LOGIC;
    m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WLAST : OUT STD_LOGIC;
    m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARVALID : OUT STD_LOGIC;
    m_axi_fb_ARREADY : IN STD_LOGIC;
    m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RVALID : IN STD_LOGIC;
    m_axi_fb_RREADY : OUT STD_LOGIC;
    m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_RLAST : IN STD_LOGIC;
    m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BVALID : IN STD_LOGIC;
    m_axi_fb_BREADY : OUT STD_LOGIC;
    m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    image_in_empty_n : IN STD_LOGIC;
    image_in_read : OUT STD_LOGIC;
    img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    img_rows_V_empty_n : IN STD_LOGIC;
    img_rows_V_read : OUT STD_LOGIC;
    img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_empty_n : IN STD_LOGIC;
    img_cols_V_read : OUT STD_LOGIC;
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC;
    img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_rows_V_out_full_n : IN STD_LOGIC;
    img_rows_V_out_write : OUT STD_LOGIC;
    img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_out_full_n : IN STD_LOGIC;
    img_cols_V_out_write : OUT STD_LOGIC );
end;


architecture behav of blur_AXIM2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal image_in_read_reg_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_123 : BOOLEAN;
    signal img_rows_V_read_reg_93 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_cols_V_read_reg_98 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_blur_Array2Mat_fu_74_ap_start : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_ap_done : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_ap_idle : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_ap_ready : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWVALID : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWREADY : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WVALID : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WREADY : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WLAST : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARVALID : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARREADY : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RVALID : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RREADY : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RLAST : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_BVALID : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_BREADY : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_m_axi_fb_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_blur_Array2Mat_fu_74_image_in1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_blur_Array2Mat_fu_74_img_rows_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_blur_Array2Mat_fu_74_img_cols_V_read : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_blur_Array2Mat_fu_74_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_blur_Array2Mat_fu_74_img_data_stream_V_full_n : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_img_data_stream_V_write : STD_LOGIC;
    signal grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component blur_Array2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        image_in1 : IN STD_LOGIC_VECTOR (31 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC );
    end component;



begin
    grp_blur_Array2Mat_fu_74 : component blur_Array2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_blur_Array2Mat_fu_74_ap_start,
        ap_done => grp_blur_Array2Mat_fu_74_ap_done,
        ap_idle => grp_blur_Array2Mat_fu_74_ap_idle,
        ap_ready => grp_blur_Array2Mat_fu_74_ap_ready,
        m_axi_fb_AWVALID => grp_blur_Array2Mat_fu_74_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => grp_blur_Array2Mat_fu_74_m_axi_fb_AWREADY,
        m_axi_fb_AWADDR => grp_blur_Array2Mat_fu_74_m_axi_fb_AWADDR,
        m_axi_fb_AWID => grp_blur_Array2Mat_fu_74_m_axi_fb_AWID,
        m_axi_fb_AWLEN => grp_blur_Array2Mat_fu_74_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => grp_blur_Array2Mat_fu_74_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => grp_blur_Array2Mat_fu_74_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => grp_blur_Array2Mat_fu_74_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => grp_blur_Array2Mat_fu_74_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => grp_blur_Array2Mat_fu_74_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => grp_blur_Array2Mat_fu_74_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => grp_blur_Array2Mat_fu_74_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => grp_blur_Array2Mat_fu_74_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => grp_blur_Array2Mat_fu_74_m_axi_fb_WVALID,
        m_axi_fb_WREADY => grp_blur_Array2Mat_fu_74_m_axi_fb_WREADY,
        m_axi_fb_WDATA => grp_blur_Array2Mat_fu_74_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => grp_blur_Array2Mat_fu_74_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => grp_blur_Array2Mat_fu_74_m_axi_fb_WLAST,
        m_axi_fb_WID => grp_blur_Array2Mat_fu_74_m_axi_fb_WID,
        m_axi_fb_WUSER => grp_blur_Array2Mat_fu_74_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => grp_blur_Array2Mat_fu_74_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => grp_blur_Array2Mat_fu_74_m_axi_fb_ARREADY,
        m_axi_fb_ARADDR => grp_blur_Array2Mat_fu_74_m_axi_fb_ARADDR,
        m_axi_fb_ARID => grp_blur_Array2Mat_fu_74_m_axi_fb_ARID,
        m_axi_fb_ARLEN => grp_blur_Array2Mat_fu_74_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => grp_blur_Array2Mat_fu_74_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => grp_blur_Array2Mat_fu_74_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => grp_blur_Array2Mat_fu_74_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => grp_blur_Array2Mat_fu_74_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => grp_blur_Array2Mat_fu_74_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => grp_blur_Array2Mat_fu_74_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => grp_blur_Array2Mat_fu_74_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => grp_blur_Array2Mat_fu_74_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => grp_blur_Array2Mat_fu_74_m_axi_fb_RVALID,
        m_axi_fb_RREADY => grp_blur_Array2Mat_fu_74_m_axi_fb_RREADY,
        m_axi_fb_RDATA => grp_blur_Array2Mat_fu_74_m_axi_fb_RDATA,
        m_axi_fb_RLAST => grp_blur_Array2Mat_fu_74_m_axi_fb_RLAST,
        m_axi_fb_RID => grp_blur_Array2Mat_fu_74_m_axi_fb_RID,
        m_axi_fb_RUSER => grp_blur_Array2Mat_fu_74_m_axi_fb_RUSER,
        m_axi_fb_RRESP => grp_blur_Array2Mat_fu_74_m_axi_fb_RRESP,
        m_axi_fb_BVALID => grp_blur_Array2Mat_fu_74_m_axi_fb_BVALID,
        m_axi_fb_BREADY => grp_blur_Array2Mat_fu_74_m_axi_fb_BREADY,
        m_axi_fb_BRESP => grp_blur_Array2Mat_fu_74_m_axi_fb_BRESP,
        m_axi_fb_BID => grp_blur_Array2Mat_fu_74_m_axi_fb_BID,
        m_axi_fb_BUSER => grp_blur_Array2Mat_fu_74_m_axi_fb_BUSER,
        image_in1 => grp_blur_Array2Mat_fu_74_image_in1,
        img_rows_V_read => grp_blur_Array2Mat_fu_74_img_rows_V_read,
        img_cols_V_read => grp_blur_Array2Mat_fu_74_img_cols_V_read,
        img_data_stream_V_din => grp_blur_Array2Mat_fu_74_img_data_stream_V_din,
        img_data_stream_V_full_n => grp_blur_Array2Mat_fu_74_img_data_stream_V_full_n,
        img_data_stream_V_write => grp_blur_Array2Mat_fu_74_img_data_stream_V_write);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_blur_Array2Mat_fu_74_ap_done)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg assign process. --
    grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
                    grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_blur_Array2Mat_fu_74_ap_ready)) then 
                    grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then
                image_in_read_reg_88 <= image_in_dout;
                img_cols_V_read_reg_98 <= img_cols_V_dout;
                img_rows_V_read_reg_93 <= img_rows_V_dout;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_123, grp_blur_Array2Mat_fu_74_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_123)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_blur_Array2Mat_fu_74_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, grp_blur_Array2Mat_fu_74_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_blur_Array2Mat_fu_74_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_blur_Array2Mat_fu_74_ap_done, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_logic_0 = grp_blur_Array2Mat_fu_74_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_start, ap_done_reg, image_in_empty_n, img_rows_V_empty_n, img_cols_V_empty_n, img_rows_V_out_full_n, img_cols_V_out_full_n)
    begin
                ap_sig_bdd_123 <= ((image_in_empty_n = ap_const_logic_0) or (img_rows_V_empty_n = ap_const_logic_0) or (img_cols_V_empty_n = ap_const_logic_0) or (img_rows_V_out_full_n = ap_const_logic_0) or (img_cols_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_blur_Array2Mat_fu_74_ap_start <= grp_blur_Array2Mat_fu_74_ap_start_ap_start_reg;
    grp_blur_Array2Mat_fu_74_image_in1 <= image_in_read_reg_88;
    grp_blur_Array2Mat_fu_74_img_cols_V_read <= img_cols_V_read_reg_98;
    grp_blur_Array2Mat_fu_74_img_data_stream_V_full_n <= img_data_stream_V_full_n;
    grp_blur_Array2Mat_fu_74_img_rows_V_read <= img_rows_V_read_reg_93;
    grp_blur_Array2Mat_fu_74_m_axi_fb_ARREADY <= m_axi_fb_ARREADY;
    grp_blur_Array2Mat_fu_74_m_axi_fb_AWREADY <= ap_const_logic_0;
    grp_blur_Array2Mat_fu_74_m_axi_fb_BID <= ap_const_lv1_0;
    grp_blur_Array2Mat_fu_74_m_axi_fb_BRESP <= ap_const_lv2_0;
    grp_blur_Array2Mat_fu_74_m_axi_fb_BUSER <= ap_const_lv1_0;
    grp_blur_Array2Mat_fu_74_m_axi_fb_BVALID <= ap_const_logic_0;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RDATA <= m_axi_fb_RDATA;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RID <= m_axi_fb_RID;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RLAST <= m_axi_fb_RLAST;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RRESP <= m_axi_fb_RRESP;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RUSER <= m_axi_fb_RUSER;
    grp_blur_Array2Mat_fu_74_m_axi_fb_RVALID <= m_axi_fb_RVALID;
    grp_blur_Array2Mat_fu_74_m_axi_fb_WREADY <= ap_const_logic_0;

    -- image_in_read assign process. --
    image_in_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            image_in_read <= ap_const_logic_1;
        else 
            image_in_read <= ap_const_logic_0;
        end if; 
    end process;

    img_cols_V_out_din <= img_cols_V_dout;

    -- img_cols_V_out_write assign process. --
    img_cols_V_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            img_cols_V_out_write <= ap_const_logic_1;
        else 
            img_cols_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- img_cols_V_read assign process. --
    img_cols_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            img_cols_V_read <= ap_const_logic_1;
        else 
            img_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;

    img_data_stream_V_din <= grp_blur_Array2Mat_fu_74_img_data_stream_V_din;

    -- img_data_stream_V_write assign process. --
    img_data_stream_V_write_assign_proc : process(grp_blur_Array2Mat_fu_74_img_data_stream_V_write, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            img_data_stream_V_write <= grp_blur_Array2Mat_fu_74_img_data_stream_V_write;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    img_rows_V_out_din <= img_rows_V_dout;

    -- img_rows_V_out_write assign process. --
    img_rows_V_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            img_rows_V_out_write <= ap_const_logic_1;
        else 
            img_rows_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- img_rows_V_read assign process. --
    img_rows_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            img_rows_V_read <= ap_const_logic_1;
        else 
            img_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_ARADDR <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARADDR;
    m_axi_fb_ARBURST <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARBURST;
    m_axi_fb_ARCACHE <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARCACHE;
    m_axi_fb_ARID <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARID;
    m_axi_fb_ARLEN <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARLEN;
    m_axi_fb_ARLOCK <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARLOCK;
    m_axi_fb_ARPROT <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARPROT;
    m_axi_fb_ARQOS <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARQOS;
    m_axi_fb_ARREGION <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARREGION;
    m_axi_fb_ARSIZE <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARSIZE;
    m_axi_fb_ARUSER <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARUSER;

    -- m_axi_fb_ARVALID assign process. --
    m_axi_fb_ARVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_blur_Array2Mat_fu_74_m_axi_fb_ARVALID, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            m_axi_fb_ARVALID <= grp_blur_Array2Mat_fu_74_m_axi_fb_ARVALID;
        else 
            m_axi_fb_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_AWADDR <= ap_const_lv32_0;
    m_axi_fb_AWBURST <= ap_const_lv2_0;
    m_axi_fb_AWCACHE <= ap_const_lv4_0;
    m_axi_fb_AWID <= ap_const_lv1_0;
    m_axi_fb_AWLEN <= ap_const_lv32_0;
    m_axi_fb_AWLOCK <= ap_const_lv2_0;
    m_axi_fb_AWPROT <= ap_const_lv3_0;
    m_axi_fb_AWQOS <= ap_const_lv4_0;
    m_axi_fb_AWREGION <= ap_const_lv4_0;
    m_axi_fb_AWSIZE <= ap_const_lv3_0;
    m_axi_fb_AWUSER <= ap_const_lv1_0;
    m_axi_fb_AWVALID <= ap_const_logic_0;
    m_axi_fb_BREADY <= ap_const_logic_0;

    -- m_axi_fb_RREADY assign process. --
    m_axi_fb_RREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_blur_Array2Mat_fu_74_m_axi_fb_RREADY, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            m_axi_fb_RREADY <= grp_blur_Array2Mat_fu_74_m_axi_fb_RREADY;
        else 
            m_axi_fb_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_WDATA <= ap_const_lv8_0;
    m_axi_fb_WID <= ap_const_lv1_0;
    m_axi_fb_WLAST <= ap_const_logic_0;
    m_axi_fb_WSTRB <= ap_const_lv1_0;
    m_axi_fb_WUSER <= ap_const_lv1_0;
    m_axi_fb_WVALID <= ap_const_logic_0;
end behav;
