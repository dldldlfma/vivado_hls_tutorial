-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blur_Array2Mat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_fb_AWVALID : OUT STD_LOGIC;
    m_axi_fb_AWREADY : IN STD_LOGIC;
    m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WVALID : OUT STD_LOGIC;
    m_axi_fb_WREADY : IN STD_LOGIC;
    m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WLAST : OUT STD_LOGIC;
    m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARVALID : OUT STD_LOGIC;
    m_axi_fb_ARREADY : IN STD_LOGIC;
    m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RVALID : IN STD_LOGIC;
    m_axi_fb_RREADY : OUT STD_LOGIC;
    m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_fb_RLAST : IN STD_LOGIC;
    m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BVALID : IN STD_LOGIC;
    m_axi_fb_BREADY : OUT STD_LOGIC;
    m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    image_in1 : IN STD_LOGIC_VECTOR (31 downto 0);
    img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
    img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_data_stream_V_full_n : IN STD_LOGIC;
    img_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of blur_Array2Mat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_pp0_stg0_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_29 : BOOLEAN;
    signal p_2_reg_121 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_cast_fu_132_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_cast_reg_234 : STD_LOGIC_VECTOR (45 downto 0);
    signal row_V_fu_145_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_V_reg_242 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal fb_addr_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_fb_ARREADY : STD_LOGIC;
    signal exitcond_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_149 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_258_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_157 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal col_V_fu_217_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal fb_pix_reg_267 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_177 : BOOLEAN;
    signal p_s_reg_110 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal tmp_57_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_fb_ARREADY : STD_LOGIC := '0';
    signal p_cast_fu_136_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_151_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl2_fu_163_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_159_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl2_cast_fu_171_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_fu_175_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_cast_fu_181_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_55_fu_185_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_56_fu_189_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal p_2_cast_fu_208_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_fb_ARREADY assign process. --
    ap_reg_ioackin_m_axi_fb_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_fb_ARREADY))) then 
                        ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_fb_ARREADY)) then 
                        ap_reg_ioackin_m_axi_fb_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond_fu_212_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (ap_const_lv1_0 = exitcond_fu_212_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond_fu_212_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- p_2_reg_121 assign process. --
    p_2_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and (ap_const_lv1_0 = exitcond_fu_212_p2))) then 
                p_2_reg_121 <= col_V_fu_217_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                p_2_reg_121 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- p_s_reg_110 assign process. --
    p_s_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_10)) then 
                p_s_reg_110 <= row_V_reg_242;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_110 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                ap_reg_ppstg_exitcond_reg_258_pp0_it1 <= exitcond_reg_258;
                exitcond_reg_258 <= exitcond_fu_212_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_140_p2))) then
                fb_addr_reg_247 <= tmp_57_fu_194_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (ap_const_lv1_0 = exitcond_reg_258) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then
                fb_pix_reg_267 <= m_axi_fb_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_V_reg_242 <= row_V_fu_145_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                sext_cast_reg_234 <= sext_cast_fu_132_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_140_p2, ap_sig_ioackin_m_axi_fb_ARREADY, exitcond_fu_212_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_149, ap_reg_ppiten_pp0_it1, ap_sig_bdd_157, ap_reg_ppiten_pp0_it2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_140_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_fb_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
            when ap_ST_pp0_stg0_fsm_9 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond_fu_212_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not((ap_const_lv1_0 = exitcond_fu_212_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_9;
                end if;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_140_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_140_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_140_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_140_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(m_axi_fb_RVALID, exitcond_reg_258)
    begin
                ap_sig_bdd_149 <= ((m_axi_fb_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_reg_258));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(img_data_stream_V_full_n, ap_reg_ppstg_exitcond_reg_258_pp0_it1)
    begin
                ap_sig_bdd_157 <= ((img_data_stream_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_258_pp0_it1));
    end process;


    -- ap_sig_bdd_177 assign process. --
    ap_sig_bdd_177_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_177 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_29 assign process. --
    ap_sig_bdd_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_9_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_10 assign process. --
    ap_sig_cseq_ST_st13_fsm_10_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_29)
    begin
        if (ap_sig_bdd_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_177)
    begin
        if (ap_sig_bdd_177) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_fb_ARREADY assign process. --
    ap_sig_ioackin_m_axi_fb_ARREADY_assign_proc : process(m_axi_fb_ARREADY, ap_reg_ioackin_m_axi_fb_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_fb_ARREADY)) then 
            ap_sig_ioackin_m_axi_fb_ARREADY <= m_axi_fb_ARREADY;
        else 
            ap_sig_ioackin_m_axi_fb_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    col_V_fu_217_p2 <= std_logic_vector(unsigned(p_2_reg_121) + unsigned(ap_const_lv11_1));
    exitcond2_fu_140_p2 <= "1" when (p_cast_fu_136_p1 = img_rows_V_read) else "0";
    exitcond_fu_212_p2 <= "1" when (p_2_cast_fu_208_p1 = img_cols_V_read) else "0";
    img_data_stream_V_din <= fb_pix_reg_267;

    -- img_data_stream_V_write assign process. --
    img_data_stream_V_write_assign_proc : process(ap_sig_bdd_149, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_reg_258_pp0_it1, ap_sig_bdd_157, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_258_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            img_data_stream_V_write <= ap_const_logic_1;
        else 
            img_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_ARADDR <= fb_addr_reg_247;
    m_axi_fb_ARBURST <= ap_const_lv2_0;
    m_axi_fb_ARCACHE <= ap_const_lv4_0;
    m_axi_fb_ARID <= ap_const_lv1_0;
    m_axi_fb_ARLEN <= std_logic_vector(resize(unsigned(img_cols_V_read),32));
    m_axi_fb_ARLOCK <= ap_const_lv2_0;
    m_axi_fb_ARPROT <= ap_const_lv3_0;
    m_axi_fb_ARQOS <= ap_const_lv4_0;
    m_axi_fb_ARREGION <= ap_const_lv4_0;
    m_axi_fb_ARSIZE <= ap_const_lv3_0;
    m_axi_fb_ARUSER <= ap_const_lv1_0;

    -- m_axi_fb_ARVALID assign process. --
    m_axi_fb_ARVALID_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_reg_ioackin_m_axi_fb_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_fb_ARREADY))) then 
            m_axi_fb_ARVALID <= ap_const_logic_1;
        else 
            m_axi_fb_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_AWADDR <= ap_const_lv32_0;
    m_axi_fb_AWBURST <= ap_const_lv2_0;
    m_axi_fb_AWCACHE <= ap_const_lv4_0;
    m_axi_fb_AWID <= ap_const_lv1_0;
    m_axi_fb_AWLEN <= ap_const_lv32_0;
    m_axi_fb_AWLOCK <= ap_const_lv2_0;
    m_axi_fb_AWPROT <= ap_const_lv3_0;
    m_axi_fb_AWQOS <= ap_const_lv4_0;
    m_axi_fb_AWREGION <= ap_const_lv4_0;
    m_axi_fb_AWSIZE <= ap_const_lv3_0;
    m_axi_fb_AWUSER <= ap_const_lv1_0;
    m_axi_fb_AWVALID <= ap_const_logic_0;
    m_axi_fb_BREADY <= ap_const_logic_0;

    -- m_axi_fb_RREADY assign process. --
    m_axi_fb_RREADY_assign_proc : process(exitcond_reg_258, ap_sig_cseq_ST_pp0_stg0_fsm_9, ap_sig_bdd_149, ap_reg_ppiten_pp0_it1, ap_sig_bdd_157, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_9) and (ap_const_lv1_0 = exitcond_reg_258) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_149 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (ap_sig_bdd_157 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            m_axi_fb_RREADY <= ap_const_logic_1;
        else 
            m_axi_fb_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_fb_WDATA <= ap_const_lv8_0;
    m_axi_fb_WID <= ap_const_lv1_0;
    m_axi_fb_WLAST <= ap_const_logic_0;
    m_axi_fb_WSTRB <= ap_const_lv1_0;
    m_axi_fb_WUSER <= ap_const_lv1_0;
    m_axi_fb_WVALID <= ap_const_logic_0;
    p_2_cast_fu_208_p1 <= std_logic_vector(resize(unsigned(p_2_reg_121),12));
    p_cast_fu_136_p1 <= std_logic_vector(resize(unsigned(p_s_reg_110),12));
    p_shl2_cast_fu_171_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_163_p3),23));
    p_shl2_fu_163_p3 <= (p_s_reg_110 & ap_const_lv7_0);
    p_shl_cast_fu_159_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_151_p3),23));
    p_shl_fu_151_p3 <= (p_s_reg_110 & ap_const_lv11_0);
        r_V_cast_fu_181_p1 <= std_logic_vector(resize(signed(r_V_fu_175_p2),44));

    r_V_fu_175_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_159_p1) - unsigned(p_shl2_cast_fu_171_p1));
    row_V_fu_145_p2 <= std_logic_vector(unsigned(p_s_reg_110) + unsigned(ap_const_lv11_1));
        sext_cast_fu_132_p1 <= std_logic_vector(resize(signed(image_in1),46));

    tmp_55_fu_185_p1 <= std_logic_vector(resize(unsigned(r_V_cast_fu_181_p1),46));
    tmp_56_fu_189_p2 <= std_logic_vector(signed(sext_cast_reg_234) + signed(tmp_55_fu_185_p1));
        tmp_57_fu_194_p1 <= std_logic_vector(resize(signed(tmp_56_fu_189_p2),64));

end behav;
