-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blur is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_CRTL_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_CRTL_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_CRTL_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_CRTL_BUS_PROT_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_CRTL_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_AWREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CRTL_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_WREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_CRTL_BUS_WLAST : OUT STD_LOGIC;
    m_axi_CRTL_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_CRTL_BUS_ARREADY : IN STD_LOGIC;
    m_axi_CRTL_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_CRTL_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_CRTL_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_CRTL_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RVALID : IN STD_LOGIC;
    m_axi_CRTL_BUS_RREADY : OUT STD_LOGIC;
    m_axi_CRTL_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RLAST : IN STD_LOGIC;
    m_axi_CRTL_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_BVALID : IN STD_LOGIC;
    m_axi_CRTL_BUS_BREADY : OUT STD_LOGIC;
    m_axi_CRTL_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_CRTL_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_ID_WIDTH-1 downto 0);
    m_axi_CRTL_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_CRTL_BUS_BUSER_WIDTH-1 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of blur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "blur,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=3,HLS_SYN_DSP=9,HLS_SYN_FF=1852,HLS_SYN_LUT=2340}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal blur_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal image_in : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_AWVALID : STD_LOGIC;
    signal CRTL_BUS_AWREADY : STD_LOGIC;
    signal CRTL_BUS_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal CRTL_BUS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal CRTL_BUS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_WVALID : STD_LOGIC;
    signal CRTL_BUS_WREADY : STD_LOGIC;
    signal CRTL_BUS_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal CRTL_BUS_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_WLAST : STD_LOGIC;
    signal CRTL_BUS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_ARVALID : STD_LOGIC;
    signal CRTL_BUS_ARREADY : STD_LOGIC;
    signal CRTL_BUS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal CRTL_BUS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal CRTL_BUS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal CRTL_BUS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal CRTL_BUS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_RVALID : STD_LOGIC;
    signal CRTL_BUS_RREADY : STD_LOGIC;
    signal CRTL_BUS_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal CRTL_BUS_RLAST : STD_LOGIC;
    signal CRTL_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_BVALID : STD_LOGIC;
    signal CRTL_BUS_BREADY : STD_LOGIC;
    signal CRTL_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal CRTL_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal CRTL_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_CRTL_BUS_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal blur_Block_proc9_U0_ap_start : STD_LOGIC;
    signal blur_Block_proc9_U0_ap_done : STD_LOGIC;
    signal blur_Block_proc9_U0_ap_continue : STD_LOGIC;
    signal blur_Block_proc9_U0_ap_idle : STD_LOGIC;
    signal blur_Block_proc9_U0_ap_ready : STD_LOGIC;
    signal blur_Block_proc9_U0_src_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_Block_proc9_U0_src_rows_V_out_full_n : STD_LOGIC;
    signal blur_Block_proc9_U0_src_rows_V_out_write : STD_LOGIC;
    signal blur_Block_proc9_U0_src_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_Block_proc9_U0_src_cols_V_out_full_n : STD_LOGIC;
    signal blur_Block_proc9_U0_src_cols_V_out_write : STD_LOGIC;
    signal blur_Block_proc9_U0_image_in : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Block_proc9_U0_image_out : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Block_proc9_U0_image_in_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Block_proc9_U0_image_in_out_full_n : STD_LOGIC;
    signal blur_Block_proc9_U0_image_in_out_write : STD_LOGIC;
    signal blur_Block_proc9_U0_image_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Block_proc9_U0_image_out_out_full_n : STD_LOGIC;
    signal blur_Block_proc9_U0_image_out_out_write : STD_LOGIC;
    signal blur_AXIM2Mat_U0_ap_start : STD_LOGIC;
    signal blur_AXIM2Mat_U0_ap_done : STD_LOGIC;
    signal blur_AXIM2Mat_U0_ap_continue : STD_LOGIC;
    signal blur_AXIM2Mat_U0_ap_idle : STD_LOGIC;
    signal blur_AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_AWVALID : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_AWREADY : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_WVALID : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_WREADY : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_WLAST : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARVALID : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_ARREADY : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_RVALID : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_RREADY : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_RLAST : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_BVALID : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_BREADY : STD_LOGIC;
    signal blur_AXIM2Mat_U0_m_axi_fb_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_m_axi_fb_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_AXIM2Mat_U0_image_in_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_AXIM2Mat_U0_image_in_empty_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_image_in_read : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_AXIM2Mat_U0_img_rows_V_empty_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_rows_V_read : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_AXIM2Mat_U0_img_cols_V_empty_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_cols_V_read : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_AXIM2Mat_U0_img_data_stream_V_full_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_data_stream_V_write : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_AXIM2Mat_U0_img_rows_V_out_full_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_rows_V_out_write : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_AXIM2Mat_U0_img_cols_V_out_full_n : STD_LOGIC;
    signal blur_AXIM2Mat_U0_img_cols_V_out_write : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal blur_Loop_1_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Loop_1_proc_U0_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel : STD_LOGIC;
    signal kernel_val_0_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_0_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_0_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel : STD_LOGIC;
    signal kernel_val_0_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_0_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_0_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel : STD_LOGIC;
    signal kernel_val_0_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_0_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_0_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel : STD_LOGIC;
    signal kernel_val_1_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_1_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_1_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel : STD_LOGIC;
    signal kernel_val_1_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_1_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_1_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel : STD_LOGIC;
    signal kernel_val_1_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_1_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_1_2_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel : STD_LOGIC;
    signal kernel_val_2_0_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_2_0_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_2_0_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel : STD_LOGIC;
    signal kernel_val_2_1_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_2_1_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_2_1_channel_full_n : STD_LOGIC;
    signal ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel : STD_LOGIC;
    signal kernel_val_2_2_channel_full_n : STD_LOGIC;
    signal ap_reg_ready_kernel_val_2_2_channel_full_n : STD_LOGIC := '0';
    signal ap_sig_ready_kernel_val_2_2_channel_full_n : STD_LOGIC;
    signal blur_Filter2D_U0_ap_start : STD_LOGIC;
    signal blur_Filter2D_U0_ap_done : STD_LOGIC;
    signal blur_Filter2D_U0_ap_continue : STD_LOGIC;
    signal blur_Filter2D_U0_ap_idle : STD_LOGIC;
    signal blur_Filter2D_U0_ap_ready : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_rows_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_Filter2D_U0_p_src_rows_V_empty_n : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_rows_V_read : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_cols_V_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal blur_Filter2D_U0_p_src_cols_V_empty_n : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_cols_V_read : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_src_data_stream_V_empty_n : STD_LOGIC;
    signal blur_Filter2D_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal blur_Filter2D_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_dst_data_stream_V_full_n : STD_LOGIC;
    signal blur_Filter2D_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal blur_Filter2D_U0_p_kernel_val_0_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_0_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_0_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_1_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_1_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_1_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_2_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_2_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Filter2D_U0_p_kernel_val_2_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Mat2AXIM_U0_ap_start : STD_LOGIC := '0';
    signal blur_Mat2AXIM_U0_ap_done : STD_LOGIC;
    signal blur_Mat2AXIM_U0_ap_continue : STD_LOGIC;
    signal blur_Mat2AXIM_U0_ap_idle : STD_LOGIC;
    signal blur_Mat2AXIM_U0_ap_ready : STD_LOGIC;
    signal blur_Mat2AXIM_U0_img_data_stream_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Mat2AXIM_U0_img_data_stream_V_empty_n : STD_LOGIC;
    signal blur_Mat2AXIM_U0_img_data_stream_V_read : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_AWVALID : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_AWREADY : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_WVALID : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_WREADY : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_WLAST : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARVALID : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_ARREADY : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_RVALID : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_RREADY : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_RLAST : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_BVALID : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_BREADY : STD_LOGIC;
    signal blur_Mat2AXIM_U0_m_axi_fb_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_m_axi_fb_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal blur_Mat2AXIM_U0_image_out_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal blur_Mat2AXIM_U0_image_out_empty_n : STD_LOGIC;
    signal blur_Mat2AXIM_U0_image_out_read : STD_LOGIC;
    signal ap_sig_hs_continue : STD_LOGIC;
    signal src_rows_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src_rows_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel_full_n : STD_LOGIC;
    signal src_rows_V_channel_write : STD_LOGIC;
    signal src_rows_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel_empty_n : STD_LOGIC;
    signal src_rows_V_channel_read : STD_LOGIC;
    signal src_cols_V_channel_U_ap_dummy_ce : STD_LOGIC;
    signal src_cols_V_channel_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel_full_n : STD_LOGIC;
    signal src_cols_V_channel_write : STD_LOGIC;
    signal src_cols_V_channel_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel_empty_n : STD_LOGIC;
    signal src_cols_V_channel_read : STD_LOGIC;
    signal image_in_channel_U_ap_dummy_ce : STD_LOGIC;
    signal image_in_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_channel_full_n : STD_LOGIC;
    signal image_in_channel_write : STD_LOGIC;
    signal image_in_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_in_channel_empty_n : STD_LOGIC;
    signal image_in_channel_read : STD_LOGIC;
    signal image_out_channel_U_ap_dummy_ce : STD_LOGIC;
    signal image_out_channel_din : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_channel_full_n : STD_LOGIC;
    signal image_out_channel_write : STD_LOGIC;
    signal image_out_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal image_out_channel_empty_n : STD_LOGIC;
    signal image_out_channel_read : STD_LOGIC;
    signal src_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal src_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_full_n : STD_LOGIC;
    signal src_data_stream_0_V_write : STD_LOGIC;
    signal src_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_data_stream_0_V_empty_n : STD_LOGIC;
    signal src_data_stream_0_V_read : STD_LOGIC;
    signal src_rows_V_channel38_U_ap_dummy_ce : STD_LOGIC;
    signal src_rows_V_channel38_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel38_full_n : STD_LOGIC;
    signal src_rows_V_channel38_write : STD_LOGIC;
    signal src_rows_V_channel38_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_rows_V_channel38_empty_n : STD_LOGIC;
    signal src_rows_V_channel38_read : STD_LOGIC;
    signal src_cols_V_channel39_U_ap_dummy_ce : STD_LOGIC;
    signal src_cols_V_channel39_din : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel39_full_n : STD_LOGIC;
    signal src_cols_V_channel39_write : STD_LOGIC;
    signal src_cols_V_channel39_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_cols_V_channel39_empty_n : STD_LOGIC;
    signal src_cols_V_channel39_read : STD_LOGIC;
    signal kernel_val_0_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_0_0_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_0_channel_write : STD_LOGIC;
    signal kernel_val_0_0_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_0_channel_empty_n : STD_LOGIC;
    signal kernel_val_0_0_channel_read : STD_LOGIC;
    signal kernel_val_0_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_0_1_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_1_channel_write : STD_LOGIC;
    signal kernel_val_0_1_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_1_channel_empty_n : STD_LOGIC;
    signal kernel_val_0_1_channel_read : STD_LOGIC;
    signal kernel_val_0_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_0_2_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_2_channel_write : STD_LOGIC;
    signal kernel_val_0_2_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_2_channel_empty_n : STD_LOGIC;
    signal kernel_val_0_2_channel_read : STD_LOGIC;
    signal kernel_val_1_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_1_0_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_0_channel_write : STD_LOGIC;
    signal kernel_val_1_0_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_0_channel_empty_n : STD_LOGIC;
    signal kernel_val_1_0_channel_read : STD_LOGIC;
    signal kernel_val_1_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_1_1_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_1_channel_write : STD_LOGIC;
    signal kernel_val_1_1_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_1_channel_empty_n : STD_LOGIC;
    signal kernel_val_1_1_channel_read : STD_LOGIC;
    signal kernel_val_1_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_1_2_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_2_channel_write : STD_LOGIC;
    signal kernel_val_1_2_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_2_channel_empty_n : STD_LOGIC;
    signal kernel_val_1_2_channel_read : STD_LOGIC;
    signal kernel_val_2_0_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_2_0_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_0_channel_write : STD_LOGIC;
    signal kernel_val_2_0_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_0_channel_empty_n : STD_LOGIC;
    signal kernel_val_2_0_channel_read : STD_LOGIC;
    signal kernel_val_2_1_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_2_1_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_1_channel_write : STD_LOGIC;
    signal kernel_val_2_1_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_1_channel_empty_n : STD_LOGIC;
    signal kernel_val_2_1_channel_read : STD_LOGIC;
    signal kernel_val_2_2_channel_U_ap_dummy_ce : STD_LOGIC;
    signal kernel_val_2_2_channel_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_2_channel_write : STD_LOGIC;
    signal kernel_val_2_2_channel_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_2_channel_empty_n : STD_LOGIC;
    signal kernel_val_2_2_channel_read : STD_LOGIC;
    signal dst_data_stream_0_V_U_ap_dummy_ce : STD_LOGIC;
    signal dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_0_V_full_n : STD_LOGIC;
    signal dst_data_stream_0_V_write : STD_LOGIC;
    signal dst_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_data_stream_0_V_empty_n : STD_LOGIC;
    signal dst_data_stream_0_V_read : STD_LOGIC;
    signal ap_reg_procdone_blur_Block_proc9_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;
    signal ap_reg_procdone_blur_AXIM2Mat_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_blur_Loop_1_proc_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_blur_Filter2D_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_blur_Mat2AXIM_U0 : STD_LOGIC := '0';
    signal ap_CS : STD_LOGIC;
    signal ap_sig_top_allready : STD_LOGIC;
    signal ap_reg_ready_blur_Block_proc9_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_blur_Block_proc9_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_blur_Block_proc9_U0_ap_start : STD_LOGIC;
    signal ap_reg_ready_blur_AXIM2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sig_ready_blur_AXIM2Mat_U0_ap_ready : STD_LOGIC;
    signal ap_sig_start_in_blur_AXIM2Mat_U0_ap_start : STD_LOGIC;

    component blur_Block_proc9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_rows_V_out_full_n : IN STD_LOGIC;
        src_rows_V_out_write : OUT STD_LOGIC;
        src_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        src_cols_V_out_full_n : IN STD_LOGIC;
        src_cols_V_out_write : OUT STD_LOGIC;
        image_in : IN STD_LOGIC_VECTOR (31 downto 0);
        image_out : IN STD_LOGIC_VECTOR (31 downto 0);
        image_in_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_in_out_full_n : IN STD_LOGIC;
        image_in_out_write : OUT STD_LOGIC;
        image_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out_out_full_n : IN STD_LOGIC;
        image_out_out_write : OUT STD_LOGIC );
    end component;


    component blur_AXIM2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        image_in_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        image_in_empty_n : IN STD_LOGIC;
        image_in_read : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_full_n : IN STD_LOGIC;
        img_data_stream_V_write : OUT STD_LOGIC;
        img_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_out_full_n : IN STD_LOGIC;
        img_rows_V_out_write : OUT STD_LOGIC;
        img_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_out_full_n : IN STD_LOGIC;
        img_cols_V_out_write : OUT STD_LOGIC );
    end component;


    component blur_Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component blur_Filter2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_rows_V_empty_n : IN STD_LOGIC;
        p_src_rows_V_read : OUT STD_LOGIC;
        p_src_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        p_src_cols_V_empty_n : IN STD_LOGIC;
        p_src_cols_V_read : OUT STD_LOGIC;
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC;
        p_kernel_val_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_kernel_val_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component blur_Mat2AXIM IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_V_empty_n : IN STD_LOGIC;
        img_data_stream_V_read : OUT STD_LOGIC;
        m_axi_fb_AWVALID : OUT STD_LOGIC;
        m_axi_fb_AWREADY : IN STD_LOGIC;
        m_axi_fb_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WVALID : OUT STD_LOGIC;
        m_axi_fb_WREADY : IN STD_LOGIC;
        m_axi_fb_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WLAST : OUT STD_LOGIC;
        m_axi_fb_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARVALID : OUT STD_LOGIC;
        m_axi_fb_ARREADY : IN STD_LOGIC;
        m_axi_fb_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_fb_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_fb_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_fb_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RVALID : IN STD_LOGIC;
        m_axi_fb_RREADY : OUT STD_LOGIC;
        m_axi_fb_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_fb_RLAST : IN STD_LOGIC;
        m_axi_fb_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BVALID : IN STD_LOGIC;
        m_axi_fb_BREADY : OUT STD_LOGIC;
        m_axi_fb_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_fb_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_fb_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        image_out_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        image_out_empty_n : IN STD_LOGIC;
        image_out_read : OUT STD_LOGIC );
    end component;


    component FIFO_blur_src_rows_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_src_cols_V_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_image_in_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_image_out_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_src_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_src_rows_V_channel38 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_src_cols_V_channel39 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_0_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_0_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_0_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_1_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_1_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_1_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_2_0_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_2_1_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_kernel_val_2_2_channel IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_blur_dst_data_stream_0_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component blur_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        image_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blur_CRTL_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    blur_AXILiteS_s_axi_U : component blur_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => blur_AXILiteS_s_axi_U_ap_dummy_ce,
        image_in => image_in,
        image_out => image_out);

    blur_CRTL_BUS_m_axi_U : component blur_CRTL_BUS_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_CRTL_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_CRTL_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_CRTL_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_CRTL_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_CRTL_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_CRTL_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_CRTL_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_CRTL_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_CRTL_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_CRTL_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_CRTL_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_CRTL_BUS_AWVALID,
        AWREADY => m_axi_CRTL_BUS_AWREADY,
        AWADDR => m_axi_CRTL_BUS_AWADDR,
        AWID => m_axi_CRTL_BUS_AWID,
        AWLEN => m_axi_CRTL_BUS_AWLEN,
        AWSIZE => m_axi_CRTL_BUS_AWSIZE,
        AWBURST => m_axi_CRTL_BUS_AWBURST,
        AWLOCK => m_axi_CRTL_BUS_AWLOCK,
        AWCACHE => m_axi_CRTL_BUS_AWCACHE,
        AWPROT => m_axi_CRTL_BUS_AWPROT,
        AWQOS => m_axi_CRTL_BUS_AWQOS,
        AWREGION => m_axi_CRTL_BUS_AWREGION,
        AWUSER => m_axi_CRTL_BUS_AWUSER,
        WVALID => m_axi_CRTL_BUS_WVALID,
        WREADY => m_axi_CRTL_BUS_WREADY,
        WDATA => m_axi_CRTL_BUS_WDATA,
        WSTRB => m_axi_CRTL_BUS_WSTRB,
        WLAST => m_axi_CRTL_BUS_WLAST,
        WID => m_axi_CRTL_BUS_WID,
        WUSER => m_axi_CRTL_BUS_WUSER,
        ARVALID => m_axi_CRTL_BUS_ARVALID,
        ARREADY => m_axi_CRTL_BUS_ARREADY,
        ARADDR => m_axi_CRTL_BUS_ARADDR,
        ARID => m_axi_CRTL_BUS_ARID,
        ARLEN => m_axi_CRTL_BUS_ARLEN,
        ARSIZE => m_axi_CRTL_BUS_ARSIZE,
        ARBURST => m_axi_CRTL_BUS_ARBURST,
        ARLOCK => m_axi_CRTL_BUS_ARLOCK,
        ARCACHE => m_axi_CRTL_BUS_ARCACHE,
        ARPROT => m_axi_CRTL_BUS_ARPROT,
        ARQOS => m_axi_CRTL_BUS_ARQOS,
        ARREGION => m_axi_CRTL_BUS_ARREGION,
        ARUSER => m_axi_CRTL_BUS_ARUSER,
        RVALID => m_axi_CRTL_BUS_RVALID,
        RREADY => m_axi_CRTL_BUS_RREADY,
        RDATA => m_axi_CRTL_BUS_RDATA,
        RLAST => m_axi_CRTL_BUS_RLAST,
        RID => m_axi_CRTL_BUS_RID,
        RUSER => m_axi_CRTL_BUS_RUSER,
        RRESP => m_axi_CRTL_BUS_RRESP,
        BVALID => m_axi_CRTL_BUS_BVALID,
        BREADY => m_axi_CRTL_BUS_BREADY,
        BRESP => m_axi_CRTL_BUS_BRESP,
        BID => m_axi_CRTL_BUS_BID,
        BUSER => m_axi_CRTL_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => blur_CRTL_BUS_m_axi_U_ap_dummy_ce,
        I_ARVALID => CRTL_BUS_ARVALID,
        I_ARREADY => CRTL_BUS_ARREADY,
        I_ARADDR => CRTL_BUS_ARADDR,
        I_ARID => CRTL_BUS_ARID,
        I_ARLEN => CRTL_BUS_ARLEN,
        I_ARSIZE => CRTL_BUS_ARSIZE,
        I_ARLOCK => CRTL_BUS_ARLOCK,
        I_ARCACHE => CRTL_BUS_ARCACHE,
        I_ARQOS => CRTL_BUS_ARQOS,
        I_ARPROT => CRTL_BUS_ARPROT,
        I_ARUSER => CRTL_BUS_ARUSER,
        I_ARBURST => CRTL_BUS_ARBURST,
        I_ARREGION => CRTL_BUS_ARREGION,
        I_RVALID => CRTL_BUS_RVALID,
        I_RREADY => CRTL_BUS_RREADY,
        I_RDATA => CRTL_BUS_RDATA,
        I_RID => CRTL_BUS_RID,
        I_RUSER => CRTL_BUS_RUSER,
        I_RRESP => CRTL_BUS_RRESP,
        I_RLAST => CRTL_BUS_RLAST,
        I_AWVALID => CRTL_BUS_AWVALID,
        I_AWREADY => CRTL_BUS_AWREADY,
        I_AWADDR => CRTL_BUS_AWADDR,
        I_AWID => CRTL_BUS_AWID,
        I_AWLEN => CRTL_BUS_AWLEN,
        I_AWSIZE => CRTL_BUS_AWSIZE,
        I_AWLOCK => CRTL_BUS_AWLOCK,
        I_AWCACHE => CRTL_BUS_AWCACHE,
        I_AWQOS => CRTL_BUS_AWQOS,
        I_AWPROT => CRTL_BUS_AWPROT,
        I_AWUSER => CRTL_BUS_AWUSER,
        I_AWBURST => CRTL_BUS_AWBURST,
        I_AWREGION => CRTL_BUS_AWREGION,
        I_WVALID => CRTL_BUS_WVALID,
        I_WREADY => CRTL_BUS_WREADY,
        I_WDATA => CRTL_BUS_WDATA,
        I_WID => CRTL_BUS_WID,
        I_WUSER => CRTL_BUS_WUSER,
        I_WLAST => CRTL_BUS_WLAST,
        I_WSTRB => CRTL_BUS_WSTRB,
        I_BVALID => CRTL_BUS_BVALID,
        I_BREADY => CRTL_BUS_BREADY,
        I_BRESP => CRTL_BUS_BRESP,
        I_BID => CRTL_BUS_BID,
        I_BUSER => CRTL_BUS_BUSER);

    blur_Block_proc9_U0 : component blur_Block_proc9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => blur_Block_proc9_U0_ap_start,
        ap_done => blur_Block_proc9_U0_ap_done,
        ap_continue => blur_Block_proc9_U0_ap_continue,
        ap_idle => blur_Block_proc9_U0_ap_idle,
        ap_ready => blur_Block_proc9_U0_ap_ready,
        src_rows_V_out_din => blur_Block_proc9_U0_src_rows_V_out_din,
        src_rows_V_out_full_n => blur_Block_proc9_U0_src_rows_V_out_full_n,
        src_rows_V_out_write => blur_Block_proc9_U0_src_rows_V_out_write,
        src_cols_V_out_din => blur_Block_proc9_U0_src_cols_V_out_din,
        src_cols_V_out_full_n => blur_Block_proc9_U0_src_cols_V_out_full_n,
        src_cols_V_out_write => blur_Block_proc9_U0_src_cols_V_out_write,
        image_in => blur_Block_proc9_U0_image_in,
        image_out => blur_Block_proc9_U0_image_out,
        image_in_out_din => blur_Block_proc9_U0_image_in_out_din,
        image_in_out_full_n => blur_Block_proc9_U0_image_in_out_full_n,
        image_in_out_write => blur_Block_proc9_U0_image_in_out_write,
        image_out_out_din => blur_Block_proc9_U0_image_out_out_din,
        image_out_out_full_n => blur_Block_proc9_U0_image_out_out_full_n,
        image_out_out_write => blur_Block_proc9_U0_image_out_out_write);

    blur_AXIM2Mat_U0 : component blur_AXIM2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => blur_AXIM2Mat_U0_ap_start,
        ap_done => blur_AXIM2Mat_U0_ap_done,
        ap_continue => blur_AXIM2Mat_U0_ap_continue,
        ap_idle => blur_AXIM2Mat_U0_ap_idle,
        ap_ready => blur_AXIM2Mat_U0_ap_ready,
        m_axi_fb_AWVALID => blur_AXIM2Mat_U0_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => blur_AXIM2Mat_U0_m_axi_fb_AWREADY,
        m_axi_fb_AWADDR => blur_AXIM2Mat_U0_m_axi_fb_AWADDR,
        m_axi_fb_AWID => blur_AXIM2Mat_U0_m_axi_fb_AWID,
        m_axi_fb_AWLEN => blur_AXIM2Mat_U0_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => blur_AXIM2Mat_U0_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => blur_AXIM2Mat_U0_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => blur_AXIM2Mat_U0_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => blur_AXIM2Mat_U0_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => blur_AXIM2Mat_U0_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => blur_AXIM2Mat_U0_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => blur_AXIM2Mat_U0_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => blur_AXIM2Mat_U0_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => blur_AXIM2Mat_U0_m_axi_fb_WVALID,
        m_axi_fb_WREADY => blur_AXIM2Mat_U0_m_axi_fb_WREADY,
        m_axi_fb_WDATA => blur_AXIM2Mat_U0_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => blur_AXIM2Mat_U0_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => blur_AXIM2Mat_U0_m_axi_fb_WLAST,
        m_axi_fb_WID => blur_AXIM2Mat_U0_m_axi_fb_WID,
        m_axi_fb_WUSER => blur_AXIM2Mat_U0_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => blur_AXIM2Mat_U0_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => blur_AXIM2Mat_U0_m_axi_fb_ARREADY,
        m_axi_fb_ARADDR => blur_AXIM2Mat_U0_m_axi_fb_ARADDR,
        m_axi_fb_ARID => blur_AXIM2Mat_U0_m_axi_fb_ARID,
        m_axi_fb_ARLEN => blur_AXIM2Mat_U0_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => blur_AXIM2Mat_U0_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => blur_AXIM2Mat_U0_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => blur_AXIM2Mat_U0_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => blur_AXIM2Mat_U0_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => blur_AXIM2Mat_U0_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => blur_AXIM2Mat_U0_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => blur_AXIM2Mat_U0_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => blur_AXIM2Mat_U0_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => blur_AXIM2Mat_U0_m_axi_fb_RVALID,
        m_axi_fb_RREADY => blur_AXIM2Mat_U0_m_axi_fb_RREADY,
        m_axi_fb_RDATA => blur_AXIM2Mat_U0_m_axi_fb_RDATA,
        m_axi_fb_RLAST => blur_AXIM2Mat_U0_m_axi_fb_RLAST,
        m_axi_fb_RID => blur_AXIM2Mat_U0_m_axi_fb_RID,
        m_axi_fb_RUSER => blur_AXIM2Mat_U0_m_axi_fb_RUSER,
        m_axi_fb_RRESP => blur_AXIM2Mat_U0_m_axi_fb_RRESP,
        m_axi_fb_BVALID => blur_AXIM2Mat_U0_m_axi_fb_BVALID,
        m_axi_fb_BREADY => blur_AXIM2Mat_U0_m_axi_fb_BREADY,
        m_axi_fb_BRESP => blur_AXIM2Mat_U0_m_axi_fb_BRESP,
        m_axi_fb_BID => blur_AXIM2Mat_U0_m_axi_fb_BID,
        m_axi_fb_BUSER => blur_AXIM2Mat_U0_m_axi_fb_BUSER,
        image_in_dout => blur_AXIM2Mat_U0_image_in_dout,
        image_in_empty_n => blur_AXIM2Mat_U0_image_in_empty_n,
        image_in_read => blur_AXIM2Mat_U0_image_in_read,
        img_rows_V_dout => blur_AXIM2Mat_U0_img_rows_V_dout,
        img_rows_V_empty_n => blur_AXIM2Mat_U0_img_rows_V_empty_n,
        img_rows_V_read => blur_AXIM2Mat_U0_img_rows_V_read,
        img_cols_V_dout => blur_AXIM2Mat_U0_img_cols_V_dout,
        img_cols_V_empty_n => blur_AXIM2Mat_U0_img_cols_V_empty_n,
        img_cols_V_read => blur_AXIM2Mat_U0_img_cols_V_read,
        img_data_stream_V_din => blur_AXIM2Mat_U0_img_data_stream_V_din,
        img_data_stream_V_full_n => blur_AXIM2Mat_U0_img_data_stream_V_full_n,
        img_data_stream_V_write => blur_AXIM2Mat_U0_img_data_stream_V_write,
        img_rows_V_out_din => blur_AXIM2Mat_U0_img_rows_V_out_din,
        img_rows_V_out_full_n => blur_AXIM2Mat_U0_img_rows_V_out_full_n,
        img_rows_V_out_write => blur_AXIM2Mat_U0_img_rows_V_out_write,
        img_cols_V_out_din => blur_AXIM2Mat_U0_img_cols_V_out_din,
        img_cols_V_out_full_n => blur_AXIM2Mat_U0_img_cols_V_out_full_n,
        img_cols_V_out_write => blur_AXIM2Mat_U0_img_cols_V_out_write);

    blur_Loop_1_proc_U0 : component blur_Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => blur_Loop_1_proc_U0_ap_start,
        ap_done => blur_Loop_1_proc_U0_ap_done,
        ap_continue => blur_Loop_1_proc_U0_ap_continue,
        ap_idle => blur_Loop_1_proc_U0_ap_idle,
        ap_ready => blur_Loop_1_proc_U0_ap_ready,
        ap_return_0 => blur_Loop_1_proc_U0_ap_return_0,
        ap_return_1 => blur_Loop_1_proc_U0_ap_return_1,
        ap_return_2 => blur_Loop_1_proc_U0_ap_return_2,
        ap_return_3 => blur_Loop_1_proc_U0_ap_return_3,
        ap_return_4 => blur_Loop_1_proc_U0_ap_return_4,
        ap_return_5 => blur_Loop_1_proc_U0_ap_return_5,
        ap_return_6 => blur_Loop_1_proc_U0_ap_return_6,
        ap_return_7 => blur_Loop_1_proc_U0_ap_return_7,
        ap_return_8 => blur_Loop_1_proc_U0_ap_return_8);

    blur_Filter2D_U0 : component blur_Filter2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => blur_Filter2D_U0_ap_start,
        ap_done => blur_Filter2D_U0_ap_done,
        ap_continue => blur_Filter2D_U0_ap_continue,
        ap_idle => blur_Filter2D_U0_ap_idle,
        ap_ready => blur_Filter2D_U0_ap_ready,
        p_src_rows_V_dout => blur_Filter2D_U0_p_src_rows_V_dout,
        p_src_rows_V_empty_n => blur_Filter2D_U0_p_src_rows_V_empty_n,
        p_src_rows_V_read => blur_Filter2D_U0_p_src_rows_V_read,
        p_src_cols_V_dout => blur_Filter2D_U0_p_src_cols_V_dout,
        p_src_cols_V_empty_n => blur_Filter2D_U0_p_src_cols_V_empty_n,
        p_src_cols_V_read => blur_Filter2D_U0_p_src_cols_V_read,
        p_src_data_stream_V_dout => blur_Filter2D_U0_p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n => blur_Filter2D_U0_p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read => blur_Filter2D_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => blur_Filter2D_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => blur_Filter2D_U0_p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write => blur_Filter2D_U0_p_dst_data_stream_V_write,
        p_kernel_val_0_0_read => blur_Filter2D_U0_p_kernel_val_0_0_read,
        p_kernel_val_0_1_read => blur_Filter2D_U0_p_kernel_val_0_1_read,
        p_kernel_val_0_2_read => blur_Filter2D_U0_p_kernel_val_0_2_read,
        p_kernel_val_1_0_read => blur_Filter2D_U0_p_kernel_val_1_0_read,
        p_kernel_val_1_1_read => blur_Filter2D_U0_p_kernel_val_1_1_read,
        p_kernel_val_1_2_read => blur_Filter2D_U0_p_kernel_val_1_2_read,
        p_kernel_val_2_0_read => blur_Filter2D_U0_p_kernel_val_2_0_read,
        p_kernel_val_2_1_read => blur_Filter2D_U0_p_kernel_val_2_1_read,
        p_kernel_val_2_2_read => blur_Filter2D_U0_p_kernel_val_2_2_read);

    blur_Mat2AXIM_U0 : component blur_Mat2AXIM
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => blur_Mat2AXIM_U0_ap_start,
        ap_done => blur_Mat2AXIM_U0_ap_done,
        ap_continue => blur_Mat2AXIM_U0_ap_continue,
        ap_idle => blur_Mat2AXIM_U0_ap_idle,
        ap_ready => blur_Mat2AXIM_U0_ap_ready,
        img_data_stream_V_dout => blur_Mat2AXIM_U0_img_data_stream_V_dout,
        img_data_stream_V_empty_n => blur_Mat2AXIM_U0_img_data_stream_V_empty_n,
        img_data_stream_V_read => blur_Mat2AXIM_U0_img_data_stream_V_read,
        m_axi_fb_AWVALID => blur_Mat2AXIM_U0_m_axi_fb_AWVALID,
        m_axi_fb_AWREADY => blur_Mat2AXIM_U0_m_axi_fb_AWREADY,
        m_axi_fb_AWADDR => blur_Mat2AXIM_U0_m_axi_fb_AWADDR,
        m_axi_fb_AWID => blur_Mat2AXIM_U0_m_axi_fb_AWID,
        m_axi_fb_AWLEN => blur_Mat2AXIM_U0_m_axi_fb_AWLEN,
        m_axi_fb_AWSIZE => blur_Mat2AXIM_U0_m_axi_fb_AWSIZE,
        m_axi_fb_AWBURST => blur_Mat2AXIM_U0_m_axi_fb_AWBURST,
        m_axi_fb_AWLOCK => blur_Mat2AXIM_U0_m_axi_fb_AWLOCK,
        m_axi_fb_AWCACHE => blur_Mat2AXIM_U0_m_axi_fb_AWCACHE,
        m_axi_fb_AWPROT => blur_Mat2AXIM_U0_m_axi_fb_AWPROT,
        m_axi_fb_AWQOS => blur_Mat2AXIM_U0_m_axi_fb_AWQOS,
        m_axi_fb_AWREGION => blur_Mat2AXIM_U0_m_axi_fb_AWREGION,
        m_axi_fb_AWUSER => blur_Mat2AXIM_U0_m_axi_fb_AWUSER,
        m_axi_fb_WVALID => blur_Mat2AXIM_U0_m_axi_fb_WVALID,
        m_axi_fb_WREADY => blur_Mat2AXIM_U0_m_axi_fb_WREADY,
        m_axi_fb_WDATA => blur_Mat2AXIM_U0_m_axi_fb_WDATA,
        m_axi_fb_WSTRB => blur_Mat2AXIM_U0_m_axi_fb_WSTRB,
        m_axi_fb_WLAST => blur_Mat2AXIM_U0_m_axi_fb_WLAST,
        m_axi_fb_WID => blur_Mat2AXIM_U0_m_axi_fb_WID,
        m_axi_fb_WUSER => blur_Mat2AXIM_U0_m_axi_fb_WUSER,
        m_axi_fb_ARVALID => blur_Mat2AXIM_U0_m_axi_fb_ARVALID,
        m_axi_fb_ARREADY => blur_Mat2AXIM_U0_m_axi_fb_ARREADY,
        m_axi_fb_ARADDR => blur_Mat2AXIM_U0_m_axi_fb_ARADDR,
        m_axi_fb_ARID => blur_Mat2AXIM_U0_m_axi_fb_ARID,
        m_axi_fb_ARLEN => blur_Mat2AXIM_U0_m_axi_fb_ARLEN,
        m_axi_fb_ARSIZE => blur_Mat2AXIM_U0_m_axi_fb_ARSIZE,
        m_axi_fb_ARBURST => blur_Mat2AXIM_U0_m_axi_fb_ARBURST,
        m_axi_fb_ARLOCK => blur_Mat2AXIM_U0_m_axi_fb_ARLOCK,
        m_axi_fb_ARCACHE => blur_Mat2AXIM_U0_m_axi_fb_ARCACHE,
        m_axi_fb_ARPROT => blur_Mat2AXIM_U0_m_axi_fb_ARPROT,
        m_axi_fb_ARQOS => blur_Mat2AXIM_U0_m_axi_fb_ARQOS,
        m_axi_fb_ARREGION => blur_Mat2AXIM_U0_m_axi_fb_ARREGION,
        m_axi_fb_ARUSER => blur_Mat2AXIM_U0_m_axi_fb_ARUSER,
        m_axi_fb_RVALID => blur_Mat2AXIM_U0_m_axi_fb_RVALID,
        m_axi_fb_RREADY => blur_Mat2AXIM_U0_m_axi_fb_RREADY,
        m_axi_fb_RDATA => blur_Mat2AXIM_U0_m_axi_fb_RDATA,
        m_axi_fb_RLAST => blur_Mat2AXIM_U0_m_axi_fb_RLAST,
        m_axi_fb_RID => blur_Mat2AXIM_U0_m_axi_fb_RID,
        m_axi_fb_RUSER => blur_Mat2AXIM_U0_m_axi_fb_RUSER,
        m_axi_fb_RRESP => blur_Mat2AXIM_U0_m_axi_fb_RRESP,
        m_axi_fb_BVALID => blur_Mat2AXIM_U0_m_axi_fb_BVALID,
        m_axi_fb_BREADY => blur_Mat2AXIM_U0_m_axi_fb_BREADY,
        m_axi_fb_BRESP => blur_Mat2AXIM_U0_m_axi_fb_BRESP,
        m_axi_fb_BID => blur_Mat2AXIM_U0_m_axi_fb_BID,
        m_axi_fb_BUSER => blur_Mat2AXIM_U0_m_axi_fb_BUSER,
        image_out_dout => blur_Mat2AXIM_U0_image_out_dout,
        image_out_empty_n => blur_Mat2AXIM_U0_image_out_empty_n,
        image_out_read => blur_Mat2AXIM_U0_image_out_read);

    src_rows_V_channel_U : component FIFO_blur_src_rows_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src_rows_V_channel_U_ap_dummy_ce,
        if_write_ce => src_rows_V_channel_U_ap_dummy_ce,
        if_din => src_rows_V_channel_din,
        if_full_n => src_rows_V_channel_full_n,
        if_write => src_rows_V_channel_write,
        if_dout => src_rows_V_channel_dout,
        if_empty_n => src_rows_V_channel_empty_n,
        if_read => src_rows_V_channel_read);

    src_cols_V_channel_U : component FIFO_blur_src_cols_V_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src_cols_V_channel_U_ap_dummy_ce,
        if_write_ce => src_cols_V_channel_U_ap_dummy_ce,
        if_din => src_cols_V_channel_din,
        if_full_n => src_cols_V_channel_full_n,
        if_write => src_cols_V_channel_write,
        if_dout => src_cols_V_channel_dout,
        if_empty_n => src_cols_V_channel_empty_n,
        if_read => src_cols_V_channel_read);

    image_in_channel_U : component FIFO_blur_image_in_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => image_in_channel_U_ap_dummy_ce,
        if_write_ce => image_in_channel_U_ap_dummy_ce,
        if_din => image_in_channel_din,
        if_full_n => image_in_channel_full_n,
        if_write => image_in_channel_write,
        if_dout => image_in_channel_dout,
        if_empty_n => image_in_channel_empty_n,
        if_read => image_in_channel_read);

    image_out_channel_U : component FIFO_blur_image_out_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => image_out_channel_U_ap_dummy_ce,
        if_write_ce => image_out_channel_U_ap_dummy_ce,
        if_din => image_out_channel_din,
        if_full_n => image_out_channel_full_n,
        if_write => image_out_channel_write,
        if_dout => image_out_channel_dout,
        if_empty_n => image_out_channel_empty_n,
        if_read => image_out_channel_read);

    src_data_stream_0_V_U : component FIFO_blur_src_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => src_data_stream_0_V_U_ap_dummy_ce,
        if_din => src_data_stream_0_V_din,
        if_full_n => src_data_stream_0_V_full_n,
        if_write => src_data_stream_0_V_write,
        if_dout => src_data_stream_0_V_dout,
        if_empty_n => src_data_stream_0_V_empty_n,
        if_read => src_data_stream_0_V_read);

    src_rows_V_channel38_U : component FIFO_blur_src_rows_V_channel38
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src_rows_V_channel38_U_ap_dummy_ce,
        if_write_ce => src_rows_V_channel38_U_ap_dummy_ce,
        if_din => src_rows_V_channel38_din,
        if_full_n => src_rows_V_channel38_full_n,
        if_write => src_rows_V_channel38_write,
        if_dout => src_rows_V_channel38_dout,
        if_empty_n => src_rows_V_channel38_empty_n,
        if_read => src_rows_V_channel38_read);

    src_cols_V_channel39_U : component FIFO_blur_src_cols_V_channel39
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => src_cols_V_channel39_U_ap_dummy_ce,
        if_write_ce => src_cols_V_channel39_U_ap_dummy_ce,
        if_din => src_cols_V_channel39_din,
        if_full_n => src_cols_V_channel39_full_n,
        if_write => src_cols_V_channel39_write,
        if_dout => src_cols_V_channel39_dout,
        if_empty_n => src_cols_V_channel39_empty_n,
        if_read => src_cols_V_channel39_read);

    kernel_val_0_0_channel_U : component FIFO_blur_kernel_val_0_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_0_0_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_0_0_channel_U_ap_dummy_ce,
        if_din => kernel_val_0_0_channel_din,
        if_full_n => kernel_val_0_0_channel_full_n,
        if_write => kernel_val_0_0_channel_write,
        if_dout => kernel_val_0_0_channel_dout,
        if_empty_n => kernel_val_0_0_channel_empty_n,
        if_read => kernel_val_0_0_channel_read);

    kernel_val_0_1_channel_U : component FIFO_blur_kernel_val_0_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_0_1_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_0_1_channel_U_ap_dummy_ce,
        if_din => kernel_val_0_1_channel_din,
        if_full_n => kernel_val_0_1_channel_full_n,
        if_write => kernel_val_0_1_channel_write,
        if_dout => kernel_val_0_1_channel_dout,
        if_empty_n => kernel_val_0_1_channel_empty_n,
        if_read => kernel_val_0_1_channel_read);

    kernel_val_0_2_channel_U : component FIFO_blur_kernel_val_0_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_0_2_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_0_2_channel_U_ap_dummy_ce,
        if_din => kernel_val_0_2_channel_din,
        if_full_n => kernel_val_0_2_channel_full_n,
        if_write => kernel_val_0_2_channel_write,
        if_dout => kernel_val_0_2_channel_dout,
        if_empty_n => kernel_val_0_2_channel_empty_n,
        if_read => kernel_val_0_2_channel_read);

    kernel_val_1_0_channel_U : component FIFO_blur_kernel_val_1_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_1_0_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_1_0_channel_U_ap_dummy_ce,
        if_din => kernel_val_1_0_channel_din,
        if_full_n => kernel_val_1_0_channel_full_n,
        if_write => kernel_val_1_0_channel_write,
        if_dout => kernel_val_1_0_channel_dout,
        if_empty_n => kernel_val_1_0_channel_empty_n,
        if_read => kernel_val_1_0_channel_read);

    kernel_val_1_1_channel_U : component FIFO_blur_kernel_val_1_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_1_1_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_1_1_channel_U_ap_dummy_ce,
        if_din => kernel_val_1_1_channel_din,
        if_full_n => kernel_val_1_1_channel_full_n,
        if_write => kernel_val_1_1_channel_write,
        if_dout => kernel_val_1_1_channel_dout,
        if_empty_n => kernel_val_1_1_channel_empty_n,
        if_read => kernel_val_1_1_channel_read);

    kernel_val_1_2_channel_U : component FIFO_blur_kernel_val_1_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_1_2_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_1_2_channel_U_ap_dummy_ce,
        if_din => kernel_val_1_2_channel_din,
        if_full_n => kernel_val_1_2_channel_full_n,
        if_write => kernel_val_1_2_channel_write,
        if_dout => kernel_val_1_2_channel_dout,
        if_empty_n => kernel_val_1_2_channel_empty_n,
        if_read => kernel_val_1_2_channel_read);

    kernel_val_2_0_channel_U : component FIFO_blur_kernel_val_2_0_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_2_0_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_2_0_channel_U_ap_dummy_ce,
        if_din => kernel_val_2_0_channel_din,
        if_full_n => kernel_val_2_0_channel_full_n,
        if_write => kernel_val_2_0_channel_write,
        if_dout => kernel_val_2_0_channel_dout,
        if_empty_n => kernel_val_2_0_channel_empty_n,
        if_read => kernel_val_2_0_channel_read);

    kernel_val_2_1_channel_U : component FIFO_blur_kernel_val_2_1_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_2_1_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_2_1_channel_U_ap_dummy_ce,
        if_din => kernel_val_2_1_channel_din,
        if_full_n => kernel_val_2_1_channel_full_n,
        if_write => kernel_val_2_1_channel_write,
        if_dout => kernel_val_2_1_channel_dout,
        if_empty_n => kernel_val_2_1_channel_empty_n,
        if_read => kernel_val_2_1_channel_read);

    kernel_val_2_2_channel_U : component FIFO_blur_kernel_val_2_2_channel
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => kernel_val_2_2_channel_U_ap_dummy_ce,
        if_write_ce => kernel_val_2_2_channel_U_ap_dummy_ce,
        if_din => kernel_val_2_2_channel_din,
        if_full_n => kernel_val_2_2_channel_full_n,
        if_write => kernel_val_2_2_channel_write,
        if_dout => kernel_val_2_2_channel_dout,
        if_empty_n => kernel_val_2_2_channel_empty_n,
        if_read => kernel_val_2_2_channel_read);

    dst_data_stream_0_V_U : component FIFO_blur_dst_data_stream_0_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => dst_data_stream_0_V_U_ap_dummy_ce,
        if_write_ce => dst_data_stream_0_V_U_ap_dummy_ce,
        if_din => dst_data_stream_0_V_din,
        if_full_n => dst_data_stream_0_V_full_n,
        if_write => dst_data_stream_0_V_write,
        if_dout => dst_data_stream_0_V_dout,
        if_empty_n => dst_data_stream_0_V_empty_n,
        if_read => dst_data_stream_0_V_read);





    -- ap_reg_procdone_blur_AXIM2Mat_U0 assign process. --
    ap_reg_procdone_blur_AXIM2Mat_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_AXIM2Mat_U0_ap_done)) then 
                    ap_reg_procdone_blur_AXIM2Mat_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_blur_Block_proc9_U0 assign process. --
    ap_reg_procdone_blur_Block_proc9_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_Block_proc9_U0_ap_done)) then 
                    ap_reg_procdone_blur_Block_proc9_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_blur_Filter2D_U0 assign process. --
    ap_reg_procdone_blur_Filter2D_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_Filter2D_U0_ap_done)) then 
                    ap_reg_procdone_blur_Filter2D_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_blur_Loop_1_proc_U0 assign process. --
    ap_reg_procdone_blur_Loop_1_proc_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done)) then 
                    ap_reg_procdone_blur_Loop_1_proc_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_procdone_blur_Mat2AXIM_U0 assign process. --
    ap_reg_procdone_blur_Mat2AXIM_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_hs_done)) then 
                    ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_Mat2AXIM_U0_ap_done)) then 
                    ap_reg_procdone_blur_Mat2AXIM_U0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_blur_AXIM2Mat_U0_ap_ready assign process. --
    ap_reg_ready_blur_AXIM2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_AXIM2Mat_U0_ap_ready)) then 
                    ap_reg_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_blur_Block_proc9_U0_ap_ready assign process. --
    ap_reg_ready_blur_Block_proc9_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_start) and (ap_const_logic_1 = ap_sig_top_allready))) then 
                    ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = blur_Block_proc9_U0_ap_ready)) then 
                    ap_reg_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_0_0_channel_full_n assign process. --
    ap_reg_ready_kernel_val_0_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_0_0_channel_full_n))) then 
                    ap_reg_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_0_1_channel_full_n assign process. --
    ap_reg_ready_kernel_val_0_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_0_1_channel_full_n))) then 
                    ap_reg_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_0_2_channel_full_n assign process. --
    ap_reg_ready_kernel_val_0_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_0_2_channel_full_n))) then 
                    ap_reg_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_1_0_channel_full_n assign process. --
    ap_reg_ready_kernel_val_1_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_1_0_channel_full_n))) then 
                    ap_reg_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_1_1_channel_full_n assign process. --
    ap_reg_ready_kernel_val_1_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_1_1_channel_full_n))) then 
                    ap_reg_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_1_2_channel_full_n assign process. --
    ap_reg_ready_kernel_val_1_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_1_2_channel_full_n))) then 
                    ap_reg_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_2_0_channel_full_n assign process. --
    ap_reg_ready_kernel_val_2_0_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_2_0_channel_full_n))) then 
                    ap_reg_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_2_1_channel_full_n assign process. --
    ap_reg_ready_kernel_val_2_1_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_2_1_channel_full_n))) then 
                    ap_reg_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ready_kernel_val_2_2_channel_full_n assign process. --
    ap_reg_ready_kernel_val_2_2_channel_full_n_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_continue))) then 
                    ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = blur_Loop_1_proc_U0_ap_done) and (ap_const_logic_1 = kernel_val_2_2_channel_full_n))) then 
                    ap_reg_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- blur_Mat2AXIM_U0_ap_start assign process. --
    blur_Mat2AXIM_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                blur_Mat2AXIM_U0_ap_start <= ap_const_logic_0;
            else
                blur_Mat2AXIM_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;
    CRTL_BUS_ARADDR <= blur_AXIM2Mat_U0_m_axi_fb_ARADDR;
    CRTL_BUS_ARBURST <= blur_AXIM2Mat_U0_m_axi_fb_ARBURST;
    CRTL_BUS_ARCACHE <= blur_AXIM2Mat_U0_m_axi_fb_ARCACHE;
    CRTL_BUS_ARID <= blur_AXIM2Mat_U0_m_axi_fb_ARID;
    CRTL_BUS_ARLEN <= blur_AXIM2Mat_U0_m_axi_fb_ARLEN;
    CRTL_BUS_ARLOCK <= blur_AXIM2Mat_U0_m_axi_fb_ARLOCK;
    CRTL_BUS_ARPROT <= blur_AXIM2Mat_U0_m_axi_fb_ARPROT;
    CRTL_BUS_ARQOS <= blur_AXIM2Mat_U0_m_axi_fb_ARQOS;
    CRTL_BUS_ARREGION <= blur_AXIM2Mat_U0_m_axi_fb_ARREGION;
    CRTL_BUS_ARSIZE <= blur_AXIM2Mat_U0_m_axi_fb_ARSIZE;
    CRTL_BUS_ARUSER <= blur_AXIM2Mat_U0_m_axi_fb_ARUSER;
    CRTL_BUS_ARVALID <= blur_AXIM2Mat_U0_m_axi_fb_ARVALID;
    CRTL_BUS_AWADDR <= blur_Mat2AXIM_U0_m_axi_fb_AWADDR;
    CRTL_BUS_AWBURST <= blur_Mat2AXIM_U0_m_axi_fb_AWBURST;
    CRTL_BUS_AWCACHE <= blur_Mat2AXIM_U0_m_axi_fb_AWCACHE;
    CRTL_BUS_AWID <= blur_Mat2AXIM_U0_m_axi_fb_AWID;
    CRTL_BUS_AWLEN <= blur_Mat2AXIM_U0_m_axi_fb_AWLEN;
    CRTL_BUS_AWLOCK <= blur_Mat2AXIM_U0_m_axi_fb_AWLOCK;
    CRTL_BUS_AWPROT <= blur_Mat2AXIM_U0_m_axi_fb_AWPROT;
    CRTL_BUS_AWQOS <= blur_Mat2AXIM_U0_m_axi_fb_AWQOS;
    CRTL_BUS_AWREGION <= blur_Mat2AXIM_U0_m_axi_fb_AWREGION;
    CRTL_BUS_AWSIZE <= blur_Mat2AXIM_U0_m_axi_fb_AWSIZE;
    CRTL_BUS_AWUSER <= blur_Mat2AXIM_U0_m_axi_fb_AWUSER;
    CRTL_BUS_AWVALID <= blur_Mat2AXIM_U0_m_axi_fb_AWVALID;
    CRTL_BUS_BREADY <= blur_Mat2AXIM_U0_m_axi_fb_BREADY;
    CRTL_BUS_RREADY <= blur_AXIM2Mat_U0_m_axi_fb_RREADY;
    CRTL_BUS_WDATA <= blur_Mat2AXIM_U0_m_axi_fb_WDATA;
    CRTL_BUS_WID <= blur_Mat2AXIM_U0_m_axi_fb_WID;
    CRTL_BUS_WLAST <= blur_Mat2AXIM_U0_m_axi_fb_WLAST;
    CRTL_BUS_WSTRB <= blur_Mat2AXIM_U0_m_axi_fb_WSTRB;
    CRTL_BUS_WUSER <= blur_Mat2AXIM_U0_m_axi_fb_WUSER;
    CRTL_BUS_WVALID <= blur_Mat2AXIM_U0_m_axi_fb_WVALID;

    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_0_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_0_0_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_0_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_0_1_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_0_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_0_2_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_1_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_1_0_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_1_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_1_1_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_1_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_1_2_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_2_0_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_2_0_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_2_1_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_2_1_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;


    -- ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel assign process. --
    ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel_assign_proc : process(blur_Loop_1_proc_U0_ap_done, ap_reg_ready_kernel_val_2_2_channel_full_n)
    begin
        if ((ap_const_logic_1 = ap_reg_ready_kernel_val_2_2_channel_full_n)) then 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel <= ap_const_logic_0;
        else 
            ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel <= blur_Loop_1_proc_U0_ap_done;
        end if; 
    end process;

    ap_done <= ap_sig_hs_done;

    -- ap_idle assign process. --
    ap_idle_assign_proc : process(blur_Block_proc9_U0_ap_idle, blur_AXIM2Mat_U0_ap_idle, blur_Loop_1_proc_U0_ap_idle, blur_Filter2D_U0_ap_idle, blur_Mat2AXIM_U0_ap_idle, kernel_val_0_0_channel_empty_n, kernel_val_0_1_channel_empty_n, kernel_val_0_2_channel_empty_n, kernel_val_1_0_channel_empty_n, kernel_val_1_1_channel_empty_n, kernel_val_1_2_channel_empty_n, kernel_val_2_0_channel_empty_n, kernel_val_2_1_channel_empty_n, kernel_val_2_2_channel_empty_n)
    begin
        if (((ap_const_logic_1 = blur_Block_proc9_U0_ap_idle) and (ap_const_logic_1 = blur_AXIM2Mat_U0_ap_idle) and (ap_const_logic_1 = blur_Loop_1_proc_U0_ap_idle) and (ap_const_logic_1 = blur_Filter2D_U0_ap_idle) and (ap_const_logic_1 = blur_Mat2AXIM_U0_ap_idle) and (ap_const_logic_0 = kernel_val_0_0_channel_empty_n) and (ap_const_logic_0 = kernel_val_0_1_channel_empty_n) and (ap_const_logic_0 = kernel_val_0_2_channel_empty_n) and (ap_const_logic_0 = kernel_val_1_0_channel_empty_n) and (ap_const_logic_0 = kernel_val_1_1_channel_empty_n) and (ap_const_logic_0 = kernel_val_1_2_channel_empty_n) and (ap_const_logic_0 = kernel_val_2_0_channel_empty_n) and (ap_const_logic_0 = kernel_val_2_1_channel_empty_n) and (ap_const_logic_0 = kernel_val_2_2_channel_empty_n))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_sig_top_allready;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_1;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(blur_Mat2AXIM_U0_ap_done)
    begin
        if ((ap_const_logic_1 = blur_Mat2AXIM_U0_ap_done)) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ready_blur_AXIM2Mat_U0_ap_ready assign process. --
    ap_sig_ready_blur_AXIM2Mat_U0_ap_ready_assign_proc : process(blur_AXIM2Mat_U0_ap_ready, ap_reg_ready_blur_AXIM2Mat_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_blur_AXIM2Mat_U0_ap_ready)) then 
            ap_sig_ready_blur_AXIM2Mat_U0_ap_ready <= blur_AXIM2Mat_U0_ap_ready;
        else 
            ap_sig_ready_blur_AXIM2Mat_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_blur_Block_proc9_U0_ap_ready assign process. --
    ap_sig_ready_blur_Block_proc9_U0_ap_ready_assign_proc : process(blur_Block_proc9_U0_ap_ready, ap_reg_ready_blur_Block_proc9_U0_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_blur_Block_proc9_U0_ap_ready)) then 
            ap_sig_ready_blur_Block_proc9_U0_ap_ready <= blur_Block_proc9_U0_ap_ready;
        else 
            ap_sig_ready_blur_Block_proc9_U0_ap_ready <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_0_0_channel_full_n assign process. --
    ap_sig_ready_kernel_val_0_0_channel_full_n_assign_proc : process(kernel_val_0_0_channel_full_n, ap_reg_ready_kernel_val_0_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_0_0_channel_full_n)) then 
            ap_sig_ready_kernel_val_0_0_channel_full_n <= kernel_val_0_0_channel_full_n;
        else 
            ap_sig_ready_kernel_val_0_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_0_1_channel_full_n assign process. --
    ap_sig_ready_kernel_val_0_1_channel_full_n_assign_proc : process(kernel_val_0_1_channel_full_n, ap_reg_ready_kernel_val_0_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_0_1_channel_full_n)) then 
            ap_sig_ready_kernel_val_0_1_channel_full_n <= kernel_val_0_1_channel_full_n;
        else 
            ap_sig_ready_kernel_val_0_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_0_2_channel_full_n assign process. --
    ap_sig_ready_kernel_val_0_2_channel_full_n_assign_proc : process(kernel_val_0_2_channel_full_n, ap_reg_ready_kernel_val_0_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_0_2_channel_full_n)) then 
            ap_sig_ready_kernel_val_0_2_channel_full_n <= kernel_val_0_2_channel_full_n;
        else 
            ap_sig_ready_kernel_val_0_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_1_0_channel_full_n assign process. --
    ap_sig_ready_kernel_val_1_0_channel_full_n_assign_proc : process(kernel_val_1_0_channel_full_n, ap_reg_ready_kernel_val_1_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_1_0_channel_full_n)) then 
            ap_sig_ready_kernel_val_1_0_channel_full_n <= kernel_val_1_0_channel_full_n;
        else 
            ap_sig_ready_kernel_val_1_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_1_1_channel_full_n assign process. --
    ap_sig_ready_kernel_val_1_1_channel_full_n_assign_proc : process(kernel_val_1_1_channel_full_n, ap_reg_ready_kernel_val_1_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_1_1_channel_full_n)) then 
            ap_sig_ready_kernel_val_1_1_channel_full_n <= kernel_val_1_1_channel_full_n;
        else 
            ap_sig_ready_kernel_val_1_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_1_2_channel_full_n assign process. --
    ap_sig_ready_kernel_val_1_2_channel_full_n_assign_proc : process(kernel_val_1_2_channel_full_n, ap_reg_ready_kernel_val_1_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_1_2_channel_full_n)) then 
            ap_sig_ready_kernel_val_1_2_channel_full_n <= kernel_val_1_2_channel_full_n;
        else 
            ap_sig_ready_kernel_val_1_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_2_0_channel_full_n assign process. --
    ap_sig_ready_kernel_val_2_0_channel_full_n_assign_proc : process(kernel_val_2_0_channel_full_n, ap_reg_ready_kernel_val_2_0_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_2_0_channel_full_n)) then 
            ap_sig_ready_kernel_val_2_0_channel_full_n <= kernel_val_2_0_channel_full_n;
        else 
            ap_sig_ready_kernel_val_2_0_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_2_1_channel_full_n assign process. --
    ap_sig_ready_kernel_val_2_1_channel_full_n_assign_proc : process(kernel_val_2_1_channel_full_n, ap_reg_ready_kernel_val_2_1_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_2_1_channel_full_n)) then 
            ap_sig_ready_kernel_val_2_1_channel_full_n <= kernel_val_2_1_channel_full_n;
        else 
            ap_sig_ready_kernel_val_2_1_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ready_kernel_val_2_2_channel_full_n assign process. --
    ap_sig_ready_kernel_val_2_2_channel_full_n_assign_proc : process(kernel_val_2_2_channel_full_n, ap_reg_ready_kernel_val_2_2_channel_full_n)
    begin
        if ((ap_const_logic_0 = ap_reg_ready_kernel_val_2_2_channel_full_n)) then 
            ap_sig_ready_kernel_val_2_2_channel_full_n <= kernel_val_2_2_channel_full_n;
        else 
            ap_sig_ready_kernel_val_2_2_channel_full_n <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_start_in_blur_AXIM2Mat_U0_ap_start assign process. --
    ap_sig_start_in_blur_AXIM2Mat_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_blur_AXIM2Mat_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_start) and (ap_const_logic_0 = ap_reg_ready_blur_AXIM2Mat_U0_ap_ready))) then 
            ap_sig_start_in_blur_AXIM2Mat_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_blur_AXIM2Mat_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_start_in_blur_Block_proc9_U0_ap_start assign process. --
    ap_sig_start_in_blur_Block_proc9_U0_ap_start_assign_proc : process(ap_start, ap_reg_ready_blur_Block_proc9_U0_ap_ready)
    begin
        if (((ap_const_logic_0 = ap_reg_ready_blur_Block_proc9_U0_ap_ready) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_start_in_blur_Block_proc9_U0_ap_start <= ap_const_logic_1;
        else 
            ap_sig_start_in_blur_Block_proc9_U0_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_top_allready assign process. --
    ap_sig_top_allready_assign_proc : process(ap_sig_ready_blur_Block_proc9_U0_ap_ready, ap_sig_ready_blur_AXIM2Mat_U0_ap_ready)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_blur_Block_proc9_U0_ap_ready) and (ap_const_logic_1 = ap_sig_ready_blur_AXIM2Mat_U0_ap_ready))) then 
            ap_sig_top_allready <= ap_const_logic_1;
        else 
            ap_sig_top_allready <= ap_const_logic_0;
        end if; 
    end process;

    blur_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    blur_AXIM2Mat_U0_ap_continue <= ap_const_logic_1;
    blur_AXIM2Mat_U0_ap_start <= ap_sig_start_in_blur_AXIM2Mat_U0_ap_start;
    blur_AXIM2Mat_U0_image_in_dout <= image_in_channel_dout;
    blur_AXIM2Mat_U0_image_in_empty_n <= image_in_channel_empty_n;
    blur_AXIM2Mat_U0_img_cols_V_dout <= src_cols_V_channel_dout;
    blur_AXIM2Mat_U0_img_cols_V_empty_n <= src_cols_V_channel_empty_n;
    blur_AXIM2Mat_U0_img_cols_V_out_full_n <= src_cols_V_channel39_full_n;
    blur_AXIM2Mat_U0_img_data_stream_V_full_n <= src_data_stream_0_V_full_n;
    blur_AXIM2Mat_U0_img_rows_V_dout <= src_rows_V_channel_dout;
    blur_AXIM2Mat_U0_img_rows_V_empty_n <= src_rows_V_channel_empty_n;
    blur_AXIM2Mat_U0_img_rows_V_out_full_n <= src_rows_V_channel38_full_n;
    blur_AXIM2Mat_U0_m_axi_fb_ARREADY <= CRTL_BUS_ARREADY;
    blur_AXIM2Mat_U0_m_axi_fb_AWREADY <= ap_const_logic_0;
    blur_AXIM2Mat_U0_m_axi_fb_BID <= ap_const_lv1_0;
    blur_AXIM2Mat_U0_m_axi_fb_BRESP <= ap_const_lv2_0;
    blur_AXIM2Mat_U0_m_axi_fb_BUSER <= ap_const_lv1_0;
    blur_AXIM2Mat_U0_m_axi_fb_BVALID <= ap_const_logic_0;
    blur_AXIM2Mat_U0_m_axi_fb_RDATA <= CRTL_BUS_RDATA;
    blur_AXIM2Mat_U0_m_axi_fb_RID <= CRTL_BUS_RID;
    blur_AXIM2Mat_U0_m_axi_fb_RLAST <= CRTL_BUS_RLAST;
    blur_AXIM2Mat_U0_m_axi_fb_RRESP <= CRTL_BUS_RRESP;
    blur_AXIM2Mat_U0_m_axi_fb_RUSER <= CRTL_BUS_RUSER;
    blur_AXIM2Mat_U0_m_axi_fb_RVALID <= CRTL_BUS_RVALID;
    blur_AXIM2Mat_U0_m_axi_fb_WREADY <= ap_const_logic_0;
    blur_Block_proc9_U0_ap_continue <= ap_const_logic_1;
    blur_Block_proc9_U0_ap_start <= ap_sig_start_in_blur_Block_proc9_U0_ap_start;
    blur_Block_proc9_U0_image_in <= image_in;
    blur_Block_proc9_U0_image_in_out_full_n <= image_in_channel_full_n;
    blur_Block_proc9_U0_image_out <= image_out;
    blur_Block_proc9_U0_image_out_out_full_n <= image_out_channel_full_n;
    blur_Block_proc9_U0_src_cols_V_out_full_n <= src_cols_V_channel_full_n;
    blur_Block_proc9_U0_src_rows_V_out_full_n <= src_rows_V_channel_full_n;
    blur_CRTL_BUS_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    blur_Filter2D_U0_ap_continue <= ap_const_logic_1;
    blur_Filter2D_U0_ap_start <= (kernel_val_0_0_channel_empty_n and kernel_val_0_1_channel_empty_n and kernel_val_0_2_channel_empty_n and kernel_val_1_0_channel_empty_n and kernel_val_1_1_channel_empty_n and kernel_val_1_2_channel_empty_n and kernel_val_2_0_channel_empty_n and kernel_val_2_1_channel_empty_n and kernel_val_2_2_channel_empty_n);
    blur_Filter2D_U0_p_dst_data_stream_V_full_n <= dst_data_stream_0_V_full_n;
    blur_Filter2D_U0_p_kernel_val_0_0_read <= kernel_val_0_0_channel_dout;
    blur_Filter2D_U0_p_kernel_val_0_1_read <= kernel_val_0_1_channel_dout;
    blur_Filter2D_U0_p_kernel_val_0_2_read <= kernel_val_0_2_channel_dout;
    blur_Filter2D_U0_p_kernel_val_1_0_read <= kernel_val_1_0_channel_dout;
    blur_Filter2D_U0_p_kernel_val_1_1_read <= kernel_val_1_1_channel_dout;
    blur_Filter2D_U0_p_kernel_val_1_2_read <= kernel_val_1_2_channel_dout;
    blur_Filter2D_U0_p_kernel_val_2_0_read <= kernel_val_2_0_channel_dout;
    blur_Filter2D_U0_p_kernel_val_2_1_read <= kernel_val_2_1_channel_dout;
    blur_Filter2D_U0_p_kernel_val_2_2_read <= kernel_val_2_2_channel_dout;
    blur_Filter2D_U0_p_src_cols_V_dout <= src_cols_V_channel39_dout;
    blur_Filter2D_U0_p_src_cols_V_empty_n <= src_cols_V_channel39_empty_n;
    blur_Filter2D_U0_p_src_data_stream_V_dout <= src_data_stream_0_V_dout;
    blur_Filter2D_U0_p_src_data_stream_V_empty_n <= src_data_stream_0_V_empty_n;
    blur_Filter2D_U0_p_src_rows_V_dout <= src_rows_V_channel38_dout;
    blur_Filter2D_U0_p_src_rows_V_empty_n <= src_rows_V_channel38_empty_n;

    -- blur_Loop_1_proc_U0_ap_continue assign process. --
    blur_Loop_1_proc_U0_ap_continue_assign_proc : process(ap_sig_ready_kernel_val_0_1_channel_full_n, ap_sig_ready_kernel_val_0_0_channel_full_n, ap_sig_ready_kernel_val_0_2_channel_full_n, ap_sig_ready_kernel_val_1_0_channel_full_n, ap_sig_ready_kernel_val_1_1_channel_full_n, ap_sig_ready_kernel_val_1_2_channel_full_n, ap_sig_ready_kernel_val_2_0_channel_full_n, ap_sig_ready_kernel_val_2_1_channel_full_n, ap_sig_ready_kernel_val_2_2_channel_full_n)
    begin
        if (((ap_const_logic_1 = ap_sig_ready_kernel_val_0_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_0_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_0_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_1_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_1_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_1_2_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_2_0_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_2_1_channel_full_n) and (ap_const_logic_1 = ap_sig_ready_kernel_val_2_2_channel_full_n))) then 
            blur_Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
        else 
            blur_Loop_1_proc_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    blur_Loop_1_proc_U0_ap_start <= ap_start;
    blur_Mat2AXIM_U0_ap_continue <= ap_sig_hs_continue;
    blur_Mat2AXIM_U0_image_out_dout <= image_out_channel_dout;
    blur_Mat2AXIM_U0_image_out_empty_n <= image_out_channel_empty_n;
    blur_Mat2AXIM_U0_img_data_stream_V_dout <= dst_data_stream_0_V_dout;
    blur_Mat2AXIM_U0_img_data_stream_V_empty_n <= dst_data_stream_0_V_empty_n;
    blur_Mat2AXIM_U0_m_axi_fb_ARREADY <= ap_const_logic_0;
    blur_Mat2AXIM_U0_m_axi_fb_AWREADY <= CRTL_BUS_AWREADY;
    blur_Mat2AXIM_U0_m_axi_fb_BID <= CRTL_BUS_BID;
    blur_Mat2AXIM_U0_m_axi_fb_BRESP <= CRTL_BUS_BRESP;
    blur_Mat2AXIM_U0_m_axi_fb_BUSER <= CRTL_BUS_BUSER;
    blur_Mat2AXIM_U0_m_axi_fb_BVALID <= CRTL_BUS_BVALID;
    blur_Mat2AXIM_U0_m_axi_fb_RDATA <= ap_const_lv8_0;
    blur_Mat2AXIM_U0_m_axi_fb_RID <= ap_const_lv1_0;
    blur_Mat2AXIM_U0_m_axi_fb_RLAST <= ap_const_logic_0;
    blur_Mat2AXIM_U0_m_axi_fb_RRESP <= ap_const_lv2_0;
    blur_Mat2AXIM_U0_m_axi_fb_RUSER <= ap_const_lv1_0;
    blur_Mat2AXIM_U0_m_axi_fb_RVALID <= ap_const_logic_0;
    blur_Mat2AXIM_U0_m_axi_fb_WREADY <= CRTL_BUS_WREADY;
    dst_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    dst_data_stream_0_V_din <= blur_Filter2D_U0_p_dst_data_stream_V_din;
    dst_data_stream_0_V_read <= blur_Mat2AXIM_U0_img_data_stream_V_read;
    dst_data_stream_0_V_write <= blur_Filter2D_U0_p_dst_data_stream_V_write;
    image_in_channel_U_ap_dummy_ce <= ap_const_logic_1;
    image_in_channel_din <= blur_Block_proc9_U0_image_in_out_din;
    image_in_channel_read <= blur_AXIM2Mat_U0_image_in_read;
    image_in_channel_write <= blur_Block_proc9_U0_image_in_out_write;
    image_out_channel_U_ap_dummy_ce <= ap_const_logic_1;
    image_out_channel_din <= blur_Block_proc9_U0_image_out_out_din;
    image_out_channel_read <= blur_Mat2AXIM_U0_image_out_read;
    image_out_channel_write <= blur_Block_proc9_U0_image_out_out_write;
    kernel_val_0_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_0_0_channel_din <= blur_Loop_1_proc_U0_ap_return_0;
    kernel_val_0_0_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_0_0_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_0_channel;
    kernel_val_0_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_0_1_channel_din <= blur_Loop_1_proc_U0_ap_return_1;
    kernel_val_0_1_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_0_1_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_1_channel;
    kernel_val_0_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_0_2_channel_din <= blur_Loop_1_proc_U0_ap_return_2;
    kernel_val_0_2_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_0_2_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_0_2_channel;
    kernel_val_1_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_1_0_channel_din <= blur_Loop_1_proc_U0_ap_return_3;
    kernel_val_1_0_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_1_0_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_0_channel;
    kernel_val_1_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_1_1_channel_din <= blur_Loop_1_proc_U0_ap_return_4;
    kernel_val_1_1_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_1_1_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_1_channel;
    kernel_val_1_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_1_2_channel_din <= blur_Loop_1_proc_U0_ap_return_5;
    kernel_val_1_2_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_1_2_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_1_2_channel;
    kernel_val_2_0_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_2_0_channel_din <= blur_Loop_1_proc_U0_ap_return_6;
    kernel_val_2_0_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_2_0_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_0_channel;
    kernel_val_2_1_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_2_1_channel_din <= blur_Loop_1_proc_U0_ap_return_7;
    kernel_val_2_1_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_2_1_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_1_channel;
    kernel_val_2_2_channel_U_ap_dummy_ce <= ap_const_logic_1;
    kernel_val_2_2_channel_din <= blur_Loop_1_proc_U0_ap_return_8;
    kernel_val_2_2_channel_read <= blur_Filter2D_U0_ap_ready;
    kernel_val_2_2_channel_write <= ap_chn_write_blur_Loop_1_proc_U0_kernel_val_2_2_channel;
    src_cols_V_channel39_U_ap_dummy_ce <= ap_const_logic_1;
    src_cols_V_channel39_din <= blur_AXIM2Mat_U0_img_cols_V_out_din;
    src_cols_V_channel39_read <= blur_Filter2D_U0_p_src_cols_V_read;
    src_cols_V_channel39_write <= blur_AXIM2Mat_U0_img_cols_V_out_write;
    src_cols_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src_cols_V_channel_din <= blur_Block_proc9_U0_src_cols_V_out_din;
    src_cols_V_channel_read <= blur_AXIM2Mat_U0_img_cols_V_read;
    src_cols_V_channel_write <= blur_Block_proc9_U0_src_cols_V_out_write;
    src_data_stream_0_V_U_ap_dummy_ce <= ap_const_logic_1;
    src_data_stream_0_V_din <= blur_AXIM2Mat_U0_img_data_stream_V_din;
    src_data_stream_0_V_read <= blur_Filter2D_U0_p_src_data_stream_V_read;
    src_data_stream_0_V_write <= blur_AXIM2Mat_U0_img_data_stream_V_write;
    src_rows_V_channel38_U_ap_dummy_ce <= ap_const_logic_1;
    src_rows_V_channel38_din <= blur_AXIM2Mat_U0_img_rows_V_out_din;
    src_rows_V_channel38_read <= blur_Filter2D_U0_p_src_rows_V_read;
    src_rows_V_channel38_write <= blur_AXIM2Mat_U0_img_rows_V_out_write;
    src_rows_V_channel_U_ap_dummy_ce <= ap_const_logic_1;
    src_rows_V_channel_din <= blur_Block_proc9_U0_src_rows_V_out_din;
    src_rows_V_channel_read <= blur_AXIM2Mat_U0_img_rows_V_read;
    src_rows_V_channel_write <= blur_Block_proc9_U0_src_rows_V_out_write;
end behav;
