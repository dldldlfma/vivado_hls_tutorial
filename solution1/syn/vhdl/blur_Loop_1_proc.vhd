-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blur_Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of blur_Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal coefficients_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal coefficients_ce0 : STD_LOGIC;
    signal coefficients_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_fu_98_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_339 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal tmp_3_fu_120_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_213_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_352 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal exitcond_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_68 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_82 : BOOLEAN;
    signal j_reg_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal tmp_4_cast_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_val_2_2_s_fu_20 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_0_cast_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_1_s_fu_24 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_0_s_fu_28 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_2_0_s_fu_32 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_2_s_fu_36 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_1_s_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_1_s_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_1_0_s_fu_48 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_val_0_2_s_fu_52 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_108_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_116_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_104_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_42_fu_219_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_223_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component blur_Loop_1_proc_coefficients IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    coefficients_U : component blur_Loop_1_proc_coefficients
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coefficients_address0,
        ce0 => coefficients_ce0,
        q0 => coefficients_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_92_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_68 assign process. --
    i_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond_fu_207_p2)))) then 
                i_reg_68 <= i_1_reg_339;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_82))) then 
                i_reg_68 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- j_reg_80 assign process. --
    j_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_80 <= j_1_reg_352;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_92_p2 = ap_const_lv1_0))) then 
                j_reg_80 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_339 <= i_1_fu_98_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_1_reg_352 <= j_1_fu_213_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv2_0 = i_reg_68) and (ap_const_lv2_0 = j_reg_80))) then
                kernel_val_0_0_s_fu_28 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv2_0 = i_reg_68) and (j_reg_80 = ap_const_lv2_1))) then
                kernel_val_0_1_s_fu_40 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv2_0 = i_reg_68) and not((j_reg_80 = ap_const_lv2_1)) and not((ap_const_lv2_0 = j_reg_80)))) then
                kernel_val_0_2_s_fu_52 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (i_reg_68 = ap_const_lv2_1) and (ap_const_lv2_0 = j_reg_80))) then
                kernel_val_1_0_s_fu_48 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (i_reg_68 = ap_const_lv2_1) and (j_reg_80 = ap_const_lv2_1))) then
                kernel_val_1_1_s_fu_44 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (i_reg_68 = ap_const_lv2_1) and not((j_reg_80 = ap_const_lv2_1)) and not((ap_const_lv2_0 = j_reg_80)))) then
                kernel_val_1_2_s_fu_36 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((i_reg_68 = ap_const_lv2_1)) and not((ap_const_lv2_0 = i_reg_68)) and (ap_const_lv2_0 = j_reg_80))) then
                kernel_val_2_0_s_fu_32 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((i_reg_68 = ap_const_lv2_1)) and not((ap_const_lv2_0 = i_reg_68)) and (j_reg_80 = ap_const_lv2_1))) then
                kernel_val_2_1_s_fu_24 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((i_reg_68 = ap_const_lv2_1)) and not((ap_const_lv2_0 = i_reg_68)) and not((j_reg_80 = ap_const_lv2_1)) and not((ap_const_lv2_0 = j_reg_80)))) then
                kernel_val_2_2_s_fu_20 <= kernel_val_2_0_cast_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_92_p2 = ap_const_lv1_0))) then
                tmp_3_reg_344 <= tmp_3_fu_120_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond1_fu_92_p2, exitcond_fu_207_p2, ap_sig_bdd_82)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_82)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond1_fu_92_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond_fu_207_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_92_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_92_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_92_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond1_fu_92_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= kernel_val_0_0_s_fu_28;
    ap_return_1 <= kernel_val_0_1_s_fu_40;
    ap_return_2 <= kernel_val_0_2_s_fu_52;
    ap_return_3 <= kernel_val_1_0_s_fu_48;
    ap_return_4 <= kernel_val_1_1_s_fu_44;
    ap_return_5 <= kernel_val_1_2_s_fu_36;
    ap_return_6 <= kernel_val_2_0_s_fu_32;
    ap_return_7 <= kernel_val_2_1_s_fu_24;
    ap_return_8 <= kernel_val_2_2_s_fu_20;

    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_82 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    coefficients_address0 <= tmp_4_cast_fu_228_p1(4 - 1 downto 0);

    -- coefficients_ce0 assign process. --
    coefficients_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            coefficients_ce0 <= ap_const_logic_1;
        else 
            coefficients_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_92_p2 <= "1" when (i_reg_68 = ap_const_lv2_3) else "0";
    exitcond_fu_207_p2 <= "1" when (j_reg_80 = ap_const_lv2_3) else "0";
    i_1_fu_98_p2 <= std_logic_vector(unsigned(i_reg_68) + unsigned(ap_const_lv2_1));
    j_1_fu_213_p2 <= std_logic_vector(unsigned(j_reg_80) + unsigned(ap_const_lv2_1));
        kernel_val_2_0_cast_fu_233_p1 <= std_logic_vector(resize(signed(coefficients_q0),8));

    p_shl_cast_fu_116_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_108_p3),5));
    tmp_2_fu_108_p3 <= (i_reg_68 & ap_const_lv2_0);
    tmp_3_fu_120_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_116_p1) - unsigned(tmp_cast_fu_104_p1));
        tmp_4_cast_fu_228_p1 <= std_logic_vector(resize(signed(tmp_4_fu_223_p2),64));

    tmp_4_fu_223_p2 <= std_logic_vector(unsigned(tmp_3_reg_344) + unsigned(tmp_cast_42_fu_219_p1));
    tmp_cast_42_fu_219_p1 <= std_logic_vector(resize(unsigned(j_reg_80),5));
    tmp_cast_fu_104_p1 <= std_logic_vector(resize(unsigned(i_reg_68),5));
end behav;
